{"meta":{"title":"ning_qiuyu blog","subtitle":"要…下雨了","description":"A new start in life experience","author":"Weiyu","url":"http://muxueweiyu.github.io","root":"/"},"pages":[{"title":"Tags","date":"2021-03-25T02:29:50.083Z","updated":"2021-03-25T02:29:50.083Z","comments":true,"path":"tags/index.html","permalink":"http://muxueweiyu.github.io/tags/index.html","excerpt":"","text":""},{"title":"Hi,I'm Qiuyu","date":"2018-09-27T04:53:34.000Z","updated":"2021-05-03T14:49:47.228Z","comments":true,"path":"about/index.html","permalink":"http://muxueweiyu.github.io/about/index.html","excerpt":"I’m a engineer.Full of curiosity about this world.","text":"I’m a engineer.Full of curiosity about this world."},{"title":"Categories","date":"2021-03-25T02:29:50.077Z","updated":"2021-03-25T02:29:50.077Z","comments":true,"path":"categories/index.html","permalink":"http://muxueweiyu.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"代码大全","slug":"professional/effience/代码大全","date":"2021-05-06T14:58:07.000Z","updated":"2021-05-06T15:15:17.157Z","comments":true,"path":"2021/05/06/professional/effience/代码大全/","link":"","permalink":"http://muxueweiyu.github.io/2021/05/06/professional/effience/%E4%BB%A3%E7%A0%81%E5%A4%A7%E5%85%A8/","excerpt":"预览","text":"预览 欢迎进入软件创建世界开发计算机软件是一项非常复杂的工作，在过去的十五年中，研究者们指出了这项工作所包括的主要方面，包括： 问题定义 需求分析 实现计划 总体设计 详细设计 创建即实现 系统集成 单元测试 系统测试 校正性的维护 功能强化 验证基础工作已经完成，可以进行创建工作 设计和编写子程序与模块 创立数据类型并命名变量 选择控制结构并组织语句块 找出并修正错误 评审其它小组的细节设计和代码，同时接受其它小组评审 通过仔细地格式化和征集意见改进编码 对分别完成的软件单元进行综合 调整编码使其更小、更快 创建活动是开发软件的重要组成部分。 创建活动在软件开发中处于枢纽地位。 把主要精力集中于创建活动，可以极大地提高程序员的生产效率。 创建活动的产品，源代码，往往是软件的唯一精确描述。 创建活动是唯一一项必不可少的工作。 创建活动是总体设计和系统测试之间承上启下的工作。 创建活动主要包括：详细设计、编码、调试和单元测试。 关于创建活动的其它称谓有：实现、编程等。 创建活动质量对软件质量有潜在影响。 在最后的分析中，对创建活动理解的好坏，决定了一个程序员素质的高低，这将在本书其余部分论述。 利用隐喻对编程进行更深刻的理解在当时，数据处理正从以计算机为中心向以数据库为中心进行转变。Bachman 指出，在旧的处理模式中，数据被当成是一个连续流过计算机的卡片流（以计算机为中心）；而在新的模式中，数据好比是一个水池，而计算机则偶尔涉足其中（以数据库为中心）。 如果一旦看了新的模型，我们便说：“哦，当然正确的模型更有用，其余的都是错误的”，那只会降低模型的作用。因为这太偏激了。科学史并不是由一系列从“错误”模型到“正确”模型开关组成的，而是逐渐由“坏的”模型变为“较好”的模型，从包含面较窄到包含面较宽，从覆盖领域较少到覆盖领域较多。 软件科学是一门比其它学科年轻得多的学科，还很不成熟，远未形成一套标准的模型。所以，现在拥有的是大量相互矛盾的模型。这其中有些很好，有些则很差。因此，对这些模型理解得好坏，便决定了你对软件开发理解的好坏。 软件隐喻更像是一束搜索灯光，而不是一张地图，它并不会告诉你到哪里去寻找答案；它只给你以启发，教你如何寻找答案，而不是像数学算法一样硬性规定出到哪里找出答案。 Paul Heekel 说这就像电影《白雪公主与七个小矮人》。David Gries 说这是科学，Donald Knuth 则说这是门艺术，Watts Hamphrey 则说这是一个过程，Peter Freeman 说这是个系统，Harlan Mills 认为这就像解数学题、做外科手术、或者是宰一条狗，Mark Spinrad 和 Curt Abraham 说这更像是开发西部、在冰水中洗澡或者围着营火吃豆子。 软件书写：写代码（Writing Code) 开发软件最原始的隐喻出自“写代码”一词。这个写的隐喻说明开发一个程序就像随便写封信，你准备好纸、笔和墨水，坐下从头写到尾就算完成了。这不需要任何正式计划，你只是把你要说的都写出来。许多想法都源于写隐喻。Jon Beitle 说，你应该准备好一杯白兰地，一支上等雪茄，与你喜欢的猎狗一同坐在火边，像一个优秀小说家一样享受一次“自由编程”。Brian 和 Kernighan 把写隐喻风格的书称为《风格要素》（《The Elements of Style》）之后，把他们编程风格的书称作《编程风格要素》（《The Elements of Programming Style》），程序员们则经常谈论程序的“可读性”。 软件播种：生成系统（Growing a System） 软件珍珠培植法：系统积累(System Accretion) 软件创建：建造软件（building software）","categories":[{"name":"professional","slug":"professional","permalink":"http://muxueweiyu.github.io/categories/professional/"},{"name":"effience","slug":"professional/effience","permalink":"http://muxueweiyu.github.io/categories/professional/effience/"}],"tags":[{"name":"软件","slug":"软件","permalink":"http://muxueweiyu.github.io/tags/%E8%BD%AF%E4%BB%B6/"}]},{"title":"Hanselman","slug":"People that affect me/hanselman","date":"2021-05-03T14:52:20.000Z","updated":"2021-05-03T14:54:20.077Z","comments":true,"path":"2021/05/03/People that affect me/hanselman/","link":"","permalink":"http://muxueweiyu.github.io/2021/05/03/People%20that%20affect%20me/hanselman/","excerpt":"很棒的个人网站，值得学习","text":"很棒的个人网站，值得学习","categories":[{"name":"People that affect me","slug":"People-that-affect-me","permalink":"http://muxueweiyu.github.io/categories/People-that-affect-me/"}],"tags":[{"name":"affect","slug":"affect","permalink":"http://muxueweiyu.github.io/tags/affect/"},{"name":"people","slug":"people","permalink":"http://muxueweiyu.github.io/tags/people/"}]},{"title":"代码之外","slug":"professional/effience/代码之外","date":"2021-05-03T03:07:45.000Z","updated":"2021-05-06T14:57:18.344Z","comments":true,"path":"2021/05/03/professional/effience/代码之外/","link":"","permalink":"http://muxueweiyu.github.io/2021/05/03/professional/effience/%E4%BB%A3%E7%A0%81%E4%B9%8B%E5%A4%96/","excerpt":"预览","text":"预览 迥然不同确保写出的代码不至于让你的后继维护者恨不得驾起他们的小汽车从你身上碾过…… 你所能犯的最大错误就是相信自己是在为别人工作。这样一来你对工作的安全感已然尽失。职业发展的驱动力一定是来自个体本身。记住：工作是属于公司的，而职业生涯却是属于你自己的。 ——厄尔•南丁格尔 非同凡响成为专业人士是一种心态。如果我们总是与恐惧、自毁、拖延和自我怀疑作斗争，那么问题就是：我们正在像外行那样思考问题。外行毫不起眼，外行人废话连篇，外行屈从于逆境。专业人士可不这么想。不管怎样，他引人注目，他恪尽职守，他始终如一。 interactive-resume 在做Java项目的那几年里，我学到的东西比之前工作中学到的都多。突然之间，我有了一个巨大的装满各式工具的工具箱，能用来解决任何问题，我再也不像以前那样死守着少数几个被过度使用的工具。 如果你想成功，你必须要学会收起自己脆弱的自尊心，勇敢走出去，别害怕让自己出丑。每一位著名的演员、音乐家、专业运动员和公共演说家都曾有过表现不佳的时候，他们自觉地选择了走出困境，尽力而为。成功终将会来。你不可能专注做某件事而毫无长进，你只要坚持足够长的时间就会有收获。你的生存之道就是不必太在意。别害怕被人看作傻瓜。 在我的职业生涯中，我一共错失了9 000多次投篮，输掉了近300场比赛。我本来有26次绝杀的机会却投球不进。我失败了一次又一次。这就是我能够成功的原因。 ——迈克尔·乔丹 教育的首要目标，并不在于“知”而在于“行”。 ——赫伯特·斯宾塞 可以换个角度思考一下这个问题：你可能看遍了教你如何正确骑车的书，也可能看过别人骑自行车的视频，我也可以给你培训正确骑车的机械原理，但是，如果你从来没有骑过自行车，那么当你第一次骑的时候你一定会摔倒。你可能对自行车无所不知，熟悉骑车的机械原理，知道哪种自行车最好，但是直到你将自己所学的东西用于实践，你才算真正学会了骑自行车。 同理，许多软件开发人员拿起一本关于编程语言或框架的技术书，从头到尾地读上一遍，就想奢望他们能够吸收其中的所有信息吗？最好的情况可能是借助这种方法，你能快速积累该主题的全部信息，但你仍然没有真正学会它。 如果你想学习一些东西，你应该做什么？好了，刚才我们讲过了，最好的方法就是付诸于实践，如果你也能承担将自己所学的内容教给别人的任务，那么你会理解得更深刻。所以，你在自我教育方面的努力，应该聚焦在如何让自己切实参与，并且尽早付诸实践。 我觉得学习知识的最好方式就是立即将其用于实践，即使你还不知道自己在做什么。如果关于某个主题你能够获得足够的知识能够操作，你就可以发挥自己心灵深处强大的创造力和好奇心。当我们能够在一件事情上尽情发挥的时候，我们的内心就更倾向于吸收更多的信息，思考更有意义的问题。 在你阅读某个主题的书之前，大致浏览后就开始实践。不用担心自己是否知道自己在做什么。乐在其中，你就会发现随着自己的实验和探索，自己在哪些方面发现了问题。 一旦你已经实践过，并积累了各式各样的问题，立刻回到书本当中。当你回去重读这些参考资料的时候，你有强烈的冲动去消化吸收其中的内容。因为你已经积攒了很多想要找到答案的问题，你对哪些内容更重要早已了然于胸。 然后，你可以把自己学到的新知识重新应用于实践。看看你学到的新方法是否能解决你已有的问题。你可以继续探索新领域，发现需要解决的新问题。以解决实践过程中发现的问题为目标，在向着知识前进的道路上重复这个循环，周而复始。通过这种方式获得的信息对你才是有意义的——“纸上得来终觉浅”啊。 最后，你可以将自己所学的打包教给别人。这一点是画龙点睛之笔，你应该随时准备与有兴趣倾听的人分享你新学到的知识，你会为自己的发现激动不已——玩儿的力量就是这么巨大。教导他人也很容易，它可以简单到你与配偶之间就自己学到的新东西进行的一次对话，也可以是写一篇博客文章。关键在于，你要用自己的语言将这些信息组织起来，把你的思想表述给别人。 学习始终是一项棘手的任务，因为在开始学习某些东西的时候，你对自己到底要学什么理解得并不透彻。美国前国防部长唐纳德·拉姆斯菲尔德曾说过“未知之未知”（unknown unknowns），即你根本不知道自己不知道。 大多数开发人员在打开一本新书开始阅读的时候，他们对自己所不知的一无所知。他们将“未知之未知”留到后面去发现。这一方法的问题在于，你要么学非所需，要么力所不及。在深入探究某个主题之前至少要对其有所了解，这一点非常重要。这样你才能弄清自己到底要学什么，找出最好的学习方式。 在这一步，你要做的就是了解自己将要学习的主题的全局。这个主题宏观上什么样？你能从中学到足够丰富的知识以了解自己所不知道的吗？以及自己所不知道的有多少？ 你告诉我的，我都忘了。你教会我的，我都记得。让我乐在其中，我就一定能学会。 任何你所做的重复性工作都值得彻查一番，看看是否有自己不理解的地方，如果你这样做了，可能会提高你的工作效率。想想键盘快捷键。你一直重复使用某个应用，但是并没那么高效，原因是你不得不手动在屏幕上拖曳鼠标并点击。键盘快捷键可能就是你的知识短板。花点儿时间学习每天会用几个小时的应用（提示：你的IDE编程环境）的快捷键，一周能给你节约好几个小时的时间。 外行静坐等待灵感，其他人则唤起激情努力工作。 ——斯蒂芬•金，《写作这回事：创作生涯回忆录》（On Writing: A Memoir of the Craft） 专注非常重要，因为它可以让我们在处理任务的时候不必一遍又一遍地重复基础部分。我们的思维模式是这样的：花一些时间先把所有的事务在脑子里过一遍，然后才能达到思维高峰以完成任务。你可以把这个过程想象为汽车在高速公路上行驶时的提速过程。车子在进入高速行驶之前需要更换几个挡位。如果你总是不断地起步停车，那么你的整体速度就会很慢很慢。要让车回到高速，换到五挡，需要花点儿时间。但是，一旦你开到五挡，那就能轻松巡航了。 我确信你有过这样的状态，你全心工作，感觉毫不费力。要想进入这种状态常常需要费点儿时间，但是一旦找到这种状态，你就能在短期内完成很多任务（除非你为了找出一个难以找到的bug在原地打转）。 我必须得征服它，强迫自己的手指必须要继续打字。现在我已经进入了可以连续打字数个小时（有时候也许是数个半小时[1]）的状态。关键在于，我不得不坐下来，强迫自己进入专注模式。 每人每天能够专注地、富有成效地工作的时间是有上限的。你的时间只有这么多，要怎么利用你自己说了算。 我刚开始在家工作的时候，我曾打算早起工作，然而我却没有——当时我并不是偷懒，只是不习惯对自己负责。我已经习惯了由外部因素来左右自己的行为。当由我自己决定是否工作的时候，我选择了不工作。这是人之常情。 这种做法暴露了我在职业道德方面的一个致命缺陷，极大地降低了我的生产力。我受外部动机所左右而非内部动机。对雇主负责让我处于被监督的状态，然而一旦自己能做主，我就没有发自内心的责任感来控制自己的行为。 培养出在没有人监督自己的时候也能高效工作的自我责任感非常重要。你也可以把这称为是具有一种性格或者具有一种素质，它们都是同一个概念。如果缺乏对自己的责任感，你将永远依赖外部动机来驱使你努力工作。你容易折服于一根胡萝卜的诱惑，也容易屈从于一根大棒的威胁（如果你胆敢越轨）。 自我控制是一门自我激励的艺术，而自我激励的核心则是自我责任感。如果你想不再依赖别人的影响，获得稳定、可预测的结果，你就要学会对自己负责。 成就我们的恰恰就是那些不断重复做的事情。因此，优秀不是一种行为，而是一种习惯。 ——亚里士多德 我们每个人都有习惯，有好有坏。好习惯能够推动我们前进，帮助我们成长；坏习惯则阻止我们前进，阻碍我们成长。培养和养成良好的习惯可以让你不需要刻意努力就保持很高的生产效率。如同惯例可以帮我们缓慢而坚定地每次只砌好一块砖，最终建起一面巨大的墙一样，习惯也可以通过日积月累的努力，让我们前进或者后退。二者最大的区别在于，惯例是我们可以控制的，而习惯却不受我们控制。 金钱只是一种工具。它会带你去往任何你想去的地方，但不会取代你成为司机。 ——爱思•然德（Ayn Rand） 游戏化的健身应用 HabiticaSuper BetterFitocracyZombies, Run! 人类的身体具有令人惊讶的适应性。如果你用手抓住粗糙的东西，手掌上会生出老茧来保护双手；如果你长跑，你的心血管系统会产生适应性，让长跑变得更轻松；如果你举重，你的身体会长出更大的肌肉。 在开始跑步之前，最重要的就是下定决心。如果不能坚持一周跑3次，即使你一开始就实行Couch-to-5K计划，也不会有任何实际进展。如果你不能坚持跑步，你不仅不会进步反而会退步。锻炼耐力需要时间，而失去耐力却不需要太多时间。 如果你不征服自己，你就会被自己征服。 ——拿破仑•希尔 我们有选择的自由，我们有自由的意志。 信念决定思想， 思想决定言语， 言语决定行动， 行动决定习惯， 习惯决定价值， 价值决定命运。 ——圣雄甘地 做一个绝望的、缺乏自信的人，你可能会发现自己真的孤立无援。如果你发现你面试的对象就像大街上一个垂死挣扎的乞丐一样祈求你施舍给他工作岗位，你也会觉得他很惹人生厌。 人很奇怪。他们喜欢各种各样的东西。只需要在网上搜索一下，就会出现一些奇谈怪论证明这是真的。我为什么要这么说呢？因为这说明无论你看起来有多奇特，无论你觉得自己有怎样的缺陷，即使你没有完美的笑容，没有轮廓分明的腹肌，也可能会有很多人喜欢你。事实上，在这个广袤的世界里，可能会有很多非常适合你的潜在人选，他们或许跟你一样奇特，又或许和你一点儿都不一样。 这就意味着，所有的一切无非就是一场数字游戏。太多人会犯这样的错误——挑选一个人，然后把他/她当作理想人选放在神龛上，时刻想念着那个能让他们觉得“开心”的完美女生或者男生。假设只有这么一个完美的人，这种想法不但荒谬而且缺乏策略。如果扩大搜索范围，你的机会更好。 刚开始工作的时候，我花了大量的时间阅读软件开发类的书籍。现在，我会花更多的时间读更广泛适用的书。 我养成了一个习惯，我会请与我见过面的那些获得巨大成功或者非常著名的人士推荐一本每个人都应该阅读的书。通过这一探索，我发现了很多很有效的书，这些书真正改变了我的生活。 书单Steven Pressfield的The War of Art［Black Irish Books，2002］ Dale Carnegie的《人性的弱点》（How to Win Friends and Influence People）［Gallery Books，1998再版］ Napoleon Hill的 《思考致富》 （Think and Grow Rich） ［Wilder Publications，2007］ Maxwell Maltz的《心理控制方法》（Psycho-Cybernetics）［Pocket Books，1989再版］ Norman Vincent Peale的《积极思考就是力量》（The Power of Positive Thinking）［Touchstone，2003再版］ Ayn Rand的《阿特拉斯耸耸肩》（Atlas Shrugged）［Signet，2005再版］ 软件开发类图书Steve McConnell的 《代码大全》 （Code Complete） ［Microsoft Press，2004］ Robert Martin的《代码整洁之道》（Clean Code: A Handbook of Agile Software Craftmanship）［Prentice Hall，2008］ Eric Freeman、Elisabeth Robson、Bert Bates和Kathy Sierra的 《Head First设计模式》（Head First Design Patterns）［O’Reilly Media，2004］ 投资类图书Gary Keller的The Millionaire Real Estate Investor［McGraw-Hill，2005］ Robert Kiyosaki的《富爸爸，穷爸爸》（Rich Dad,Poor Dad）［Demco Media，2000］ Kerry Given的No-Hype Options Trading: Myths, Realities, and Strategies That Really__Work［Wiley，2011］ 跌倒七次，爬起来八次。 ——日本谚语 在生活中，也许你能学会让你更成功的所有技能，但是如果你缺少持之以恒这个重要的技能，一切都将是毫无意义的，因为那样的话刚一遇到麻烦你就会放弃——生活中我们都会面对很多麻烦。 另一方面，你的专业知识可能严重不足，你可能缺乏社交技能和金融知识，但是只要你能坚持到底，我相信你最终会找到自己的出路。 作为一名软件开发人员，这种特质对你来说特别重要，因为在你的生活和事业中你很可能面对大量的困难。开发软件就是很难的——很可能这就是它吸引你的原因之一。在本章中，我们将讨论坚持的重要性以及为什么培养面对困难无所畏惧的能力至关重要。 如果非要我猜猜为什么大多数人如此害怕失败，我不得不说这可能是基于保护脆弱的自尊的想法。或许我们害怕失败就是因为我们太过将失败归咎于个人，我们认为在特定领域下的失败是个人价值的流逝。 我认为，对“失败”性质的误解还会助长这种对个人价值伤害的恐惧感。我们都被告之，并且倾向于认为，失败是一件不好的事情。我们没有看到，失败的阴影中暗含着一线曙光，我们只把失败看作是终点—— 失败这个词本身暗示着死胡同、绝望的终点，而不是通往成功之路上的一个暂时壁垒。在我们的脑海中想象这样一个画面：在一个岛上，一群人被困住了。他们无望地坐在沙滩上，没有获救的希望，他们的生活是失败的，他们是失败者。 即使我们知道失败并不是终点，我们似乎也能感受到这一点。我们往往太过较真，把失败看得太重。因为我们接受过把失败看作通往成功道路——很多情况下这也是唯一的一条道路——的训练，所以我们不惜任何代价地避免失败。 失败不同于被打败。失败是暂时的，被打败是永恒的。失败是那些碰巧发生在你身上的——你不能完全控制它。被打败却是你可以选择的——是对失败的某种程度的接受。 要实现不畏惧失败，第一步就是真正意识到失败不是终点——除非你选择把它看作是终点。生活不易，你随时都会被击垮，但是否要重新站起来却完全取决于你自己。它取决于你是否决定为自己最值得拥有的东西战斗，取决于你是否要享受获得成功后的喜悦和乐趣，大多数情况下，它来自于战胜困难的成就感。 你是否玩过一个很难通关的电子游戏？还记得自己打败最后那个大怪时的那种成就感吗？一路走来你可能失败了很多次，但取得成功以后是多么喜悦啊！同样难度的电子游戏，如果你输入了通关码，有无数条命或者变成无敌手，即使通关又有什么乐趣呢？你会拥有成功后的那份喜悦吗？ 还是电子游戏的例子，如果在第一次受挫败被打死的时候你就扔掉了控制器，会发生什么？某种程度上，从很多次失败中获得的经验反而让你最终获得了成功的体验，这是不是更令你乐在其中？如果是这样，你为什么要把失败当作是一种永恒的状态而逃避生活中的失败呢？你不能指望拿起电玩遥控器，不经历掉下陷阱或者被火球烧焦就能通关，那么你为什么要指望一生不经历失败呢？ 不要畏惧失败，要拥抱失败。不只是因为失败和被打败不同，还因为失败是通往成功的必经之路。生活中所有值得拥有、值得去完成的事情都需要经历失败。 在现实世界里，当你在某件事上失败的时候，你从中学到了经验并且有可能成长。我们的大脑就是被这样训练的。如果你曾经试过学习如何玩杂耍，或者打篮球，或者其他需要相互配合的体育活动，你会知道在成功前会失败很多次。 我需要做的就是不断尝试——首先不要害怕去尝试。 重申一遍，我必须要说，即使你在本书中什么都没有学到，那也要记下下面这条建议：学会拥抱失败、期待失败、接受失败，并准备直面失败。 只是不畏惧失败还不够，还要主动寻觅失败。想成长就必须把自己放在保证会失败的环境中。我们常常会因为停止做那些对我们有挑战或者危险的事情而停滞不前。我们寻找生活中的温室，关上小屋的门，拉上窗户，任凭外面狂风暴雨，我们绝不冲到雨中。 但是，有时候你需要被淋湿，有时候你需要把自己放到一个不舒服的环境下强迫自己成长，有时候你需要积极地走出去寻找这样的环境，要知道，你越将你的船驶向失败，将你吹向失败的另外一面（成功）的风就会越强。 要如何拥抱失败？要如何说服自己跳入波涛汹涌的大海？从接受失败是生活的一部分开始。你必须明白，在生活中你要面对很多失败，很多是不可避免的，任何事情第一次做都不可能做到完美，你会犯错。 你还要明白，就算失败也没关系。犯错也没关系。你可以尝试避免犯错，但是不要因为害怕伤害自尊而以付出错失良机为代价。一旦你意识到失败是好事，失败并不能定义你的价值而你对待失败的态度恰恰才能说明你的价值，你才会真正学会对失败无所畏惧。 最后，我还是要建议你将自己暴露在失败的环境里。去做那些让你不舒服的事情。在本书的前面我们讨论过不要害怕看起来像个傻瓜，对待失败我也要说一样的话。事实上，这两个观点是紧密相连的。走出去，有目的地去把自己放在那些不可避免地会导致某种失败的困境中。但关键是不要放弃——让失败点亮通往成功的道路。去经历尽可能多的失败吧，畏惧失败本身才会让你失去克服困难的能力。 “大多数伟大的人取得的最大成功与他们所经历的最大失败只有一步之遥。” 在线资源123456789101112131415161718“Simple Programmer”博客：http://simpleprogrammer.com在这里你会看到与本书里许多话题都相关的海量博客文章，它也是与我本人联络的最佳方式。每周我都会在这里免费发布一些有用信息（当你浏览博客的时候，确保你注册了我的邮件列表，这样你就可以获得各式各样的赠品和我每周创建的别的好东西）。我在YouTube上的自建频道：http://youtube.com/jsonmez在这里你将会看到与本书里许多话题相关的视频材料，全都是免费的。如果你对我在本书中讲述的某个话题感兴趣，试着搜索一下YouTube中我的自建频道——十有八九你都能找到我上传的相关视频材料。“软件开发人员如何营销自我”课程：http://devcareerboost.com/m如果你对本书中“如何自我营销”这一章特别感兴趣，可以到这个网站上购买全套课程，深入了解如何构建个人品牌使你自己在软件行业中占有一席之地。到目前为止，这是我的著作中最受欢迎的部分。因为你已经购买本书，所以我要给予你特别折扣——使用代码SOFTSKILLS将获得100美元的抵扣。“十步快速学习法”课程：http://simpleprogrammer.com/ss-10steps这是另外一门深入课程，探讨我在本书“学习”篇中教你的方法之细节。如果你对这一篇内容深感兴趣，想更加深入地了解该主题，关注这个课程，可以发现更多内容。“Entreprogrammers”网站：http://entreprogrammers.com如果你立志成为一名企业家，或者已经开始创业了，可以关注这个免费的每周播客，这是我和其他3位开发者/企业家（或曰：开发者企业家）联合开发的。-“Get Up and CODE”网站：http://getupandcode.com最后，如果“健身”篇令你眼前一亮的话，那你也会喜欢这个免费播客。这是我为软件开发人员和IT专业人士专门准备的。","categories":[{"name":"professional","slug":"professional","permalink":"http://muxueweiyu.github.io/categories/professional/"},{"name":"effience","slug":"professional/effience","permalink":"http://muxueweiyu.github.io/categories/professional/effience/"}],"tags":[{"name":"有趣","slug":"有趣","permalink":"http://muxueweiyu.github.io/tags/%E6%9C%89%E8%B6%A3/"}]},{"title":"C++编程思想","slug":"Program/C++/C++","date":"2021-05-02T13:18:03.000Z","updated":"2021-05-02T13:52:03.600Z","comments":true,"path":"2021/05/02/Program/C++/C++/","link":"","permalink":"http://muxueweiyu.github.io/2021/05/02/Program/C++/C++/","excerpt":"C++是一个能提高生产效率的工具。因为我们确信：通过使用新工具将会得到更大的好处。大幅度提高生产效率的惟一办法就是使用其他人的代码，即是去使用库。","text":"C++是一个能提高生产效率的工具。因为我们确信：通过使用新工具将会得到更大的好处。大幅度提高生产效率的惟一办法就是使用其他人的代码，即是去使用库。","categories":[{"name":"Program","slug":"Program","permalink":"http://muxueweiyu.github.io/categories/Program/"},{"name":"C++","slug":"Program/C","permalink":"http://muxueweiyu.github.io/categories/Program/C/"}],"tags":[{"name":"编程","slug":"编程","permalink":"http://muxueweiyu.github.io/tags/%E7%BC%96%E7%A8%8B/"}]},{"title":"Random-Thoughts","slug":"Random Thoughts/2021/2021-05","date":"2021-05-01T14:54:27.000Z","updated":"2021-05-06T14:57:36.733Z","comments":true,"path":"2021/05/01/Random Thoughts/2021/2021-05/","link":"","permalink":"http://muxueweiyu.github.io/2021/05/01/Random%20Thoughts/2021/2021-05/","excerpt":"天空对所有人敞开。它就在你身边，却代表了无比幽远的时空。仰望是多么简单的动作，却能让我们唤醒最深处的想象力，同时也让我们凝神静思。","text":"天空对所有人敞开。它就在你身边，却代表了无比幽远的时空。仰望是多么简单的动作，却能让我们唤醒最深处的想象力，同时也让我们凝神静思。 1date: 2021-05-01 纯粹、广袤、天然——这正是星空的美妙诱人之处。广阔的星空足以包容万千思绪，她可以激发灵感，也可以治愈焦虑的灵魂。在这令人心烦意乱的时代，人们比以往更需要驻足内省。我们何不融入夜晚？ 是枝裕和：我們都沒能成為想成為的大人 blog: Scott Hanselman 1date: 2021-05-02 blog: gordon ramsay John Papa rachaelray simpleprogrammer Joel Spolsky codinghorror ycombinator dotnetrocks 1date: 2021-05-03 怎么说呢，每一件事情都不是只有一个角度，不同角度，不同视角。说不上绝对的好和坏，在较高时间维度来看，一切曾以为非常非常重要的事情，都只是暂时的，没有永恒。所以顺其自然即可。 耗时近二十天总算是把一个频道的图书整理完毕了。整个过程也激发了读书的欲望起伏不定可以接受吧。 我们受高等教育的人，必须有明辨是非、静观得失、缜密思虑、不肯盲从的习惯，然后在学时方不致害己累人，出而立身处世方能不负所学。大学所施的教育，本来不是供给传授现成的智识，而重在开辟基本的途径，提示获得知识的方法，并且培养学生研究批判和反省的精神，以期学者有自动求智和不断研究的能力。 ——国立浙江大学校长竺可桢1936年4月25日 1date: 2021-05-04","categories":[{"name":"Random Thoughts","slug":"Random-Thoughts","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/"},{"name":"2021","slug":"Random-Thoughts/2021","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/2021/"}],"tags":[{"name":"Essay","slug":"Essay","permalink":"http://muxueweiyu.github.io/tags/Essay/"}]},{"title":"心流","slug":"professional/effience/心流","date":"2021-05-01T01:23:44.000Z","updated":"2021-05-02T12:28:23.029Z","comments":true,"path":"2021/05/01/professional/effience/心流/","link":"","permalink":"http://muxueweiyu.github.io/2021/05/01/professional/effience/%E5%BF%83%E6%B5%81/","excerpt":"幸福源自内心的秩序","text":"幸福源自内心的秩序 序一 自造内心秩序之途“享乐的片刻转瞬即逝。” 米哈里借鉴上述思想提出了“精神熵”。他认为，资讯对人们意识中的目标和结构的威胁，将导致内心失去秩序，就是精神熵。 米哈里这样概括心流的成因和特征。第一，注意力。他说：体验过心流的人都知道，那份深沉的快乐是严格的自律、集中注意力换来的。第二，有一个他愿意为之付出的目标。那目标是什么不要紧，只要那目标将他的注意力集中于此。第三，有即时的回馈。第四，因全神贯注于此，日常恼人的琐事被忘却和屏蔽。第五，达到了忘我的状态。 米哈里说：“近年来有很多人指出，诗人与剧作家往往是一群严重沮丧或情绪失调的人，或许他们投身写作这一行，就是因为他们的意识受精神熵干扰的程度远超一般人；写作是在情绪紊乱中塑造秩序的一种治疗法。作家体验心流的唯一方法，很可能就是创造一个可以全心投入的文字世界，把现实的烦恼从心灵中抹去。” 全神贯注某项活动，精神消耗一定更大，好在当事者心甘情愿——这似乎是常识。但米哈里告诉我们：不对。有实验证明全神贯注减轻了脑力负担。“最合理的解释似乎是：心流较强的那组人能关闭其他资讯的管道，只把注意力集中在接收闪光的刺激上。这使我们联想到，在各种情况下都能找到乐趣的人，有能力对外来刺激进行筛选，只注意与这一刻有关的事物。虽然一般认为，注意力集中时会增加处理资讯的负担，但对于懂得如何控制意识的人而言，集中注意力反而更轻松，因为他们可以把其他不相关的资讯都抛在一旁。他们的注意力同时极具弹性，与精神分裂症患者完全不由自主地注意到所有刺激恰成强烈对比。这种现象称为‘自得其乐的性格’，或许能提供神经学上的解释。” 爱因斯坦，他说：进入科学殿堂的有几种人。第一种人智力超群，来这里为了出人头地。第二种人做科学研究是享受。但是科学的殿堂之所以存在不是因为他们，而是因为第三种人，后者走进科学是出于对世俗生活的厌倦。 陈景润，他暴得大名后，荣任全国政协委员，少不了出席两会。陈委员常常逃会，且避开室友，躲到厕所中思考他的数学。 在写一篇较大作品的时候，通常是几个月，身体总是很好。相反，不做大活的时候，身体常有这样那样的不自在。 一句话，能造就心流的活动，大多还需要当事者自觉自愿，乐在其中。 可以造就心流的活动中必有挑战，且挑战应该是动态的，即当挑战与你的技能匹配时，有了心流。当挑战的目标大大高过你的技能时，将产生焦虑，此时应降低挑战目标。当你的技能高过设定的目标，继续持续这种活动将产生厌倦，便要提升目标，以求挑战和心流的持续。正是在技巧提高、目标上调的过程中，当事者感受到了成长的乐趣。此为幸福之真谛。 在传统社会中，为百姓们提供人生目标的是社会权威：国王、主教、政府。他们提供的目标有：宗教、道德、阶级习俗、爱国主义。最后到来的一个目标提供者是商人，他们宣扬的是消费。这些目标渐渐失效，不再吸引众生。 人生目标的获得不能抄袭，没有捷径。米哈里说：获得最优体验的手段，“不能浓缩成一个秘诀，也不能背诵下来重复使用……每个人必须自行从不断的尝试与错误中学习”。 米哈里问读者：什么是自得其乐？他自己的回答是：“就是‘拥有自足目标的自我’，大多数人的目标都受生理需要或社会传统的制约，亦即来自外界。自得其乐的人，主要目标都从意识评估过的体验中涌现，并以自我为依据。” 外界向你提供目标时，往往以某种奖励吸引你追随它。世上大多数奖励的动机是控制你。不做外部目标的奴隶，就要拒绝它们的奖励。拒绝外部奖励的最有效的方法是建立“内奖”，即选定你的目标，在追随目标的努力中，获得内心的秩序和成长的乐趣，这就是内奖，就是自我奖励。 我们最大的痛苦常常不是来自大自然，而是来自伙伴，甚至亲人，所以哲学家说“他人是地狱”。如果每个普通人可以彻底离开他人，这句话就不会从哲人口中说出。并且，其实你的很多快乐，甚至最大的快乐，也是来自与他人的交往。乃至，如何和他人交往，成为你的内心秩序的组成部分。 米哈里在此处妙语连珠。他说：“学习运用独处的时间在童年时期就很重要。十来岁的孩子若不能忍受孤单，成年后就没有资格担负需要郑重其事准备的工作……如果一个人不能在独处时控制注意力，就不可避免地要求助于比较简单的外在手段：诸如药物、娱乐、刺激等任何能麻痹心灵或转移注意力的东西……英国哲学家培根引用一句俗语说：‘喜欢独居的人，不是野兽就是神。’倒不一定是神，但一个人若能从独处中找到乐趣，必须有一套自己的心灵程序，不需要靠文明生活的支持——亦即不需要借助他人、工作、电视、剧场规划他的注意力，就能达到心流状态。” 一方面，独处是建立自己的内心系统的必要经历。另一方面，有了自己内心的系统，更能够适应因偶然原因陷入的孤独的处境中。葛兰西、索尔仁尼琴、曼德拉等人的经历就是证明。米哈里说：“一个能记住故事、诗词歌赋、球赛统计数字、化学方程式、数学运算、历史日期、《圣经》章节、名人格言的人，比不懂得培养这种能力的人占了更大的便宜。前者的意识不受环境产生的秩序限制，他总有办法自娱，从自己的心灵内涵中寻求意义。尽管别人都需要外来刺激——电视、阅读、谈话或药物——才能保持心灵不陷于混沌，但记忆中储存足够资讯的人却是独立自足的。” 适当的独处有利于形成“自我”。中国人“社会性”太强，打压了“自我”，使我们每每逢迎他人。缺少独处就缺少自我，而无个性的人组成的社会是缺少美感的。 米哈里的调查就是好的调查。其一，该调查发现，心流的体验，工作时（54%）大大高于休闲时（18%）。其二，面对“我现在是否宁可做别的事情”这一问题时，回答“是”，即愿意停止现在正做的事情的回答者中，工作的人大大高于休闲的人，即使工作者正处于心流的状态。这真是个值得思考的悖论。米哈里的解释是：很多人屈从于主流文化，认为工作是强制的，不去理性地比较自己工作与休闲的状态。对此我不完全同意。 调查中更多的心流出现在工作中，而不是休闲中。这符合米哈里的一贯认识。他引用弗洛伊德的话：“快乐的秘诀在于工作与爱”。 要选择一份与你自己智商相匹配的工作。不要干了十年后发现你已经穷尽了这份工作中的全部奥秘，索然无味了。中年后能否找到和重新学做一份挑战性的工作是存疑的。借棋弈做比喻，智商高的不要选择跳棋，要选择围棋，它能长久地吸引你。 “通过工作提升生活品质，需要两项辅助策略。一方面要重新设计工作，使它尽可能接近心流活动——诸如打猎、家庭式纺织、外科手术等。另一方面，还得培养像莎拉菲娜、柯拉玛、庖丁那样自得其乐的性格，加强技巧，选择可行的目标。这两项策略若单独使用，都不可能使工作乐趣增加太多，但两者双管齐下，却能产生意想不到的最优体验。”“但目前的状况却是，那些有能力改变特定工作性质的人，并不重视工作能否带来乐趣。管理者的首要考虑是生产力，工会领袖满脑子也都是安全、保险与工资。短期看来，这些前提跟产生心流的条件可能有冲突。这实在很可惜，因为如果工人真正喜爱他们的工作，不但自己受益，他们的效率也会提高，届时所有其他目标都能水到渠成。” 随着时代的进展，突破口有望呈现。那就是伴随机器人的大规模问世，人们的工作时间将越来越少，闲暇将越来越多。这样，缺乏自由、自主的问题将缓解。工人虽然未能在工作中获得更多的自由和自主，但其整体生存中自由和自主的时间大幅度增加。而米哈里的问题也将转化，获得更多心流的主战场，将从工作转向休闲。 凯恩斯在1920年就发出了伟大的预言：经济问题将在百年内终结。“人类自从出现以来，第一次遇到了他真正的、永恒的问题——当从紧迫的经济束缚中解放出来以后，应该怎样来利用他的自由？科学和复利的力量将为他赢得闲暇，而他又该如何来消磨这段光阴，生活得更明智而惬意呢？” 好在历史上的贵族阶层已经做出了尝试，积累了经验。贵族阶层脱离了生产，率先面临生命不能承受之轻的挑战。一部分贵族陷入物欲不能自拔，另一部分选择体育、音乐、诗词歌赋的艺术化生活方式。中西方在此高度一致。 一方面，米哈里认为工作而非休闲，可以造就更多的心流。但另一方面，他讨论心流的生动案例中，休闲中的活动不在少数，比如他不断说到的攀岩、舞蹈、下棋。这些狭义的游戏，正是我们下面讨论的内容。 工作可以产生心流，游戏也可以产生心流。游戏与心流的关系更好理解。这不仅因为游戏的特征——下棋、打球、唱歌显然是有趣的，还因为人类创造出游戏，目的就是调整心情，变低迷为亢奋，变涣散为专注。孔子云：“饱食终日，无所用心，难矣哉！不有博弈者乎？为之犹贤乎已。” 体育具备造就心流的最佳条件：明确的目标，即时的回馈，易学难精带来的上不封顶的挑战性。体育的最大功能是帮助人控制自己：既学习控制自己的身体——这很好理解，体操、田径、游泳、球类，都要在控制身体上下大功夫，又要学习控制自己的精神，控制自己的注意力。爱看网球的人都知道纳达尔，他的身体条件其实并不突出，爆发力不好是其致命的弱项，而爆发力几乎是一切竞技体育项目不可缺乏的。那他靠什么制胜？靠专注。他可以在四五个小时内一直集中精力。俗话说老虎也有打盹儿的时候。对手领先纳达尔时会很自然地放松一小会儿，不想一下就被逆转了。在专注上你比不过他，你做不到专注每一个回合，结果满盘皆输。 瑜伽的精髓也在于控制自己，从身体到精神。 瑜伽的目标与本书所描述的心流活动多么接近——控制内心所发生的一切。 不持续练习不会提高，持续下去主要不是靠耐心，而是靠不断发现技巧上的微妙差异，靠持续存在的关注点。 在中西方古代贵族那里，音乐和体育是并重的。孔子说：立于礼，成于乐。近代西方哲人席勒说：美育先于道德，没有美育的道德是强制性说教。这是对孔子“立于礼，成于乐”的最好注解。美育可以让一个人在其精神世界中愉快地领受一种秩序。有了这第一个秩序，才好顺利地接受第二个秩序，即道德伦理的秩序。非如此道德就是强制。而音乐是精神世界中最神秘和美妙的秩序。 米哈里说：“柏拉图就是因为警觉到这种关系的存在，所以才强调教育儿童首先就该教他们音乐；学习把精神专注于优美的节奏与和谐之中，意识的秩序才得以建立。我们的文化似乎越来越不重视儿童的音乐技能，学校预算每有删减，最先遭殃的就是音乐课程，还有美术和体育。这三种对于改善生活品质极为重要的技能，在当前的教育环境中竟被视为多余，着实令人扼腕。”他还说：“虽然学习乐器从小开始最好，但永远不会嫌太晚。有些音乐老师的专长是教导已成年，甚或上了年纪的学生，很多成功的企业家甚至年逾五十才决定学钢琴。尝试与别人合作发挥自己的技巧，最愉快的经验莫过于参加合唱团或加入业余演奏团。”他还提倡学习作曲，他说电脑中先进的软件使作曲变得更简易，普通人也可以尝试。 闲暇必须与游戏结合，复杂的游戏必须经过学习，所以学习游戏就是学习如何应对更多的闲暇。 一个人愿意投身哪一种游戏，是高度个性化的事情。当代人，特别是未来的人们的生活目标将落在游戏上面。这也再次说明，今天和未来人们的生活目标，不可能是权威或他人指派的，而是自己接触和尝试后的选择。 我们实际上面临的很可能是三种选择：空虚无聊、寻找肤浅的刺激因而不能真正摆脱空虚，对某种活动上瘾。或许瘾是帮助现代人解决这一尖端问题的归宿。如是，问题的关键就不是从一般的意义上将瘾看作病症，而是比较和区分各种可以上瘾的活动，择其善者而从之。” 序二 心流人生：一曲冰与火之歌惊艳不一定只发生在一见钟情，也可能是在蓦然回首。 就像高僧一样，修炼多年以后，哪怕不打坐，心灵也和冥想时一样专注而又平静，吃饭是吃饭禅，睡觉是睡觉禅。这就是人生找到意义后的自得之乐，用契克森米哈赖的话说，“创造意义就是把自己的行动整合成一个心流体验，由此建立心灵的秩序”。他对此的描述是： “痛下决心追求一个重要的目标，各式各样的活动都能汇集成统一的心流体验时，意识就呈现出一片祥和。知道自己要什么，并朝这个方向努力的人，感觉、思想、行动都能配合无间，内心的和谐自然涌现。生活在和谐之中的人，不论做什么、遭遇什么，都不会把精神能量浪费在怀疑、后悔、罪恶感及恐惧之上，精力永远用在有益的方面。对生命胸有成竹的人，内心的力量与宁静，就是内在一致的最高境界。方向、决心加上和谐，就能把生命转变成天衣无缝的心流体验，并赋予人生意义。达到这种境界的人再也不觉得匮乏。意识井然有序的人不需要害怕出乎意料的事，甚至也不惧怕死亡，活着的每一刻都饶富意义，大多数时候也都乐趣无穷。” 契克森米哈赖对人生意义的复杂性的论述让我茅塞顿开。他讲的是意义的内容升级：从简单的舒适，到社会价值，到个人的自主发展，到个人与社会的重新整合。我想到的是我的心灵成长。 契克森米哈赖的论述让我恍然大悟：我并不需要在这两者之中做取舍，而应该把它们整合，整合成一个更复杂的人生意义。简单的人生意义更有优势，但是复杂的人生意义更加光荣。 正如契克森米哈赖所说：“伟大的音乐、建筑、艺术、诗歌、戏剧、舞蹈、哲学、宗教，都是以和谐克服混沌的好榜样”。降熵过程有高下，美有高下，技艺有高下，心流也有高下。原本的混沌越多，整合进去的元素越复杂，这个心流就越伟大。 那些能够整合无比复杂的人生、找到人生意义，整合无比复杂的世界、形成自己的世界观，整合无比复杂经常是相对矛盾的价值观、形成自己的价值观的人，有最大的“大心流”。 我可以退回到玻璃天花板之下的温室，或者在屡经挫折后仍然痴心不改（或者彻底转为厚黑），但那样的人生观太简单——太没有美感，因为它整合的复杂事物太少，降的熵太低。那样的人生意义，就像一块冰。它也晶莹剔透，也结构稳定，但它经不起考验。在火热的浪潮来临时，它的熵值会飙升，变成水，甚至变成水蒸气，随风飘荡，分崩离析。 我希望我的人生意义能像金刚石一样，在烈火的反复淬炼中脱胎换骨，变成这个世界所知道的最硬的结构。火对于熵来说是个坏消息，因为它会使熵值升高。但是，它也带来能量。你是任由外界那纷杂的人、事扰乱你的内心，使你的心越来越烦躁，还是吸取火的能量，改变自身的结构，升级为一颗金刚冰？ 推崇心流，喜欢心流，寻找心流。但是，现实世界如此坚硬，心流的条件如此难求（以至于很多人只能从网游中获得心流体验） 这本书读两遍。第一遍是学习心流的概念、技巧，第二遍则是用心与契克森米哈赖对话，体验他的这一曲冰与火之歌：外界纷扰并不可怕，反而是我们铸成更大的心流的能量来源。 它的内容和立意远远地高过了幸福和快乐。它所推崇的人生最优体验，不是幸福、快乐这点肤浅的感受，而是奋斗、挣扎、咬牙坚持，最终，是整合之后的巅峰体验。这才是心流的真意。 序三 胜利者一无所获激情后是空虚，大战后催生反思。 在书中，海明威大写特写空虚：“有些人生活着，但是什么感觉也没有，他知道一切都是空虚、空虚、空虚。我们的空虚就在空虚之中，空虚是你的名字，空虚是你的国度；你是空虚中的空虚，就像空虚本来就出在空虚中一样。”海明威嘲讽地望着空虚的人类。这一年，海明威三十四岁。之后他并没有如同人们期望的那样，创造力下降，而是用一部又一部佳作证明了自己。十九年过后，在他五十三岁时，写出了巅峰之作《老人与海》，并在两年后荣获诺贝尔文学奖。令人惋惜的是，海明威在荣获诺奖七年后，自杀了结一生。 “近年来有很多人指出，诗人与剧作家往往是一群严重沮丧或情绪失调的人，或许他们投身写作这一行，就是因为他们的意识受精神熵干扰的程度远超一般人；写作是在情绪紊乱中塑造秩序的一种治疗法。作家体验心流的唯一方法，很可能就是创造一个可以全心投入的文字世界，把现实的烦恼从心灵中抹去。写作跟其他心流活动一样，可能会上瘾，也可能构成危险：它强迫作者投入一个有限的体验范畴，抹杀了采用其他方式处理事件的可能性。不过，如果把写作运用于控制体验，不让它控制心灵，仍是一件妙用无穷的法宝。” 日本出版人见城彻将“胜利者一无所获”作为自己的座右铭。受海明威影响，见城彻提倡硬派工作，强调以压倒性努力正面突破困境。当你全力争取胜利时，其他就不那么重要了；甚至，连胜利本身都不重要。 胜利者的奖赏就是自己的兴趣、享受与内在满足。如果没有奖励，这个时候，会发生什么？你沉浸于事物本身，这就是心流。就像契克森米哈赖在书中所言： “攀岩的神秘就在于攀登本身；你爬到岩顶时，虽然很高兴已大功告成，而实际上却盼望能继续往上攀登，永不停歇。攀岩的最终目的就是攀登，正如同写诗的目的就是为写作一样；你唯一征服的是自己的内心……写作就是诗存在的理由。攀登也一样，只为了确认自己是一股心流。心流的目的就是持续不断地流动，不是为了到达山顶或乌托邦。它不是向上的动作，而是奔流不已；向上爬只是为了让流动继续。爬山除了爬山之外，没有别的理由，它完全是一种自我的沟通。” 快乐不快乐，你我只是说着。作为“迷失一代”的代言人，海明威告诉我们：人生也是空虚。但在那虚无的人生中，会有一间干净明亮温暖的小酒馆。它来自感官之乐、思维之乐、人际之乐、工作之乐。我歌月徘徊，我舞影零乱；举杯邀明月，对影成三人。在那里，你，邀请你的影子，外加月亮，且打来二两心流，酌言尝之。 序四 契克森米哈赖的幸福课一般学者谈心流，是把心流当成一个最优工作方式。你想在工作中取得好成绩吗？追求心流。而在契克森米哈赖看来，心流其实是一种生活方式，而且是最高级的生活方式。你想幸福吗？追求心流。 心流只是一个方法，它背后更大的逻辑是，你要通过锻炼控制自己的意识，去获得真正的幸福。 在我看来，这个态度是真正的以人为本！我们做事的时候并不在乎结果能不能给自己带来多大的利益，而是专注于做这件事本身，从中获得乐趣。 从心流出发，契克森米哈赖重新定义了什么叫“乐趣”，什么叫“复杂”，什么叫“休闲”，并且最终推出什么是真正的幸福。真正的幸福，是当你全心全意投入一件事，把自己置之度外的时候，获得的副产品。你直接追求的并不是幸福，而是把自己变得更复杂——在这个变复杂的过程中，你会找到乐趣，这个状态就是幸福的。 人生要的不是最后终点的结果，而是每时每刻点点滴滴成长的过程。成长不仅仅是在校学生的事儿。成长也不是为了达到什么目的的手段。成长本身，就是我们的目的。 序五 听见喜悦的声音喜悦可以与笑闹同行，可以与成功相伴，也可以贯穿整体的人生观照。记得民初的高僧虚云禅师，三步一跪艰辛地朝拜圣山，造成咯血断肠。有一天夜里，他自忖必死无疑，就躺在旅舍的床上，任死神带走。突然，有一位茶房不小心把碗摔落在地，锵然一声，对虚云禅师来说，宛若听到宇宙之音，全身百骸一起舒放。我们可以听几百遍打破碗声而毫无感觉，因为我们生活在表层的世界：浅浅的喜悦、浅浅的心情、浅浅地工作着……浅浅地活着。 序六 快乐需要用心学习快乐是人的本能，但人们往往需要经过学习才能得到快乐。既然经过学习能得到快乐，我们为何不努力去追求呢？倘若在追求的过程中，也能体验快乐，享受幸福人生，不是一件更完美的事吗？ 就如快乐是人的本能一样，自然、放松也是人的本能。但一位音乐表演工作者，往往需要用三五年，甚至十年、二十年的时间，学习剔除外在的因素，克服紧张，使自己的表演能够放松、自然、快乐。可见学习快乐，并不是一件容易的事。 我一再强调，学音乐不等于学乐器。不论家长让小孩儿学音乐是希望他们将来能够成为音乐家，还是要使音乐成为孩子生活习惯的一部分，他们的起步都是相同的。最为重要的是，在音乐教育中，儿童学习把精神集中在优美的节奏与和谐之中，感受音乐、享受音乐，也是学习快乐的一个渠道。如果太强调技巧而不重视感受，家长的期待就会成为压力，快乐也就无处可寻了。 快乐与否取决于内心是否和谐；而追求内心和谐，唯有从掌握意识着手。学习从生活中创造乐趣，需要再三练习。 心流，快乐的源泉我们对自己的观感、从生活中得到的快乐，归根结底直接取决于心灵如何过滤与阐释日常体验。我们快乐与否，端视内心是否和谐，而与我们控制宇宙的能力毫无关系。 2300年前，亚里士多德曾说，世人不分男女，都以追求幸福为人生最高目标。现代人对幸福的理解并不见得比亚里士多德更透彻，而对于如何得到幸福，更可说是毫无建树。 我发现，幸福并非瞬间发生；它与运气或概率无关，用钱买不到，也不能仗恃权势巧取豪夺；它不受外在事物的操纵，而是取决于我们对外界事物的阐释。实际上，幸福要靠个人的修持，事先充分准备、刻意培养与维护。只有学会掌控心灵的人，才能决定自己的生活品质；具备了这种能力，也就相当于接近幸福的境界了。 幸福并不是存心去找就能找到的。哲学家密尔说：“自问是否幸福，幸福的感觉就荡然无存了。”只有在不计较好坏、全身心投入生活的每一个细节时，才会觉得幸福，直接去找反而不会奏效。奥地利心理学家维克多·弗兰克在《活出意义来》一书的序言里说得好：“不要以成功为目标——你越是对它念念不忘，就越有可能错过它。因为成功如同幸福，不是追求就能得到；它必须因缘际会……是一个人全心全意投入并把自己置之度外时，意外获得的副产品。” 那么，如何才能实现这个既无法直接追求又令人捉摸不定的目标呢？过去25年的研究使我确信，方法是有的，这条曲折蜿蜒的路径就从控制意识开始。 我们从小就以为，人生最重要的是未来。父母教孩子养成好习惯，为的是长大后对他们有益；老师向学生保证，无聊的课程日后有助于他们谋职；公司主管告诉新员工，要有耐心，努力工作，因为有朝一日会晋升为主管—然而在漫长的晋升之路尽头，退休的时刻也会同时到来。爱默生曾说：“我们对生活有种种期许，却从未真正生活过。”一个穷困的小女孩也从童话故事中学到：果酱和面包永远是明天的事，今天就是吃不到。 首先，解放意识的知识或智慧不能累积，不能浓缩成一个秘诀，也不能背诵下来重复使用。就像成熟的政治判断力或高度的审美观，它属于一种复杂的专业形式，每个人必须自行从不断的尝试与错误中学习。它跟知识一样，必须投入感情与意志才能得到。只是知道该怎么做还不够，还得实际去做才行，就像运动员或音乐家，必须再三巩固已知的理论，才能精益求精。人类把物理学或基因学的知识应用于物质世界，进步相当神速；但是当知识应用于修正我们的习惯与欲望时，就慢如牛步，令人痛苦不堪了。 其次，控制意识的知识在文化背景改变时，也必须进行相应调整。神秘主义、苏非教派（Sufi）、瑜伽行者或禅宗大师的智慧，在他们所处的时代或许是精妙绝伦的，但是若将那些体系移植到现代，就丧失了大部分原有的力量。各派哲学都有专属于所创生环境的成分，这些额外的成分若不能从基本要素中剔除，通往自由的路上就不免要长出许多莠草。形式一旦逾越内容，追寻者就只得重回起点。 控制意识，改善体验的品质一个人可以不管外界发生什么事，只靠改变意识的内涵，使自己快乐或悲伤；意识的力量也可以把无助的境况，转变为反败为胜的挑战。 意识的功能是搜集组织内外的一切资讯，加以评估后，由身体做出适当的反应。它可谓各种知觉、感觉、观念转换的中枢，并且就各种资讯排定先后次序。少了意识，我们还是可以“知道”周遭的事，但只能做直觉的反应。凭借意识，我们才能衡量事件的轻重缓急，并据此做出适当反应；甚至我们还能创造出从未有过的资讯，如做白日梦、说谎、谱写美丽的辞章或导出科学理论。 培养毅力应该从建立意识的秩序、控制感觉与思想着手，而且最好不要企图走捷径。有些人把意识看得很神秘，以为它能创造匪夷所思的奇迹。他们一相情愿地相信，在精神领域中任何事都有可能发生。还有人扬言能知晓过去与未来，与鬼神相通，并具有超能力。这样的故事纵非捏造，往往也是出于幻觉。 准许哪些资讯进入意识就显得格外重要。实际上，这就决定了生活的内涵与品质。 自我可不是普通的资讯。实际上，它包含了通过意识的一切：记忆、行动、欲望、乐趣、痛苦等。更为重要的是，这个“自我”代表我们点滴建立起来的目标的先后次序。 一个人若能充分掌控意识，尽可能创造心流体验，生活品质势必会提高；如同里柯与帕姆，即使平凡无奇地例行公事，经过他们的自我转换，也变得有方向、有乐趣。在心流中，我们是精神能量的主宰，无论做什么事都能使意识更有秩序。受访者中有一位知名的攀岩专家，对于这种使他深刻体会心流的业余爱好，他做了相当简单扼要的说明： 越来越完美的自我控制，产生一种痛快的感觉。你不断逼身体发挥所有的极限，直到全身隐隐作痛；然后你会满怀敬畏地回顾自我，回顾你所做的一切，那种佩服的感觉简直无法形容。它带给你一种狂喜，一种自我满足。只要在这种战役中战胜过自己，人生其他战场的挑战，也就变得容易多了。 其实战斗中对抗的不是自己，而是使意识失序的精神熵。我们是为保卫自我而战，这同时也是一场控制注意力的斗争，虽然它不一定像攀岩那样牵涉到体能的挑战。体验过心流的人都知道，那份深沉的快乐是严格的自律、集中注意力换来的。 自我在体验心流后会变得复杂。有趣的是，我们只有在不掺杂其他动机，只为行动而行动时，才能学会做一个比原来的自己更复杂的人。选定一个目标，投入全部的注意力，不论做什么事都会觉得乐趣无穷。一旦尝到这种快乐，我们就会加倍努力，重温它的滋味——自我就这样开始成长了。 心流的构成要素迈达斯国王点石成金，最后活活饿死的寓言，充分证明一味追求财富、地位、权力，未必能使人更快乐。唯有从每天的生活体验中创造乐趣，才能真正提升生活品质。 改善生活品质的主要策略有两种：一是使外在条件符合我们的目标；二是改变我们体验外在条件的方式，使它与我们的目标相契合。 财富、地位、权力是现代文明最重视的幸福象征。我们总以为，有钱、有名、俊俏美丽的人一定过得很充实，尽管各方面证据可能显示，他们生活得并不惬意。但我们依然坚信，只要能拥有跟他们同样的象征特质，就会更幸福。 如果当真得到了更多的财富与权力，至少一时之间，我们会产生人生就此改头换面的信心。但象征是会骗人的——它往往会歪曲人们以为它应该代表的现实。其实别人对我们的看法或我们所拥有的一切，跟生活品质并没有直接关系——真正重要的是我们对自我和所遭遇的事情做何种阐释。改善生活，唯有从改善体验的品质着手。 享乐是高水准生活的重要一环，但享乐本身并不能带来幸福。睡眠、休息、食物与性，都属于恢复“均衡”的体验，在肉体需求引起精神熵以后，重整意识的秩序。它们并不能带动心灵的成长，也不能增加自我的复杂性。换言之，享乐虽有助于维持意识的秩序，却无法在意识中创造新秩序。 享乐转瞬即逝，乐趣回味无穷 一般人想进一步充实自己的生活时，不但会想到享乐，还会想到虽然与享乐重叠，但必须用不同字眼表达的另一种感受——乐趣。所谓乐趣，是指一个人不仅需求和欲望得到满足，更超越既有制约，完成了一些意料之外的事。 乐趣的出现主要有八项元素。一般人回想最积极的体验时，至少都会提及这些元素中的一项，或是全部。首先，这种体验出现在我们面临一份可完成的工作时。其次，我们必须能够全神贯注于这件事情。第三和第四，这项任务有明确的目标和即时的反馈。第五，我们能深入而毫不牵强地投入到行动之中，日常生活的忧虑和沮丧都因此一扫而空。第六，充满乐趣的体验使人觉得能自由控制自己的行动。第七，进入“忘我”状态，但心流体验告一段落后，自我感觉又会变得强烈。第八，时间感会改变——几小时犹如几分钟，几分钟也可能变得像几小时那么漫长。这些元素结合成一种深刻的愉悦感，带来无比的报偿，并扩展成极大的能量，仅是感觉它的存在就已值回“票价”了。 心流体验虽然表面上看来不费吹灰之力，实际上却远非如此。它往往需要消耗大量体能，或经过严格的心灵训练；需要高超的技巧，而且只要注意力一放松，就可能消失得无影无踪。在心流之中，意识运作顺畅，每个动作都衔接得天衣无缝。在日常生活中，我们经常被怀疑或疑问打断：“我为什么这么做？我是否该做这件事？”我们一再追问行动的必要性，并批判它们背后的理由。然而在心流中没有反省的空间，所有行动宛如一股魔力，带着我们勇往直前。 自成目标的体验也就是心流，它能把生命历程提升到不同的层次。疏离变成了介入；乐趣取代了无聊；无力感也变成了控制感；精神能量会投注于加强自我，不再浪费于外在目标上。体验若能自动自发地产生报酬，现在的生命当然有意义，不需要再受制于将来可能出现的报偿。 如何在日常生活中寻找心流？索尔仁尼琴自得其乐的性格，让身陷囹圄的不堪也能转变为心流体验。他说：“有的犯人会设法冲破铁丝网逃脱！对我而言，铁丝网根本不存在，犯人总数并没有减少，但我已飞到远方去了。” 就因为这种充满动力的特性，使心流成为成长与发现的源泉。我们不可能长期做同种层次的事依然觉得乐趣无穷。我们不是因此感到厌烦，就是饱受挫折，然后寻求乐趣的意愿就会促使我们拓展自己的技巧，或发掘运用技巧的新方向。 我们这个时代最讽刺的一个矛盾就是，大量的闲暇并不能转换为乐趣。跟只不过数代以前的人相比较，我们享受人生的机会大多了，但事实上我们一点儿也不比老祖宗生活得更快乐。光是机会还不够，我们更需要善用机会的技巧。我们必须知道如何控制意识，但大多数人都不懂得如何培养这种技巧。置身于五花八门的休闲设施中，大多数人仍然觉得生活很无聊，甚至还有一种说不出的挫败感。 这个事实向我们揭示了最优体验的第二个条件：一个人重组意识达到心流的能力。有些人不论到哪里，都能自得其乐；有些人即使美景当前，仍感到枯燥乏味。因此，除了外在条件（亦即心流活动本身的构造），我们也应该把促成心流的内在状况列入考虑之内。 一个人若是对外界失去了兴趣，不愿主动跟外界建立关系，就等于把自己孤立了。20世纪最伟大的哲学家罗素在讲述他觅得个人幸福的过程时说：“我渐渐学会对自己和自己的缺点漠不关心，我渐渐把越来越多的注意力放在外界事物上，例如，世界的状况、各式各样的知识和我喜欢的人。”这可能是如何培养自得其乐性格的最好的描述。这样的性格，部分应归功于遗传和童年的教育。有些人天生善于集中精神，比较有弹性，或幸运地靠父母训练成不过分自觉的个性；但这种能力也可以自己培养，经由不断练习和约束，臻至炉火纯青的地步。接下来，我们就要探讨该怎么做及如何做得更好。 感官之乐一走进舞池，我就觉得像漂浮了起来；好像喝醉的感觉，当舞到尽兴，我浑身发热、欣喜若狂，仿佛借着身体语言与他人沟通。 如何维持爱情的新鲜感？答案跟其他活动一样。双方关系要乐趣盎然，复杂性一定得提高；而要增加复杂性，双方就得不断在自己和对方身上寻求新的潜能。要达到这个目标，他们就必须在彼此身上投注更多的注意力，了解伴侣的思想、感觉与梦想。这是一种持续的努力，是一辈子的事情。当一个人真正开始了解另一个人时，他们就能一块儿展开各种冒险：一块儿旅行、阅读同样的书、抚养子女、拟订各种计划并付诸实现，这些事会越来越有趣，越来越有意义。细节并不重要，因为适用于每个人特殊处境的条件不尽相同。重要的是大原则：性跟人生的其他层面一样，只要我们愿意下功夫去控制它，增强它的复杂性，它就会变得更有乐趣。 思维之乐牛顿把手表放进沸水里，手上却捏着鸡蛋计算时间，因为他已沉浸在抽象的思考当中。迈克尔逊是第一位赢得诺贝尔奖的美国科学家，有人问他何以花那么多时间测量光速，他答道：“因为太好玩了！” 人生的美好事物不一定都通过感官感知，有些最快乐的体验发生在心里，由挑战我们思考能力的资讯所引起。400年前，培根就说过，好奇心（所有知识的种子）乃是愉悦的最纯粹形式的反映。不仅身体的每一种潜能都可以构成心流活动，心智的每一运作也都能产生独特的心流。 在知性的追求中，阅读可谓是最常被提及的心流活动。解决心头疑惑既是一种追求乐趣的最古老的方式，也是哲学与现代科学的先驱。有些人读乐谱的技巧娴熟，甚至不需要听演奏就能领略到一首作品的乐趣，他们认为读一首交响乐的乐谱比聆听演奏更好；想象的音符在脑海中跃动，比实际演奏更接近完美。同样，花大量时间研究艺术的人，渐渐能从感情、历史、文化的层次欣赏作品，竟超越了纯粹的视觉美感。有位专业艺术工作者说：“感动我的作品背后有大量观念、政治及知性方面的信息……视觉的呈现只不过是招牌而已。它不仅是视觉元素的重组，而且是艺术家利用视觉法则，结合眼睛与认知力，创造出来的崭新的思想机器。” 我们很少注意到自己对心灵的控制力竟是那么薄弱，因为习惯已奠定了精神能量的轨迹，仿佛思想会自动衔接，毫无漏洞。一夜安睡，早晨闹钟一响，意识就恢复清醒，接着就到浴室去刷牙。文化分派给我们的社会角色负责塑造我们的心灵，我们通常也任由这套既定规则操纵，直到晚间又该就寝，失去意识为止。但在独处、无须集中注意力时，心灵没有秩序的原貌就会显现。它无所事事，如脱缰野马，往往停留在令人痛苦或困扰的思绪上。除非一个人知道如何整顿自己的思想，否则注意力一定会被当时最棘手的事件所吸引：它会集中于某种真实或想象的痛苦，最近的不快或长期的挫折中。精神熵是意识的常态——一种既没有任何作用，也不能带来乐趣的状态。 人类自有历史以来，记忆力一直被视为最珍贵的心灵天赋。 一个人倘若没什么值得记忆的事，人生就会变得贫乏。20世纪初的教育改革家就完全忽略了这回事，他们研究证明，“机械性的背诵”不是储存与搜集资讯的有效方法。在他们的努力争取下，背诵式学习被排除在学校之外。如果记忆只是为了解决实际问题，这一派教育改革家的论证或许很正确；但如果我们把控制意识看得跟完成工作同样重要，那么把复杂的资讯模式牢记在心中，绝不能说是一种浪费。稳定的内涵能使心灵更丰富。所谓创造力与记诵式学习不兼容，其实是一项错误的假设。多位最具创意的科学家，都以能记忆大量音乐、诗歌及历史资讯而著称。 一个能记住故事、诗词歌赋、球赛统计数字、化学方程式、数学运算、历史日期、《圣经》章节、名人格言的人，比不懂得培养这种能力的人占了更大的便宜。前者的意识不受环境产生的秩序限制，他总有办法自娱，从自己的心灵内涵中寻求意义。尽管别人都需要外来刺激——电视、阅读、谈话或药物——才能保持心灵不陷于混沌，但记忆中储存足够资讯的人却是独立自足的。除此之外，一般人也喜欢跟这种人做伴，因为他们会与人分享心灵的资讯，帮助互动的对象，建立意识的秩序。 如何使记忆更有价值？最自然的做法，就是从选择自己真正感兴趣的题材入手——诗歌、烹饪、棒球等，然后开始注意与这个题材相关的重要素材。只要充分掌握题材，一项资讯值不值得记忆就显而易见了。在此应该认清一件事，你不需要吸收一连串事实，也不会有什么必须记忆的事项的清单。只要你决定自己想记住某个资讯，它就会接受你的控制，记忆学习的过程就成为一项愉快的工作，不再是外来的要求。一个美国南北战争迷不需要人要求，就能把大小战役的日期背得滚瓜烂熟；如果他对炮战特别感兴趣，他大可只注意炮兵发挥重要作用的战役。有些人随身携带抄有诗句或名言的小纸条，每逢厌倦或情绪欠佳时就取出来欣赏。心爱的故事或诗词随手可得，能为人带来踏实的自信。若把它直接储存在记忆里，这种拥有的感觉，或更恰当地说，与记忆的事物密切相连的感觉会变得更强烈。 构成核分裂理论基础的科学，跟战争几乎毫无关系，它是太平时期知识积累的结果 但愿大家都不需借助象征技巧，就能撑过集中营或极地困厄的折磨。心灵若能自成一套规则，对正常生活也大有好处。缺少内化的象征体系的人，很容易被媒体宰割。他们容易被宣传家操纵，被演艺人员安抚，被推销员蒙骗。我们会依赖电视、药物或政治、宗教的救赎，主要是因为我们自身没什么可以仗恃的东西，内心无力抗拒那些自称握有解答者的谎言。不能为自己提供资讯的心灵，只能在混乱中随波逐流。 谈话最主要的功能不是办妥一些事情，而是改善体验的品质。 如果书写的唯一目标就是传递资讯，那么它就已注定了被时间淘汰的命运；但书写的主要功能乃是创造资讯，传递反倒在其次。过去，有学问的人用日记和私人信件把感受诉诸文字，给自己一个反省一天生活的机会。维多利亚时代的人有大量内容翔实的书信作品，可视为从纷乱的事务中厘清秩序的范例。我们写在日记或信件中的材料，在写下来以前都不存在。若非通过书写时思想缓慢而有机的成长过程，观念根本不可能出现。 为写作而写作，不能说是浪费时间，最重要的是，它提供给心灵一种表达途径，让一个人用方便记忆的方式，记录事件与感受，以便在日后重温。它也是一种分析与了解体验的方法，一种建立体验秩序的自我沟通。 先进的研究设备与庞大的研究队伍的重要性都被过度夸大，科学突破仍依赖个人心灵的才智。 天文学家哥白尼在波兰的劳恩堡教堂任牧师时，完成了星球运动理论。天文学对他的神职事业毫无帮助，他大半生获得的主要报酬是美学上的；他提出的模式有简单之美，远超过托勒密那套烦琐复杂的旧模式。伽利略原本学医，投身越来越危险的实验，无非是因为诸如固体重心位置的推算使他觉得乐在其中。牛顿在取得学士学位后不久，就完成了他的主要发现，因为1665年他自剑桥大学毕业时，正值瘟疫盛行，学校被迫关闭，牛顿下乡暂避，过了两年无聊的生活，只好专心研究万有引力的理论打发时间。 拉瓦锡被公认为“现代化学之父”。法国大革命前，他在税务机关工作，参与农业改革和社会计划，但那些已成为化学经典的巧妙实验才是他的最爱。伽伐尼从肌肉与神经如何导电的基本实验中悟出电池的原理，他一辈子行医，至死方已。孟德尔从事神职，他为遗传学奠定基础的实验，其实是源于对园艺的爱好。迈克尔逊是第一位获得诺贝尔奖的美国科学家，在他去世前不久，有人问他为什么花那么多时间测量光速，他答道：“因为太好玩了。”还有，我们别忘了，爱因斯坦最重要的论文是他在瑞士专利局当小职员时完成的。以上不过是从众多伟大的科学家当中信手拈来的几个例子，他们并不因为自己不是专业人才，没有大量经费撑腰，就让思路受阻，他们只是做自己喜欢做的事情罢了。 今天的情况真的大不相同了吗？一个没有博士学位、不在大的研究中心工作的人，真的就没有机会促成科学的进步了吗？或许这不过是所有成功机构都有意无意助长的神话，这些问题很难回答，一部分也因为科学的定义把持在那些从垄断中得到最大利益的机构手中。 不必把爱好看得太严重。其实从事科学研究的最好理由，就是因为它能为研究者建立心灵的秩序。如果用心流而不用成功、名望来评估科学的价值，它对生活品质的贡献之大，可说超乎我们的想象。 谈到我们对体验价值态度的改变，没有比这两个词经历的变迁更清楚的例证了。业余诗人或业余科学爱好者一度很受人尊重，因为从事这样的活动可以改善生活的品质。但行为的重要性日渐超乎主观感受；一般重视的是成功、成就和表现的水准，体验品质则不在考虑之列。结果就变成：尽管爱好者的收获才是最重要的，但大家还是觉得，从行动中享受乐趣是个见不得人的头衔。 很多人一离开校门就不再学习，因为一二十年受外界强迫的学生生涯留下了许多不愉快的回忆。他们长期受老师和教科书操纵，毕业的那天就是他们的自由之日。 但放弃运用象征技巧的人永远不可能获得真正的自由。他的思考会受邻居、报纸社论、电视节目所左右，他会被专家学者牵着鼻子走。在理想状况下，强迫教育的结束应该就是自动自发追求更高教育的开始。这时，学习的目标不再是分数、文凭或找份好工作，而是了解周遭的事物，从个人经验中发掘意义，建构价值观，思考者会从这里面找到深邃的乐趣。正如柏拉图在《斐里布篇》中提及苏格拉底一个门徒的经验： 初次畅饮这泉水的青年，快乐得好像发现了智慧的宝藏，欣喜若狂。他会任选一个论证，把所有的观念凑拢，综合在一起，然后又把它们一一拆开，分析解剖。他会诘问自己，然后又去诘问别人，他身旁的人不分老少都被他诘问不休，连他的父母也不能幸免，凡是肯听他说话的人他都不放过…… 这段话写于2400年前，但直到今天，对于一个初尝心灵心流之美的人的兴奋反应，我们还是找不到比这更生动、更贴切的描述。 工作之乐工作不是“亚当的诅咒”。卡莱尔说：“找到性情相契工作的人有福了，这是人生在世所能祈求的最大福佑。” 卡莱尔说：“找到性情相契工作的人有福了，这是人生在世所能祈求的最大福佑。”说得真是一点儿不错。弗洛伊德则把这句至理名言稍作修正，别人向他索讨快乐的秘诀，他给的答案简单而明白：“工作与爱。”确实，一个人能在工作与人际交往中找到心流，就已踏上改善生活品质的正途了。本章要谈的是工作如何产生心流，下一章再介绍弗洛伊德主张的另一个主题——从与人相处中找到乐趣。 “我很自由，我的工作很自由，因为我做的都是我想做的事。今天不想做，可以明天再做。我没有上司，我就是我自己生命的老板，我保持了我的自由，我也一直为我的自由而奋斗。” 如果我们认为把精神集中于一份工作违反了自己的意愿，就会觉得浪费了精神能量。工作无法帮助我们实现目标，充其量只能实现别人的目标；投注在这样的工作上的时间，是从我们一生应有的时间中压榨出来的。很多人常把工作视为不得不做的事，一项外界强加的负担，一种生命的债务。因此，尽管工作体验偶尔是积极的，但他们仍觉得这没什么了不起，因为这对他们的长期目标并没有什么贡献。 除非一个人能自行控制工作与闲暇，否则注定会感到失望。大多数的工作与休闲活动——尤其是消极接受大众传媒的方式，都不是为使人变得更快乐、更强有力而设计的，它们只是某些人赚钱的工具。一方面，如果我们听任它们得逞，它们就会吸干我们的生命精髓，只剩下一副空壳。另一方面，工作与闲暇正如同人生，可以应我们的需求发挥作用。学会从工作中发掘乐趣，不浪费闲暇的人，会觉得人生越发有价值。布莱特比尔写道：“未来不仅属于受过教育的人，更属于那些懂得善用闲暇的人。” 人际之乐独乐、众乐各有情趣，不论在沉寂的阿拉斯加边陲，还是喧嚣的纽约市中心，若能享受独处时分，同时与朋友、家人、社群和乐融融，便已踏上快乐的康庄大道。 心流研究一再证实，生活的品质主要由两大因素决定：我们如何体验工作以及我们与他人的互动关系。要知道我们究竟是个什么样的人，最详尽的资讯来自我们交往的人，以及我们完成工作的方式。一个人的自我就由这两者界定，正如弗洛伊德为幸福所开的处方：“爱与工作。”本章所要谈的是我们与家人、朋友的关系，并探讨人际关系如何才能成为乐趣的源泉。 有没有人做伴，对体验品质的影响甚大。我们与生俱来会把别人视为世界上最重要的客体，而他们有能力使生活变得有趣、充实或悲惨，因此我们如何处理与他们的交往关系，对幸福有举足轻重的影响。如果能学会把人际关系塑造得更贴近心流体验，生活的品质就能提升。 另一方面，我们也重视隐私，经常希望能不被人打扰。问题往往是，真正独自一人时，我们又开始觉得沮丧。孤独的人容易觉得寂寞，没有挑战，无所事事。有些人甚至因孤独而丧失某些感官能力，或罹患轻微的失调症。一个人若不能忍受孤独，甚至从中发现乐趣，就很难完成需要全神贯注的任务。因此，我们有必要学习在没有外援时，仍能控制自己的意识。 “独处的人”——一个不能向别人学习的人。 人际关系的调适性很强，运用适当的技巧就能改变它的规则。 唯有了解孤独对心灵产生的影响，我们才能更清楚地知道，为什么友伴是幸福不可或缺的要素。一般成年人约有1/3清醒的时间是单独度过的，但我们对于占据人生这么多时间的独处，除了不喜欢，所知却极为有限。 独处的体验为何如此受到否定？最根本的答案是：内在维持心灵的秩序十分困难。我们往往需要外在的目标、外来的刺激、外来的回馈，帮助我们控制注意力的方向。如果缺乏外来的力量，注意力就开始游荡，思路也变得混乱——也就是第二章谈到的“精神熵”的状态。 无所事事的时候，心灵就无法遏制消极念头的来袭。除非学会控制意识，否则成年人也会被类似的情况困扰。有关感情、健康、投资、家人及工作的烦恼，总在注意力周遭徘徊，一有机会就乘虚而入。心灵一准备要放松，虎视眈眈的难题就“咻”的一声扑上前来。 对控制体验品质能力最大的考验就是，一个人在独处而没有外来需求帮助他组织注意力时，采取什么对策。工作、跟朋友相聚、欣赏戏剧或演奏时很容易专心，但当一切都只能依靠自己时怎么办？独自一人，灵魂的黑夜渐次降临，我们是否疯狂地企图转移自己的注意力？或者我们能找到不但充满乐趣，还能帮助自我成长的活动？ 以需要注意力、能改进技巧，并且带动自我发展的活动填满闲暇，跟看电视消磨时间或服用药物寻求创造力截然不同。虽然后两种策略也不失为抵抗混沌、防御形而上焦虑的出路，但它们只能保护心神于不乱，不像第一种还能启发自我的成长。一个人若永远不觉厌倦，不需要靠有利的环境替他制造乐趣，就已通过了创意人生的考验。 我们的文化对资讯科技的依赖越来越深。在这样的环境中生存，必须熟悉抽象的象征语言。几代以前，一个不能读、不能写的人，还是能找得到收入不错又体面的工作。农夫、铁匠、小商人都可以借着向老师傅拜师学艺，习得一门手艺，并不需要接触象征的系统。但今天即使最简单的工作也得靠文字的指示，较复杂的工作更需要专门的知识，而且唯有靠自己摸索。 未曾学习过控制意识的青少年，很可能会长成不学无术的成年人，他们缺乏在资讯充斥的竞争环境里求生所必需的复杂技巧。更糟糕的是，他们不知道如何享受生活的乐趣；他们更没有养成寻求挑战、激发成长潜能的习惯。 如果一个人不能在独处时控制注意力，就不可避免地要求助于比较简单的外在手段：诸如药物、娱乐、刺激等任何能麻痹心灵或转移注意力的东西。 这是一种退化的反应，并不能带你前进。在成长的同时享受人生，就是从人生必然 在成长的同时享受人生，就是从人生必然会出现的精神熵现象中，创造更高的秩序形式。换言之，不要把新挑战看成需要压抑或逃避的东西，而是一个学习和改善技巧的机会。肉体的精力随年龄渐长而衰退，这代表我们应该把精力从操控外在世界的野心，转向对内心的真相做更深入的探讨；这也代表我们终于有时间读普鲁斯特的小说、学下棋、种兰花、帮助邻居——如果我们觉得这些事情值得追求的话。除非早已养成善用独处光阴的习惯，否则这些事情都是非常困难的。 这种习惯越早养成越好，而且永远不嫌太早。前几章已经谈到若干运用肉体与心灵创造心流的方法，如果一个人能随心所欲地进入心流，不受外在条件限制，就已掌握了改变生活品质的钥匙。 任何环境下都有掌握心流活动的机会。只有少数人需要住在旷野里，或者单独出海远航，大多数人都觉得置身于喧嚣忙碌的人际关系中，很有安全感。但不论在纽约市中心，还是在阿拉斯加的边陲，都会有孤独的问题，除非学会从中找到乐趣，否则你就得花大半辈子的时间逃避它的阴影。 现在常见的家庭瓦解，其实是维持婚姻状态的外在因素逐渐消失的结果。妇女就业机会增加、省时省力的家电用品普及，对离婚率的影响远比爱心和道德衰微更大。 古罗马雄辩家西塞罗曾说，要得到完全的自由，必须先臣服在一套法律之下。换言之，接受限制就能得到解放。例如，决定把精神能量全部投注在一夫一妻制的婚姻之中，不论发生什么问题、障碍，或有更好的人选出现，都不会变心，就不会再有追求最大感情回馈的压力。既然已决定信守旧式婚约的承诺，而且不受传统所迫，完全发乎本心，当事人就不必担心自己是否做了正确的抉择，别人的配偶是否比自己的更好，结果就省下不少精力应付生活需要，不必再花无谓的力气，思索该过什么样的日子。 家庭要能提供心流，必须先有存在的目标。光有外在的理由还不够，“人家都结婚了”、“该生孩子了”、“两个人吃饭也不过多一双筷子”的想法或许是成家的诱因，也可能足以使一个人把结婚的念头付诸实施，但它们并不能使家庭生活变得有乐趣。要先有积极的目标，才能使父母子女集中精神能量，携手努力。 家庭活动正如其他心流活动一样，也要提供清楚的回馈。在此指的是保持沟通渠道畅通，就这么简单。丈夫若不知道妻子为什么烦恼，或妻子对丈夫的心事一无所悉，双方就没有机会化解可能发生的紧张情势。我特别要强调，精神熵是团体生活基本的状况，除非人际关系中每一个人都投入精神能量，否则因为每个人的目标都多少跟别人有点儿不同，冲突一定会发生的。没有良好的沟通渠道，误会就会加深，直到关系因而破裂为止。 复杂的关系早晚会面临一个重要的问题：双方是否准备许下终身的承诺？这一刻会有新的挑战涌现——共同组织、经营一个家，在孩子成年后参与更广泛的社会事务，共同工作。当然，这些事都需要付出大量精力和时间，但体验品质上的收获也往往远超过付出的代价。 我们这个时代最根本的一个错觉就是，以为家庭生活可以自给自足，处理家庭生活最好的策略就是听任其自由发展。男人尤其喜欢用这个念头自我安慰。他们知道工作要有成就是多么困难，要为事业付出多少努力。回到家，他们只想松口气，而且觉得家人无权再向他们提出重大的要求，他们同时迷信家庭的完整。只有当一切都已太迟——妻子开始酗酒，孩子变成冷漠的陌生人——很多男人才醒悟，原来家庭跟“合资企业”一样，必须不断投注精神能量，才能保障它的生存。 “业精于勤，荒于嬉。”小喇叭手要吹奏得好，绝不能荒废时日不练习；运动员若不定期锻炼，体能就会退步，再也不能享受跑步的乐趣；所有经理人都知道，只要他一分心，公司就会出问题。这些例子都说明，不集中注意力，复杂的活动就会陷入混沌。家庭又怎么可能幸免？家庭成员之间的完全信赖、无条件接纳，只有在毫不吝惜投入注意力时才有意义，否则它不过是空洞的姿态与做作罢了。 培根写道：“最可怕的孤独就是没有真诚的友谊。”跟家庭关系比起来，从友谊中找到乐趣要容易许多。我们可以根据共同的兴趣或人生目标选择朋友。朋友绝少会试图改变我们的自我，只会帮我们加强自我。家庭中有很多烦人却不得不接受的事，诸如倒垃圾、打扫卫生等，但是跟朋友在一起，我们只需要把注意力集中在好玩的事情上就够了。 最强烈的体验也是在亲密友谊之中产生的。亚里士多德曾说：“纵使拥有世上所有的宝物，如果没有友谊，也没有人能活得下去。”指的就是这样的关系。从一对一的友谊中得到乐趣，需要心流活动的全部条件。不但要有共同的目标、相互的回馈（这些在一般酒吧或鸡尾酒会上的互动也能提供），更需要从共处中发掘新的挑战。这也许只是一天比一天更了解朋友，发现他与众不同的地方，同时也渐渐崭露自己的独特之处。跟另一个人分享自己的秘密和思想，可谓是人间至乐。这些条件虽然乍看很普通，事实上却需要大量的注意力、开放的态度和敏锐的感觉。现实生活中，在友谊上投注这么多精神能量的实例却少得可怜，因为很少有人愿意付出这么多精力和时间。 他们最好的朋友就是自己的配偶。 我们必须先接受友谊在表达上的挑战，才能享受到它的乐趣。如果一个人交了一大堆只会肯定他的朋友，也从不追究他的梦想与欲望，从不强迫他尝试新的生活方式，他就错失了友谊真正能提供的成长机会。真正的朋友偶尔会陪我们疯狂一下，但他们不会期望我们一味任性到底；他们能与我们分享实现自我的目标，也愿意分担提升复杂性的风险。 遗憾的是，现代人的友谊很少能维系到成年以后。我们的职业流动性太大，太过专业化和狭隘，无法培养长期的人际关系。能维持一个完整的家庭就算是运气不错，朋友圈子就更不用提了。听成功的成年人（尤其是男人——大公司的经理、杰出的律师、医生等）谈到他们的生活变得如何如何孤独时，总令人不免感到意外。他们含着眼泪追忆初中、高中或大学时代的好朋友，但这些朋友都已成过去，即使现在还见得到面，大家的共同点已很少，往往就只剩甜蜜与苦涩交杂的回忆。 很多人以为朋友跟家庭关系一样都是自然发生的，如果这些关系失败，除了自怜就没有别的法子可想。青少年总有一大堆兴趣跟别人分享，可以挥霍在朋友身上的时间又那么多，交朋友看来真的完全发乎自然。但人生到了后期，友谊就很少出于偶然：它跟工作或家庭一样，必须努力培养。 个人意识必须先改变，社会改革才会产生。一个年轻人问历史学家卡莱尔，他将如何改变这世界，卡莱尔答道：“改变你自己，这样世上就少了一个恶棍。”他的忠告至今仍然适用。企图改善所有人的生活，却不先学习控制自己生活的人，到头来往往把世界搞得更糟。 挫折中如何自得其乐？人生的悲剧在所难免，但遭受打击未必与幸福绝缘。人在压力下的反应，决定他们能否转祸为福，或只是徒然受苦受难。 瘫痪使我重生，所有我过去做的事都必须从头开始学习。我必须学习自己穿衣服，好好用自己的头脑；必须成为环境的一部分，利用它，却不试图控制它……这需要专注、意志力、耐心。说到未来，我希望能不断进步，打破残障的限制……每个人都需要一个目标。在半身不遂以后，在这些方面进步就成为我的人生目标。 追寻生命的意义若能赋予人生意义，就能使生命丰富璀璨，人生至此，夫复何求？是否苗条、富裕、掌权，都已无关紧要了，此时澎湃的欲念止歇，连最单调的体验也变得兴味盎然。 我们今天面临多样的抉择，个人的自由因而大为扩张，这是100年前无法想象的。但吸引人的选择机会一多，不可避免地会带来方向摇摆不定的结果；方向不定，决心当然会受到影响；决心不足，选择也就随之贬值了。由此可见，自由不见得有助于创造生命的意义——事实上还正好相反。游戏规则弹性太大，注意力就会减退，导致更不容易进入心流状态。投入一个目标和它的相关规则，在选择比较少而明确时，比较容易做决定。 推荐序 自得其乐的奥秘一个人只有做与自己能力匹配的工作才会投入其中。如果不是为生计所迫，外在的报酬是次要的。每个人或早或迟大概都会意识到这一点，契克森米哈赖则将它发展成了一套理论。 孔夫子教导我们：“志于道，据于德，依于仁，游于艺。”前三点关乎道德教化，最后一条则提倡在技艺练习中自得其乐。技艺分为两种，用于生产就是工作，用于休闲就是游戏。有些人在工作中就会感到满心欢喜，可以把工作当成游戏。他们一般从事高度个人化的职业，包括艺术家、科学家和企业家。这些职业可以让人自由设定工作目标和任务难度，将工作融入生活，因此很少导致马克思所谓的异化感。契克森米哈赖曾多次访问各行各业的顶尖人才，他最常听到的感受就是：“你可以说，我一生每分每秒都在工作；也可以反过来说，我从未工作过一天。” 与兰德的集邮爱好相似，我的休闲活动之一是收集电子书。目前我的电子图书馆共有两万册藏书，占用了190GB（千兆字节）的硬盘空间。用电脑整理这些书籍花费了我不少时间和精力，可将它们分门别类本身就带给我极大乐趣。我的相当一部分研究工作也属于分类和归纳，整理电子书就相当于兰德说的“另一条轨道”。每当我想到人类文明的结晶以书籍的形式存放于我的电脑中，像一支完成整编的军队随时待命，就会产生一种妙不可言的奇幻感受。可见，如果一个人热爱工作，他的爱好也应当与工作的性质类似，这样他最有可能从两者中获得心流体验。 “具有自得其乐性格的人，不太需要物质财富、娱乐、舒适、权力或名望，因为他所做的事情本身就已经是一种回馈。由于这种人不论在工作、家庭生活、人际互动、饮食甚至是独处时，都能感受到心流，因此不太会依赖外在的报酬行事，过着沉闷枯燥、了无意义的公式化生活。他们不受外来事物的威逼利诱，显得较自动自发、独立自主，因为全心投入生活，他们对身旁诸事也多多参与。” 生存，就是在行动、感觉及思考过程中体验一切。年复一年，体验的内涵决定我们生活的品质。日常生活包括工作、维持健康和生存以及休闲三大类活动，如何在其中分配或投资时间，则成为个人最重要的决定。 第一章 心流，生命的高潮所谓“心流”，就是许多人形容自己表现最杰出时那种水到渠成、不费吹灰之力的感觉，也就是运动家所谓的“巅峰状态”、艺术家及音乐家所说的“灵思泉涌”。 第二章 不同的活动，相异的感受改变生活品质的第一步是：注意每天所做之事，并体验在不同活动、场合、时段的感受。 人的生活体验并无定律可循，找出最适合自己的才是第一要务。 第三章 工作的悖论当人处于高挑战、高技巧的状态下，且自觉十分专心、深富创造力、相当满意之时，多半是在工作当中，而非闲暇时段。 第四章 休闲的利弊休闲并不比工作更令人快乐，拥有自由时间也不见得能提升生活品质，除非当事人知道如何有效利用空闲时间，但这份能力绝不是与生俱来的。 倘若某人的工作确实无可救药，另一个解决方法就是让空闲时间变成真正的心流时刻，借以开发自我及环境的潜力。幸运的是，这个世界绝对充满值得人去做的趣事，唯有缺乏想象力或精力才会构成问题。若两者皆不匮乏，人人皆可成为诗人、音乐家、发明家、探险家、学者、科学家、艺术家或收藏家。 第五章 人际关系与生活品质友谊不仅可提供及时的情绪回馈，也是个人潜能开发的大好机会。但是，现代生活并不利于友谊的维系。 完美的家庭体系十分复杂，一方面要鼓励个性发展，另一方面又要成为有情有义的群体。规矩与纪律的必要性是为了避免在协商上浪费过多的精力，例如子女该何时回家、何时做功课、谁该洗碗等问题。如此一来，由争吵或争辩所节省下来的力气，便可转投至个人目标的追求。同时，每位成员也知道，必要时可拥有家庭集体力量为后盾。一般而言，生长于大家庭的子女，较有机会发展技能、面对挑战，也较能体验到生活中的心流。 然而，不论你喜不喜欢，现代人多少总得学会独处。当身旁有人时，不论是解数学题、练钢琴、设计电脑程序还是思考人生目的，都会十分困难，因为总会有不相干的话语打断你的思绪，总要因为注意他人而无法专心一致。因此，我们发现，很多时刻离不开朋友的青少年——通常也是缺乏家人精神支柱的一群——比较难拥有学习复杂事物所需的精力。就算资质聪颖，若不敢面对孤寂、独处，能力自然也无从发挥。 物理学家约翰·A·惠勒的几句话充分说明了这一点： 如果不和别人互相讨论，就会被剔除在外。我总认为，离群的人永远只能当无名小卒。 科学家戴森也说过自己工作上出现的两种相对情况： 科学是一种十分集体化的事情，基本上只有关门与开门的差别。当我们进行科学工作时，我的门是敞开的……你总是希望与别人交谈……唯有借由人际互动，才能做出一些有意思的东西。基本上，这是一个群体的事业。新鲜事随时在发生，你必须跟得上脚步，对各种动态有所了解，你必须不断与人交谈。 然而，写作却是另一回事，当我要动笔时，门就得关上。就算如此，仍有许多噪声传进来，因此，我如果想写作，通常都得躲进图书馆，此时就是唱独角戏的时候了。 第六章 改变生活状态若能在工作与人际关系上做些小小的改变，必能将我们厌恶的压力转为心流体验，日常生活的品质必定大为提升。 第七章 自得其乐的性格具有自得其乐性格的人，不太需要物质财富、娱乐、舒适、权力或名望，因为他所做的事情本身就已经是一种回馈。 第八章 爱你的命运对每个人而言，美好生活的最大障碍就是自己，但若学会与自己共存，拒绝需求的诱惑，自我便会变成朋友、帮手及建立充实人生的基石。","categories":[{"name":"professional","slug":"professional","permalink":"http://muxueweiyu.github.io/categories/professional/"},{"name":"effience","slug":"professional/effience","permalink":"http://muxueweiyu.github.io/categories/professional/effience/"}],"tags":[{"name":"心流","slug":"心流","permalink":"http://muxueweiyu.github.io/tags/%E5%BF%83%E6%B5%81/"}]},{"title":"数学之美","slug":"professional/math/数学之美","date":"2021-04-30T13:03:43.000Z","updated":"2021-05-01T01:22:32.216Z","comments":true,"path":"2021/04/30/professional/math/数学之美/","link":"","permalink":"http://muxueweiyu.github.io/2021/04/30/professional/math/%E6%95%B0%E5%AD%A6%E4%B9%8B%E7%BE%8E/","excerpt":"“美就是真理，真理就是美”，这包括了你们所知道和该知道的一切。 “美是首要的试金石，丑陋的数学不可能永存。”","text":"“美就是真理，真理就是美”，这包括了你们所知道和该知道的一切。 “美是首要的试金石，丑陋的数学不可能永存。” 数物理学家理查德·费曼（Richard Feynman）认为，如果人类即将失去所有的科学知识，而只能将一个关于科学的语句留给这个后殖民世界，那应该是描述物质如何由原子所构成的一句话。本着这种精神，如果我们只能将一点点数学知识传给后代，则应该是下面这个问题的解答：究竟有多少质数？ 费曼语录：“所有事物都是由原子组成的——原子由更小的粒子组成，它们永恒地运动着，相互吸引又相互排斥，防止融为一体。” 从某种意义上说，实数是有缺陷的，因为存在一些不能解决的基本运算问题（如：求a×a+1=0中的数字a）。简单来说，代数基本定理表明，在复数域中所有这些问题都有解。不过找到这些解就是另一回事了！ 形状不确定性","categories":[{"name":"professional","slug":"professional","permalink":"http://muxueweiyu.github.io/categories/professional/"},{"name":"math","slug":"professional/math","permalink":"http://muxueweiyu.github.io/categories/professional/math/"}],"tags":[{"name":"美学","slug":"美学","permalink":"http://muxueweiyu.github.io/tags/%E7%BE%8E%E5%AD%A6/"}]},{"title":"家庭教育","slug":"professional/effience/梁学","date":"2021-04-30T08:20:37.000Z","updated":"2021-04-30T13:03:10.088Z","comments":true,"path":"2021/04/30/professional/effience/梁学/","link":"","permalink":"http://muxueweiyu.github.io/2021/04/30/professional/effience/%E6%A2%81%E5%AD%A6/","excerpt":"不管外境如何变化，内心保持安定；不管结果怎样，兴会淋漓地做事，能做多少做多少。这种做事的状态，来自人生的态度，“我有极通达、极健强、极伟大的人生观，无论处何种境遇，常常是快乐的”，更来自修身工夫的磨炼，“我关于德性涵养的工夫，自中年来狠经些锻炼，现在越发成熟，近于纯任自然了”。","text":"不管外境如何变化，内心保持安定；不管结果怎样，兴会淋漓地做事，能做多少做多少。这种做事的状态，来自人生的态度，“我有极通达、极健强、极伟大的人生观，无论处何种境遇，常常是快乐的”，更来自修身工夫的磨炼，“我关于德性涵养的工夫，自中年来狠经些锻炼，现在越发成熟，近于纯任自然了”。 前言古人修身的两大途径，一是省察，二是涵养，一般以前者为主、后者为辅，但须相互配合、不得偏废。所谓省察，就是时时反身内省，照察和修正自己的行为和心念。 修身的第二条途径，所谓涵养，就是在日常生活中陶养性情。 与现代人多把才艺当成竞争加分的手段或者作为日后谋生的技能不同，古来君子以琴棋书画来涵养性情（此即孔子所说“志于道，据于德，依于仁，游于艺”，以道德为人生准的，在正面的省察身心之外，辅之以艺术的熏陶涵养）， 我怕你因所学太专门之故，把生活也弄成近于单调，太单调的生活，容易厌倦，厌倦即为苦恼，乃至堕落之根源。再者，一个人想要交友取益，或读书取益，也要方面稍多，才有接谈交换或开卷引进的机会。 修身为本以及专业研究与生命之间相互促进， 梁启超的证婚词有云： 你们基于爱情，结为伴侣，这是再好不过的了。爱情神圣，我狠承认；但是须知天下神圣之事，不止一端，爱情以外，还多着哩。一个人来这世界上一趟，住几十年，最少要对于全世界人类和文化，在万仞岸头添上一撮土。这便是人之所以为人之最神圣的意义和价值。……就专以爱他而论，爱情的本体是神圣，谁也不能否认，但是如何才能令神圣的本体实现，这确在乎其人了。徐志摩！陆小曼！你们懂得爱情吗？你们真懂得爱情，我要等着你们继续不断的，把它体现出来。 爱情的本体是“爱他”，爱他人，而不是基于利己地满足生理和心理的欲望，这是爱情与情欲的区别。 梁启超家教的儒家文化（包括修身之学）之精神导向主要包括如下五个方面： 典范教育。所谓典范，即人格典范。儒家的学问，不仅指形成思想体系，而且更是指成就人格典范（如君子、圣贤）。 经典教育。经典是一个民族的思想文化的核心价值之所在。如果经典能代代相传，那么一个民族的文化、精神命脉就不断。 仁慈教育。儒家的核心思想之一是“仁”，表现于家庭，就是父慈子孝、兄友弟恭、夫和妇顺。作为父亲，梁启超在子女身上典型地体现了一个“慈”字。他关爱、呵护每一个孩子的成长。 忧患教育。孟子讲“生于忧患而死于安乐”（《孟子·告子下》），强调在忧患中成才，在忧患中兴国。 功夫教育。儒家学问最讲究功夫，功夫论是儒家思想的重要组成部分。所谓学问功夫，包括为学所需要的方法、手段、技巧、时间等。 书信困难境遇正是磨炼身心最好机会,未来的苦日子还多着呢，现在正好做点磨炼身心的预备工夫。 悲观是腐蚀人心的最大毒菌 。 关于学问，一是谈学问与生活的问题。梁启超认为所学专业不能太过专门，以致把生活弄得很单调，生活太单调，就易生厌倦，厌倦即为苦恼，乃至堕落的根源。相反，学业内容的扩充，与生命内容的扩充成正比例，学业越扩充，生活就变得越丰富多彩，并因而激发生命，保持不厌不倦的精神。所以他希望思成除了专攻本专业建筑学以外，还要多学些常识，尤其是文学或人文科学中之某部；对思庄则说除了学专门科学之外，还要学一两样娱乐性的学问，如音乐、文学、美术等。这是梁启超“趣味主义”的教育观在家庭教育上的体现。二是谈学问工夫问题。梁启超认为凡做学问要“猛火熬”与“慢火炖”两种工作循环交互进行，因为儿女们太过用功，所以他特别强调“慢火炖”的工夫，即“优游涵饫，使自得之”。当然对一般人而言，还须先用“猛火熬”的工夫，不然哪有优游涵饫的资本？ 思成再留美一年，转学欧洲一年，然后归来最好。关于思成学业，我有点意见。思成所学太专门了，我愿意你趁毕业后一两年，分出点光阴多学些常识，尤其是文学或人文科学中之某部门，稍为多用点工夫。我怕你因所学太专门之故，把生活也弄成近于单调，太单调的生活，容易厌倦，厌倦即为苦恼，乃至堕落之根源。再者，一个人想要交友取益，或读书取益，也要方面稍多，才有接谈交换或开卷引进的机会。不独朋友而已，即如在家庭里头，像你有我这样一位爹爹，也属人生难逢的幸福。若你的学问兴味太过单调，将来也会和我相对词竭，不能领着我的教训，你全生活中本来应享的乐趣，也削减不少了。我是学问趣味方面极多的人，我之所以不能专精有成者在此，然而我的生活内容异常丰富，能够永久保持不厌不倦的精神，亦未始不在此。我每历若干时候，趣味转过新方面，便觉得像换个新生命，如朝旭升天，如新荷出水，我自觉这种生活是极可爱的，极有价值的。我虽不愿你们学我那泛滥无归的短处，但最少也想你们参采我那烂漫向荣的长处（这封信你们留着，也算我自作的小小像赞）。我这两年来对于我的思成，不知何故常常像有异兆的感觉，怕他渐渐会走入孤峭冷僻一路去。我希望你回来见我时，还我一个三四年前活泼有春气的孩子，我就心满意足了。这种境界，固然关系人格修养之全部，但学业上之薰染陶镕，影响亦非小。因为我们做学问的人，学业便占却全生活之主要部分。学业内容之充实扩大，与生命内容之充实扩大成正比例。所以我想医你的病，或预防你的病，不能不注意及此。这些话许久要和你讲，因为你没有毕业以前，要注重你的专门，不愿你分心，现在机会到了，不能不慎重和你说。你看了这信，意见如何（徽音意思如何）？无论校课如何忙迫，是必要回我一封稍长的信，令我安心。 其实要做到的无非知行合一， 口号之成立及传播，要具备下列各种要素：（一）语句要简单。令人便于记忆，便于持守，便于宣传。（二）意义要明确。明谓显浅，令人一望而了解；确谓严正，不含糊模棱以生误会。（三）内容要丰富。在简单的语句里头能容得多方面的解释，而且愈追求可以愈深入。（四）刺激力要强大。令人得着这个口号，便能大感动，而且积极的向前奋进。（五）法门要直捷。依着他实行，便立刻有个下手处，而且不管聪明才力之大小，各各都有个下手处。无论政治运动、学术运动、文艺运动等等，凡有力的口号，都要如此。在现代学术运动所用口号，还有下列两个消极的要素：（一）不要含宗教性。因为凡近于迷信的东西，都足以阻碍我们理性之自发，而且在现代早已失其感动力。（二）不要带玄学性。因为很玄妙的道理，其真价值如何姑勿论；纵使好极，也不过供极少数人高尚娱乐之具，很难得多数人普遍享用。根据这七个标准，来评定中外古今学术之“宗旨”——即学术运动之口号，我以为阳明“知行合一”这句话，总算最有永久价值，而且最适用于现代潮流的了。 《大学》说：“欲修其身者，先正其心；欲正其心者，先诚其意；欲诚其意者，先致其知；致知在格物。” 知行合一，本来是一种实践的工作，不应该拿来在理上播弄。","categories":[{"name":"professional","slug":"professional","permalink":"http://muxueweiyu.github.io/categories/professional/"},{"name":"effience","slug":"professional/effience","permalink":"http://muxueweiyu.github.io/categories/professional/effience/"}],"tags":[{"name":"教育","slug":"教育","permalink":"http://muxueweiyu.github.io/tags/%E6%95%99%E8%82%B2/"}]},{"title":"地图三千年","slug":"Random Thoughts/话题集/地图三千年","date":"2021-04-30T06:40:44.000Z","updated":"2021-04-30T08:07:02.663Z","comments":true,"path":"2021/04/30/Random Thoughts/话题集/地图三千年/","link":"","permalink":"http://muxueweiyu.github.io/2021/04/30/Random%20Thoughts/%E8%AF%9D%E9%A2%98%E9%9B%86/%E5%9C%B0%E5%9B%BE%E4%B8%89%E5%8D%83%E5%B9%B4/","excerpt":"“世界是一个舞台，男男女女只不过是演员而已，上场下场各有其时。”","text":"“世界是一个舞台，男男女女只不过是演员而已，上场下场各有其时。” 前言英国剧作家理查德·爱德华兹就让他笔下的一个角色说：“世界是一个舞台，其中的许多人都扮演着他们的角色。”威廉·莎士比亚非常欣赏这种表达方式，以至于几年后，将其用于他的作品《如你所愿》中：“世界是一个舞台，男男女女只不过是演员而已，上场下场各有其时。”莎士比亚还将他的剧院命名为环球剧场。 1969年，美国制图家瓦尔多·R.托布勒提出了著名的地理学第一定律：一切事物都与其他事物相关，但近处的事物比远处的事物更相关。当我们展开一幅新地图时，大多数人首先寻找的是他们的家乡。奥特利乌斯在《寰宇概观》的序言中写道：“有些人也许会在我们的剧院里搜寻某个特定地区的表演（因为每个人都热爱自己的家乡，所以他们也想在其他地方看到它）。”可见这种现象由来已久。然而，一旦我们找到了自己的家乡，我们中的许多人会体验到通过地图集旅行的兴奋——停下来看看塔科拉迪（Takoradi）、廷巴克图（Timbuktu）和亭可马里（Trincomalee）；我们会让手指沿着东方快车、丝绸之路、西线和古罗马疆界的路线奔跑——我们会意识到，我们和世界的其他部分一样，都是这个世界上各具风情、不可或缺的一部分。 距离和接近度是相对的。从太空看，地球一定像是全人类的故乡。正如宇航员威廉·安德斯所说：“我们远道而来是为了探索月球，但最重要的是我们发现了地球。” 世界上最早的地图根据马雷塔的说法，它代表了人类历史上的一个十字路口：从狩猎社会向农业社会的过渡。 地图是世界的图像，是世界观的一种表现。就试图描述世界是什么样而言，宗教叙事与地图是相互关联的，它们是在一个看似无穷无尽且难以理解的世界上强加秩序和结构的不同方式，因此人们产生了宇宙观——关于这个世界是如何形成的故事，描述这个世界如何被创造的宇宙学理论，出现在几乎每个时代的每种文化中。 河塘边的青蛙神圣地理学第一本地图集探索远方大测绘北方未知之地空中俯视蓝色星球数字世界","categories":[{"name":"Random Thoughts","slug":"Random-Thoughts","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/"},{"name":"话题集","slug":"Random-Thoughts/话题集","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/%E8%AF%9D%E9%A2%98%E9%9B%86/"}],"tags":[{"name":"地理，地图","slug":"地理，地图","permalink":"http://muxueweiyu.github.io/tags/%E5%9C%B0%E7%90%86%EF%BC%8C%E5%9C%B0%E5%9B%BE/"}]},{"title":"公式之美","slug":"professional/math/公式之美","date":"2021-04-29T01:00:05.000Z","updated":"2021-04-30T06:39:58.600Z","comments":true,"path":"2021/04/29/professional/math/公式之美/","link":"","permalink":"http://muxueweiyu.github.io/2021/04/29/professional/math/%E5%85%AC%E5%BC%8F%E4%B9%8B%E7%BE%8E/","excerpt":"万物速朽 唯有公式永恒 人类发明数学公式，来描绘浩瀚宇宙和人生百态。世界的繁华秀丽，映衬出符号公式的简洁之美。爱因斯坦的质能方程和杨振宁的规范场，摸索出宇宙终极游戏的规则；费马大定理和欧拉恒等式，揭示出宇宙变化背后的数学世界；从凯利公式到贝叶斯定理，逐渐完全预测人类行为；蝴蝶效应的洛伦兹方程组和三体问题，则告诉我们数学的界限。","text":"万物速朽 唯有公式永恒 人类发明数学公式，来描绘浩瀚宇宙和人生百态。世界的繁华秀丽，映衬出符号公式的简洁之美。爱因斯坦的质能方程和杨振宁的规范场，摸索出宇宙终极游戏的规则；费马大定理和欧拉恒等式，揭示出宇宙变化背后的数学世界；从凯利公式到贝叶斯定理，逐渐完全预测人类行为；蝴蝶效应的洛伦兹方程组和三体问题，则告诉我们数学的界限。 1 1+1=2：数学的溯源数学独立于时空之外，在哪个宇宙都是亘古不变的。 不管是现实生活中简单易懂的1+1=2，还是互联网世界里的1+1=10，都以其自身的客观性和普适性在时间长河里自证“伟大”。 1+1=2种下了数学的种子，推动了理性世界的基本运转。它简洁美妙，无处不在，是人类文明重要的“根”。 勾股定理：数与形的结合人类历史上第一次把“数”与“形”相结合。 在数学的世界里，无理即未知，未知即未来。 费马大定理：困扰人类358年回望这三百多年，人类每一次都用尽全力地追寻，虽然未能抵达终点，却扩充了“整数”的概念，扩展了“无穷递降法”、虚数和群论的应用，催生出库默尔的“理想数论”，促成了莫德尔猜想 13 ，证明了谷山-志村猜想，加深了对椭圆方程的研究，找到了微分几何在数论上的生长点，发现了伊利瓦金-弗莱切方法与伊娃沙娃理论的结合点，推动了数学的整体发展…… 一部波澜壮阔的数学史由此徐徐展开，这是一场智者征服世间奥秘的接力赛，而信仰和追寻就是这场接力赛的最大意义。毕竟，正是因为有了一群仰望星空的人，人类才有了希望。 牛顿-莱布尼茨公式：无穷小的秘密如果没有微积分，英国的工业革命会推迟至少200年。 空间与时间究竟能不能无限可分？无穷小量到底能不能等于0？ 这样一个哲学矛盾，成就了数学上的一个著名悖论。 距离虽然有无限多个，但它们的“和”是一个有限的、确定的距离。相应地，他所用的时间间隔虽然也有无限多个，但“和”也是确定、有限的一段时间，现实中的阿喀琉斯总是在短时间内就追上了那只慢吞吞的乌龟。 将时间和空间（距离）无限分割，无疑体现了无穷小量的思想，即微分的思想。而将这无限个小段以一定形式求和，得出一个确定的值，体现的恰好是定积分的定义。 牛顿-莱布尼茨公式的出现，他们才真正把微分和积分联系起来。 微积分诞生，并由此正式形成了一个完整体系，成为数学帝国里的一门真正学科。 现代理论的特点之一就是“叙述逻辑清晰，概念内涵明确，不能有含糊，”而微积分的诞生并不是严格按照“逻辑线路”线性发展，而是通过实际应用归纳推理产生的，这就很难经得起演绎推理的逻辑推敲。所以，在牛顿和莱布尼茨之后，数学家们为此做出了无数努力，最终由柯西和魏尔斯特拉斯等人解决了这个问题。 解决办法就是，抛却微分的古典意义，基于极限的概念，重新建立了微积分。 19世纪，法国数学家柯西确立了以极限理论为基础的现代数学分析体系，用现代极限理论说明了导数的本质，他将导数明确定义为一个极限表达式。 “现代分析学之父”魏尔斯特拉斯用ε-δ语言一举克服了“limit困难”后，那些质疑的声音也都不再具有任何威慑力。 17世纪后，我们用微积分推广出了卷积、叠积的概念，从此有了无线电。 19世纪初，我们用微积分发明了傅里叶级数、傅里叶变换等概念，从此有了现代电子技术和通信技术。 随后，我们又用微积分发明了拉普拉斯变换，从此有了控制工程。 甚至连莱布尼茨都曾向他的保护人公爵夫人苏菲这样描述过微分方程：“我的女王，无穷小的用处无限广阔，我们可以用它来计算飘零落叶的轨迹，计算莱茵河畔竖琴声的和谐振动，计算你影子在夕阳下弯曲的度数……” 无论是在数学、工程，还是化学、物理、生物、金融、现代信息技术等领域，微积分一直风光无两， 它是现代科学的基础，是促进科技发展的工具。自从人类能够操控这把“刀”之后，数学史上无数难题被一斩而断。用微积分的方法推导演绎出的各种新公式、新定理，促成了后来一场场科学和技术领域的革命。 万有引力：从混沌到光明天不生牛顿，万古如长夜。 在牛顿之前，人类认为这一切都掌控在神的手中；而牛顿之后，人类才知道，天地之间存在万有引力，它可以解释星辰运转。 宇宙和万物找到了统一规律，物理学第一次达到了真正的统一。 所以有人说：道法自然，久藏玄冥；天降牛顿，万物生明。 而后，以牛顿为代表的机械论之自然观，在整个自然科学领域里占据了长达两百多年的统治地位，现代科学由此形成。 22岁的牛顿赶紧躲回乡下老家。乡下的生活平静而踏实，不似在城里那么忙碌，牛顿就坐在苹果树下深度冥想。在短短的18个月内，他思考数学问题、进行光学实验、计算星体轨道、探索引力之谜……牛顿生平最重要的几项成就都在这一年半的时间内完成。他在日记里写道：“那时我正处于发明创造的高潮，我对数学与哲学的关注超过了那以后的任何时候。”后来，1666年也被称为牛顿的奇迹年。 万有引力的真正意义就在于万有引力常数。 19世纪末，科学家们发现水星在近日点的移动速度比理论值大，即水星轨道有旋紧。然而当人们用万有引力定律试图解释这种现象时，却发现毫无说服力，牛顿的理论失灵了。 不久后，爱因斯坦的广义相对论出现了，它正确解释出水星近日点每100年会出现43角秒的漂移，并且还能解释引力的红移和光线在太阳引力作用下的弯曲等现象。经典引力理论在广义相对论引力理论光芒的照射下，黯然失色。 万有引力的出现，为人类建立起了理解天地万物的信心，使人们不再盲目崇拜神明，相信自我拥有改变世界的力量。正如物理学家冯·劳厄所说：“没有任何东西像牛顿引力理论对行星轨道的计算那样，如此有力地树立起人们对年轻的物理学的尊敬。从此以后，自然科学成为智者心中的精神王国！” 欧拉公式：最美的等式有数字的地方就有欧拉。 在人类的学问里，最接近金字塔顶端的是数学。 不过，世界上只有极少数的人，天生就对数具有强有力的直觉与天赋，这种天赋让他们成为“盗火者”，帮助人类探寻隐藏在宇宙最深处的规律。 在这样一小撮天才之中，欧拉又是出类拔萃的人物，可谓天才中的天才。他的研究几乎涉及所有数学分支，对物理学、力学、天文学、弹道学、航海学、建筑学等都有研究，甚至对音乐都有涉猎！有许多公式、定理、解法、函数、方程、常数等都是以欧拉的名字命名的，其中最有辨识度的，应该是欧拉公式。 这个公式将5个数学常数0、1、e、i、π简洁地联系起来，同时也将物理学中的圆周运动、简谐振动、机械波、电磁波、概率波等联系在一起……数学家们评价它是“上帝创造的公式”。 将七桥问题转化为一笔画问题，是一个把实际问题抽象成数学模型的过程，这当中并不需要运用多么深奥的理论，但能想到这一点，却是解决难题的关键。后来，我们将此种研究方法称为数学模型方法，而这也是欧拉作为18世纪伟大的数学家异于常人之处。 欧拉作为史上非常多产的数学家，孜孜不倦地共写下了886本（篇）书籍和论文，其中分析、代数、数论占40%，几何占18%，物理和力学占28%，天文学占11%，弹道学、航海学、建筑学等占3%。后来，彼得堡科学院为了整理他的著作，足足忙碌了47年。 然观其一生，在欧拉的所有工作中，首屈一指的还得论对分析学的研究，其成功地拉扯着牛顿和莱布尼茨的“孩子”——微积分长大成人，被誉为“分析的化身”。 比起牛顿和莱布尼茨这两位“微积分之父”，欧拉这个养父显然敬业得多，一连出版《无穷分析引论》 （1748）、《微分学》（1755）和《积分学》（共三卷，1768—1770）三本书，堪称微积分发展史上里程碑式的著作，并且在很长时间内一直被作为分析课本的典范而普遍使用。 遥想当年，牛顿、莱布尼茨创立的微积分基础不稳，应用有限，主要还是从曲线入手对微积分进行研究。而欧拉却与一批数学家拓展了微积分及其应用，产生一系列新的分支，并将它们共同形成“分析”这样一个广大领域，同时明确指出，数学分析的中心应该是函数。 自此，18世纪的数学形成了代数、几何、分析三足鼎立的局面，而工业革命以蒸汽机、纺织机等机械为主体的运动与变化，也得到了最适合的数学工具进行精确计算。 0和1是最简单的两个实数，是群、环、域的基本元素，更是构造代数的基础。任何数与0相加都等于它本身，任何数与1相乘也都等于它本身，有了0和1，就可以得到其他任何数字。 无理数π在引爆数字狂热的同时，隐藏着世界上最完美的平面对称图形——圆。π在欧氏几何学和广义相对论中无处不在，有了π，就有了圆函数，即三角函数。 无理数e是自然对数的底，大到飞船的速度，小至蜗牛的螺线，四处可见其身。有了e，就有了微积分，也就有了和工业革命时期相适应的数学。 甚至，连数学的“隐士高手”虚数单位i也在其中，其是-1的平方根，也是方程x2 +1=0的一个解。有了i，就有了虚数，平面向量与其对应，也就有了哈密尔顿的四元数。在欧拉之后的未来，虚数还成为引发电子学革命的量子力学的理论基础。 还有运算符号“+”和关系符号“=”含于等式中。减法是加法的逆运算，乘法是累计的加法……有了加号，就可以引申出其余运算符号；而等号则在我们最初接触算术时，便教会了我们世上最重要的一种关系——平衡。 欧拉恒等式仿佛一行极为完美而简洁的诗，道尽了数学的美好，数学家们评价它为“神创造的公式，我们只能看它却不能完全理解它”。这个公式在数学领域产生了深远的影响，如三角函数、泰勒级数、概率论、群论等。就连数学王子高斯也不得不承认：“欣赏不了它的人，一辈子都成不了一流的数学家。”此外，欧拉公式对物理学的影响也很大，如机械波论、电磁学、量子力学等都匍匐在它的脚下。 60岁时，欧拉不幸双目失明，但他依旧运用强大的记忆力和心算能力，通过口述形式完成了四百多篇论文，独自创立了刚体力学、分析力学等新学科。 法国大数学家拉普拉斯曾感慨：“欧拉是所有人的老师。” 而这不仅仅是因为几乎每一个数学领域都可以看到欧拉的名字——初等几何的欧拉线、多面体的欧拉定理、立体解析几何的欧拉变换公式、数论的欧拉函数、变分法的欧拉方程、复变函数的欧拉公式…… 也不仅仅是因为他的创造在整个物理学和许多工程领域里都有着广泛的应用，更是因为欧拉为我们留下极其珍贵的科学遗产时，还展现了为科学献身的精神。在极少天赋异禀的天才之中，我们很难再见到有一人像欧拉这般一生勤勉而顽强，不曾因失明而停止前进的步伐，甚至保持充沛的精力到最后一刻。 在欧拉所有的成就中，极富灵气的eiπ +1=0不是他最重要的成就，而是史上最独特的公式。 伽罗瓦理论：无解的方程伽罗瓦的群论，拉开了现代数学的帷幕。 “跳出计算，群化运算，按照它们的复杂度而不是表象来分类，我相信，这是未来数学的任务。”伽罗瓦留下的这句话，直至今天，仍然像闪电一样划过夜空。 为什么数学家对五次方程如此迷恋？因为在五次方程的求解过程中，数学家们第一次凿开了隐藏在冰山下的现代科学，数学开始逐步进入到精妙的群论领域。 群论开辟了一块全新的战场，以结构研究代替计算，把从偏重计算研究的思维方式转变为用结构观念研究的思维方式，并把数学运算归类，使群论迅速发展成为一个崭新的数学分支，对近世代数的形成和发展产生了巨大影响。 群论的出现，同样奠定了20世纪的物理基础。从此，统治人类近200年的牛顿机械宇宙观开始迈入随机和不确定性的量子世界和广袤无垠的时空相对论。 如今的物理和数学显然已经无法想象没有群论的日子，算术和拓扑的交融是现代数学中一个极其神秘的现象，伽罗瓦群则在其中扮演着重要的角色。 证明了五次代数方程通用的求根公式是不存在的。 阿贝尔的这一证明使数学从此挣脱了方程求解和根式通解的思想束缚，颠覆性地提出，一个通过方程系数的加减乘除和开方来统一表达的根式，并不能用来求解一般的五次方程。 就这样，经过三百多年的坎途后，五次方程终于被人们揭开了神秘面纱。自此，一条通往现代群论的铁路开始悄然搭建，代数学也迎来了新的篇章。 法国数学家毕卡在评述19世纪的数学成就时，曾如是说：“就伽罗瓦的概念和思想的独创性与深刻性而言，任何人都是不能与之相比的。”回望五次方程问题的解决过程，群论、域论交相辉映，迂回曲折，也难怪当时学界顶级的审评大师们如坠云里雾中。 危险的黎曼猜想能够引诱数学家出卖灵魂的，只有黎曼猜想。 黎曼提出：过直线外一点，一条该直线的平行线也作不出来。这个基于球和椭球而得出的“无平行线”结论，成为相对论的数学帮手。 黎曼提出“高维空间”数学理论，古典世界的数学边界被拆除，他的伟大之处在于他引入高维概念后，所有传统数学的规律仍然自洽。他还推断出电力、磁力和引力都是由看不见的“皱褶”引起的，“力”本身并不存在，它只是由几何畸变引起的明显结果。如果细细品读，就会发现这与爱因斯坦提出的广义相对论非常相似。 熵增定律：寂灭是宇宙宿命？宇宙终将死亡，这是它的必然宿命？ 当它与时间联系在一起时，时间无法“开倒车”（黑洞内部除外）；当它与生命联系在一起时，则如一根尖针戳穿了人类长生不老的美梦；而当它与宇宙联系在一起时，它更似一部剧本，写清了宇宙的前世今生和最终走向。 人类像是一步步去看清宇宙真相的孩子，我们从直立行走到点燃普罗米修斯之火，从男耕女织到走进蒸汽时代，从电磁统一到走进信息社会……但是面对熵，却依旧似一个光脚的孩子，手足无措，无力去阻止宇宙的毁灭。一句“熵增是宇宙万事万物自然演进的根本规律”，就可以把我们困于绝望之中。 “落叶永离，覆水难收；死灰欲复燃，艰乎其力；破镜愿重圆，翼也无端；人生易老，返老还童只是幻想。”无论是克劳修斯熵，还是玻尔兹曼熵，似乎都以一种不可逆的增长态势迅猛发展。系统从小概率趋于大概率，从有序趋于无序，在熵达到极大值后归于沉寂。 薛定谔提出：生物体新陈代谢的本质，是使自己成功地摆脱在其存活期内所必然产生的所有熵。人通过周围环境汲取秩序，低级的汲取秩序是求生存，即获取食物，靠吃、喝、呼吸和新陈代谢，这是生理需求；高级的汲取秩序则是增强自身技能，在与他人和社会的交往中获益。 但无论是低级汲取还是高级汲取，都是人为吸引一串负熵去抵消生活中产生的熵的增量，这是人类生存的根本：以负熵为食。 从这个角度看，人天生就是与熵增相对抗的力量。 《列子·汤问》中曾记载北山愚公，年且九十，却以残年余力，叩石垦壤，企图移山。 山巍峨庞然，而愚公老弱如浮萍，故河曲智叟笑其不惠。 然愚公答曰：“虽我之死，有子存焉；子又生孙，孙又生子；子又有子，子又有孙；子子孙孙无穷匮也。而山不加增，何苦而不平？”根据热力学第二定律，宇宙天然而熵增，它俯瞰众生，侵蚀万物，比起那岿然不动的山更为渺茫，纵使伟大如爱因斯坦，坚韧如霍金也无能为力。放眼历史，喧嚣过后终归无声，热寂才是最终归宿。 但人类以负熵为食，即使面对宇宙热寂，也从未胆怯止步。内以新陈代谢消除有机体内产生的熵的增量，外则不断在环境中建立“有序”社会，力图使一切维持在一个稳定而又低熵的水平之上。 纵然微小若星骸尘埃，也要求得自我的生命意义；纵然仅仅拥有数十年光阴，也要为这混乱的宇宙建立秩序。 麦克斯韦方程组：让黑暗消失宇宙间任何的电磁现象，皆可由此方程组解释。 英国科学期刊《物理世界》曾让读者投票评选了“最伟大的公式”，榜上有名的1 0个公式里，有著名的E=mc 2 、复杂的傅里叶变换、简洁的欧拉公式……最终，麦克斯韦方程组排名第一，成为“最伟大的公式”。 或许，并不是每个人都能看懂这个公式，但任何一个能把这几个公式看懂的人都一定会感到震撼，怎么有人能归纳出如此完美的方程组？这组公式融合了电的高斯定律、磁的高斯定律、法拉第定律及安培定律，完美地揭示了电场与磁场相互转化中产生的对称性，统一了整个电磁场。对此，有人评价说：“一般地，宇宙间任何的电磁现象，皆可由此方程组解释。” 借助麦克斯韦的发现和赫兹的验证，人类成功地在认识光的本性上跨越了一大步。波动说也开始开疆扩土，太阳光不过是电磁波的一种可见的辐射形态。我们向不可见光进军，从无线电波到微波，从红外线到紫外线，从X射线到Y射线……将这些电磁波按照波长或频率的顺序排列起来，就形成了电磁波谱。 这些电磁波谱有很大的用处，无线电波用于通信、微波用于微波炉、红外线用于遥控、紫外线用于医用消毒……这些不同形式的“光”逐渐组成了现代科技的基石之一。因此可以说，如果没有麦克斯韦，收音机、电视、雷达、计算机等有关电磁波的东西都将不复存在。 如果说17世纪是一部牛顿力学史，那么19世纪便是一部麦克斯韦电磁学史。 17世纪，牛顿定律催生出蒸汽机，机器首次取代人力，人类进入蒸汽时代。 19世纪，麦克斯韦方程组启迪了爱迪生等发明家，电取代蒸汽，人类进入电气时代。 相比于自然律隐没在黑暗中，麦克斯韦方程组则突破了自然律，让黑暗从此消失。 1888年，赫兹实验里那束微弱的只有指缝大小的电火花，让光与电、电与磁处于电磁力的统一掌握之中，人类文明呈几何级迅猛前进。 比赫兹料想得更为惊人的是，在他死后的第七年，1901年，那束电火花又通过无线电报穿越大西洋，实现了全球的实时通信，人类跨入了一个崭新的信息时代。 质能方程：开启潘多拉的魔盒一粒尘埃，也蕴含着人类无法想象的巨大能量。 20世纪以前，人们没有关注过这些消失的质量，在他们看来，质量与能量是两条毫不相关的平行线，一个是物质的本身属性，一个是物质的运动属性。 科学家们也一直把自然界的所有现象划分到这两个领域进行研究。一个是物体的物理实在——质量，一个是使物体具有运动能力的源泉——能量，质能规律互不交叉。 19世纪的科学也一直在质量与能量这两根“擎天柱”的支撑下发展，而能量这根“擎天柱”，最早由法拉第发现。 质量这根“擎天柱”，则在化学界大放光彩，拉瓦锡为此做出了重要贡献。 拉瓦锡的正经职业其实是税务官，但一到晚上，他就会变成化学家，在欧洲最先进的私人实验室里进行研究。1774年10月，在一个巴黎小圈子的晚宴上，普利斯特里向拉瓦锡描述了一个神奇现象，从氧化汞中可以提取一种“生命之气”，小白鼠在其中的存活时间比在等体积普通空气中长约4倍。 用氧气和光泽金属重新合成氧化汞。拉瓦锡惊奇地发现，前后物质的质量竟完全一样。这是科学史上的伟大时刻，质量守恒定律被彻底证明，即在化学反应前后，参加反应的各物质的质量总和等于反应后生成的各物质的质量总和，这也成了现代化学的一个基本定律。 薛定谔方程：猫与量子世界猫，徘徊于宏观与微观世界之间。 狄拉克方程：反物质的“先知”应优先寻找美丽的方程，而不要去烦恼其物理意义。 杨-米尔斯规范场论：大统一之路规范场论不属于人间，它属于宇宙。 2000年，Nature评选过去1000年影响世界的物理学家，杨振宁是在世的唯一一个影响世界千年的物理学家。 杨-米尔斯方程是一个非线性波动方程，是线性的麦克斯韦方程的推广。虽然全世界并没有多少人能弄懂它，但它是物理学界极为重要的方程式之一，它开启了规范场论的伟大征程。 到了21世纪，规范场论已经作为当代物理学前沿的最基础部分，和牛顿力学、麦克斯韦电磁理论、狭义相对论、广义相对论及早期的量子理论一样，是物理学大厦中最坚实的存在。 香农公式：5G背后的主宰香农重新建造了一个全新的世界，从宙斯的额头开始。 从烽火狼烟到邮政印刷，从电报广播到网络通信。 自香农公式诞生之后，人类在远距离传输信息的这条通信道路上越走越快。这是科学的指引，是技术的进步，是超越国家边界的物理存在。 通信技术的主宰者从来只有一个，那就是香农公式。 在科学的世界，始终流传着各种有关香农的传说，人们称他为“信息论之父”和“数字通信时代的奠基人”。这一切都源于他1948年亲手所绘的那一幅“数字时代的蓝图”——《通讯的数学原理》。 在这篇论文里，香农以无与伦比的想象力和创造力，用科学方法定义信息，发展了信息论，提出通信业两大定律，并以信息论指引通信发展，使人类从工业社会过渡到信息社会，最后进入前所未有的数字通信时代。 什么是信息？ 20世纪以前，“信息”尚处于混沌之中，更多的时候，它是一纸家书，是斗兽场的公示牌，或是市场上的吆喝…… 直到香农将该词定义为：信息是用来消除随机不确定性的东西。 1948年，在《通信的数学原理》一文中，香农完成了他八年的夙愿，为通信系统建立起一整套数学理论。这标志着信息论的诞生，并直接诞生了一个新的学科：信息学。此后，这个世界所有的信息都可以用0和1来表示，香农带领人类从工业时代进入信息时代。 为了对信息及信息的不确定性进行度量，香农在《通信的数学原理》中提出了比特和信息熵的概念。 比特是香农自创用来测量信息的单位 信息熵则是信息论中最基本的一个概念 关于信息熵的公式，华裔物理学家张首晟曾经引用爱因斯坦的话感慨：这个公式虽然不像E=mc2 那么知名，但人类知识往前推进，牛顿力学可能不对，量子力学可能不对，相对论可能也不对，而信息熵公式却是永恒的。 在对信息的基本概念定义之后，香农提出信息学的两大定律。 香农第一定律，即信源编码定律，简单来说就是教会人类如何用数学方式将信息编码。 香农第二定律，即香农公式，描述了一个信道中的极限信息传输率和该信道能力，这是现代通信行业的“金科玉律”。 香农成功借助数学基本建立了信息知识体系的构架，信息论在新的时代掀起一场狂风巨浪般的信息革命，一个新帝国正以前所未有的速度崛起。 直到香农定义了信息的相关概念，才用信息熵解决了当时电报、电话、无线电等如何计量信号信息量的问题。但怎么在远距离通信中进一步提高信息传递的信息量，加快信息的传送速率呢？ 这是更令人焦急的烦恼，不能以后总是只发几个字的电报吧。 但信息无质无量，谁知道到底是什么在影响它的速率呢？ 这就是顶尖科学家存在的意义，香农直接给出了信道容量公式，即香农公式。这个公式定义了信息传送速率上限，即香农极限，几乎所有的现代通信理论都是基于这个公式展开的， 根据香农定理，由于受到固有规律的制约，任何信道都不能无限增加信息传送的速率。 从香农公式中我们可以看出，想要提高信息的传送速率，关键在于提高信噪比和带宽。 香农公式作为信息时代的“圣经”，它是现代信息革命必须遵循的科学原理，也是数字通信时代的理论基石。 造物主有这样的能力，他说世界很简单，原则就这条，你们自己研究吧。 1986年左右，依托着频分多址技术，1G时代崛起。生活在信息依靠模拟信号传递的世界，我们手拿价格高昂的“大哥大”，四处寻找能听得清楚对方讲话的最佳位置。 1995年左右，挥别1G，时分多址技术使我们进入了2G世界。诺基亚7110开启了人类手机上网的时代，也开启了传递160字长度的短信的生活，数字移动电话逐渐取代模拟移动电话，一代巨头摩托罗拉也就此走下神坛。 2007年左右，码分多址技术大行其道。伴随着智能手机iPhone的出台，3G网络火了起来，手机APP生态系统开始建立，乔布斯手握触控式屏幕的苹果一举成功打败了按键盘的诺基亚。 2013年左右，正交频分多址技术引发变局。4G以更快的上网速度开创了移动互联网时代，我们用微信语音聊天，通过支付宝扫码付款，看短视频消遣娱乐，手机已成为我们生活中不可或缺的一部分。 短短几十年，依托着香农定理建立起来的通信技术和系统，时代无时无刻不在以更快的速度往前发展。2G实现从1G的模拟时代走向数字时代；3G实现从2G数字时代走向移动互联时代；现在，4G又开始要从移动互联时代向5G万物互联时代迈进。 《信息》的作者詹姆斯·格雷克曾说：“将香农与爱因斯坦进行对比更有意义。爱因斯坦贡献突出，地位显赫。但我们并没有生活在相对论时代，而是生活在信息时代。正是香农，在我们所拥有的电子设备中，在我们注视的每一个计算机屏幕上，以及所有数字通信的方法中都留下了他的印迹。他是这样一个人：他改变了世界，而且在更改以后，旧世界已经被人们彻底遗忘。” 若从实用层面来说，詹姆斯·格雷克的话无疑令我们心服首肯。 单就香农公式，无论是1G、2G、3G还是4G、5G，甚至是未来的6G、7G，万变不离其宗，全部都在香农公式中寻找力量。这种改变人类生活面貌的伟大贡献，足以与爱因斯坦的E=mc²相提并论。 布莱克-斯科尔斯方程：金融“巫师”方程能定价期权，却无法预测人性。 该公式向世界证明，无论经济表面现象有多复杂，数学总能将这种复杂刻画出来。 这个方程的崛起使全球金融衍生市场步入全盛时期，一个衍生工具的时代到来了。它创造出数十万亿金融衍生产品，并令美国金融行业升至社会所有行业的顶峰，甚至包括世界经济也因衍生市场的繁荣而焕然一新。 美国“第二次华尔街革命”也因该公式的诞生吹起了新生的号角，金融工程在经济学界破土而出，人称“数量分析专家”的新一代交易家成为华尔街最炙手可热的精英人才。 套利建立在对冲操作上，所谓对冲，就是在交易和投资中，同时进行两笔行情相关、方向相反、数量相当、盈亏相抵的交易，用一定的成本去“冲掉”风险，来获取风险较低或无风险利润。LTCM主要从事所谓“趋同交易”，即寻找相对于其他证券价格错配的证券，做多低价的，沽空高价的，并通过加杠杆的方式将小利润变成大收益。 这样的对冲组合交易，LTCM在同一时间持有二十多种，每一笔核心交易都有着数以百计的金融衍生合约作为支持。借助于复杂的数学估价模型，LTCM很快在市场上赚得盆满钵满。 成立短短四年，LTCM战绩赫赫，净资产增长速度极快，如图16-1所示，到了1997年年底，资本已达到了七十多亿美元。同时，每年的回报率平均超过40%，1994年收益率达到28%，1995年收益率高达59%，1996年收益率是57%，即使在东亚金融危机发生的1997年，也依然斩获25%的收益率。 LTCM主要靠两大法宝获利，即数学模型和杠杆对冲交易。 在斯科尔斯和默顿的手中，所有的市场数据都被收入计算机数学模型之中，可以通过精确计算控制风险。一旦市场存在错误定价，他们就可以建立起庞大的债券及衍生产品的投资组合，进行套利投机活动。 然而他们忽略了，那个为金融衍生品交易定下基调的B-S模型本身存在着的风险。 在LTCM的投资组合中，金融衍生产品占有很大的比例，但在B-S的期权定价公式中，暗含着这样的假设。 （1）交易是连续不断进行的。 （2）市场符合正态分布。 交易连续意味着市场不会出现较大的价格和行市跳跃，可以动态调整持仓来控制风险。基于这个假设及大数定律，我们很容易发现风险因子的变化符合正态分布或类正态分布。 这是很多定价模型的基本假设，但事实并非如此。 市场并不是连续的，也根本不存在足够的交易来时刻保持风险动态平衡，很多无套利定价模型在这类假设下存在缺陷。历史上出现过很多次跳变现象，市场跳变显示出市场并不符合正态分布，存在厚尾现象。而在B-S期权定价公式中，d1 和d2 作为一种非线性情况的线性风险估值，在价格剧烈变动的情况下同样失去了衡量风险的意义。当系统风险改变的时候，金融衍生工具的定价是具有不可估量性的，远非一个公式可驾驭。 除此之外，在LTCM的数学模型中，它的假设前提和计算结果都是在历史数据的基础上得出的，但是历史数据的统计过程往往会忽略一些概率很小的事件。这些事件一旦发生，将会改变整个系统的风险，造成致命打击，这在统计学上称为厚尾效应， 布莱克-斯科尔斯方程作为投资人的圣杯，开创了衍生工具的新时代，催生了巨大的全球金融产业。但衍生工具不是钱或者商品，它们是对投资的投资，对预期的预期，其造就了世界经济的繁荣，也带来了市场动荡，信用紧缩，导致银行体系近于崩溃，经济暴跌。 然而，方程本身没有问题，数学准确并且有用，限制条件也交代得很清楚。它提供了用于评估金融衍生产品价值的行业标准，让金融衍生产品成为可以独立交易的商品。如果方程得到合理使用，在市场条件不合适情况下严禁使用，结果会很好。 但问题是总有人滥用它。市场中的一些不完美因素将使权证的价格偏离B-S模型计算的理论值，包括交易不能连续、存在避险成本和交易费用等。杠杆作用使金融衍生工具过度投机，贪婪使其违背了投资初衷，成了一场不断膨胀的泡沫赌博。金融业内，人们称B-S方程为“米达斯方程”，认为它有把任何东西变成黄金的魔力，但市场忘了米达斯国王的结局。 B-S方程能定价期权，却无法预测人性，这与牛顿的感慨如此类似。数学可以计算经济运行的轨迹，却没有办法计算人性的疯狂。 枪械：弹道里的“技术哲学”子弹穿过大脑的瞬间，意识活动就会戛然而止。 胡克定律：机械表的心脏方寸之间内的“表里乾坤”，自有天地。 论精确，机械表远不如电子表，号称表中贵族的劳力士也存在±2s的平均日差。 然而，一只双追针万年历的机械表可以拍下295万欧元的天价，足以在瑞士中心区买下一套中等大小的房。 为什么会有这样的事情发生？它后面的商业逻辑是什么？ 因为，机械表具有极高的收藏价值，每一块机械表都是工业时代的智慧结晶。 当你把它放到耳边，嘀嗒嘀嗒，擒纵机构在清晰可闻地工作，那是时间流逝的声音，也是工业时代的回响。透过背透，齿轮精密地咬合、转动，昼夜不停，充盈着一种极致的美感，那是时间流逝的模样。 不到0.007m2 的空间，有20种复杂结构、1366个机芯组件、214个表壳零件。机械表小小的宇宙中暗藏着百年智慧，精密程度超越人类的想象。短短数百年的机械表历史，人类一直对机械的协调与完美进行无限追求。 齿轮间的联动，铜铁上闪耀的光泽，势能与动能的转换，机械在工人手中玩转自如，革命的火种在燃烧…… 钟表是世界上最精密的仪器，每一位钟表匠都是顶尖的工程师。从设计构思、机芯制作，到打磨抛光、镂刻漆绘、珠宝镶嵌，以及最后的组装，耗时数年之久，是当时世界上最巧夺天工的技术。 这样一个貌似只需手艺活的机械表，究竟有着什么魅力，被全世界誉为“最精密的仪器”？ 混沌理论：一只蝴蝶引发的思考混沌，才是这个世界的本质。 混沌的一个重要特征：系统的长期行为对初始条件的敏感依赖性，初值的微小差别会导致未来的混沌轨道的巨大差别。正如中国古人的智慧所言：“失之毫厘，谬以千里。” 此后，洛伦兹也因此被誉为“混沌理论之父”。 蝴蝶效应作为典型的混沌系统，在我们的生活中随处可见。全球气候会在短时间内巨幅变动，股票市场可以毫无预警地崩溃，人类可能一夜之间在地球上灭绝……我们对此无能为力。 究竟是什么样的系统会出现混沌现象？混沌其实是非线性系统在一定条件下的一种状态，而事实上几乎自然界的所有系统都是非线性系统，在一定条件下都会产生混沌现象。 这种现象起因于物体不断以某种规则复制前一阶段的运动状态而产生无法预测的随机效果，混沌过程是一个确定性过程，但很多过程串联起来又是无序的、随机的。 组成这个世界的大多数事物都是混沌的，纷繁而复杂，其整体或局部特征不是简单地用传统的欧式几何语言就可以表述的，处处显现着不可预测性。 事实上，具有自相似性的现象广泛存在于自然界中，这些现象包括连绵起伏的山川，自由飘浮的云彩，以及花菜、树冠，甚至人体的大脑皮层和各种器官。 这种现象最终被曼德勃罗抽象为分形，从而建立起了有关斑痕、麻点、破碎、缠绕、扭曲的几何学。这种几何学的维数可以不是整数，如英国的海岸线是1.25维的分形，众多山川地形的表面是2.2维的分形，洛伦兹吸引子的分形维数则在2.06左右。 更有意思的是，曼德勃罗发现从数学上来看，分形大多数是用非线性迭代法产生的，可由一个简单的非线性迭代公式描述：Z(n+1)=Z(n)2 +C。 式中，Z(n+1)和Z(n)都是复变量，而C是复参数。对于某些参数值C，迭代会在复平面上的某几点之间循环反复；而对另一些参数值C，迭代结果却毫无规则可言。前一种参数值称为吸引子，后一种所对应的现象称为混沌，而所有吸引子构成的复平面子集则称为曼德勃罗集， 曼德勃罗曾经留下了迄今为止最奇异、魔幻的几何图形——曼德勃罗集，史称“上帝的指纹”和“魔鬼的聚合物”。 透过它，人们惊叹地发现许多复杂瑰丽的图形背后原来都是由这么一个简单的图形所构成，都可由这么一个简单的非线性迭代公式来描述。 而混沌也并非纯粹的无序，其所呈现的无规行为或无秩序只是一种表面现象，若是深入它的内心，就能发现其深刻的规律性——分形。 我们把混沌和分形各自分开来看，前者俨如魔鬼，阻挠着人们对真理的探索，带来混乱与挑战；后者俨然是宇宙中的天使，为万物奠定秩序和生机。 但实际上，它们密不可分，混沌是时间上的分形，而分形是空间上的混沌。 它们共同组成了我们的混沌世界，体现着这个非线性系统的两个主要特性：初值敏感性和非规则的有序性。 南美洲亚马孙河流域的那只蝴蝶的行为虽然充满了随机不确定性，但它的内心同样遵循着秩序。美妙的洛伦兹吸引子，实际就是一个具有无穷结构的分形，它是混沌和分形的桥梁，提供了混沌从无序迈向有序的铁证。 所以，自然界实际既有规律又无规律，混沌理论神奇地将有序与无序统一在一起，将确定性与随机性统一在一起，深刻地为我们揭示了这个世界的本质；同时也使科学界长期对立、互不相容的两大体系——决定论和概率论之间的鸿沟正在逐步消除。 20世纪90年代，混沌理论开始走向应用阶段。虽然我们无法对系统的长期行为进行预测，但我们完全可以利用混沌的规律对系统进行短期的行为预测，这比传统的统计学方法有效。 如今，不管是在天气预报、股票市场、语言研究，还是工程技术、生物医药、计算机等领域，我们随处可见混沌理论的身影。例如，经济学家就建立了各种非线性方程模型来研究经济金融市场的各种运动，其中典型的有证券市场股价指数、汇率变化等。汇率不是由简单的确定性过程形成的，经济学家对汇率的不规则运动建模。经济学离不开各种假设，他们假设汇率以一种线性的方式回应决定性变量（自变量）的变化来建立各种模型进行分析，这是经济金融学中常见的线性回归分析，也是计量经济学中的主要内容，主流的认识是汇率运动由白噪声支配，潜在趋势是存在的，并且是随机误差的。 假定一个完全市场化的自由股票市场，它是一个非线性动力学系统，受到多种人为及非人为因素的影响，各因素间存在着大量的非线性相互作用。股市具有自相似性，其混沌系统出在现象、表层、形式上的无序，而在本质、深层、内容上是有序的。通过建立有关股票市场行为的非线性模型，混沌理论为理解股票市场的动态变化提供了新的方法论指导。 20世纪初期，相对论和量子物理的发展打乱了经典力学建立的秩序。 相对论挑战了牛顿的绝对时空观，量子力学则质疑微观世界的因果律。 然而，直接挑战牛顿定律的，还要属南美洲的这只蝴蝶。 蝴蝶扇一扇翅膀，即刻在科学界刮起了一场飓风。相比起量子力学只揭示了微观世界的不可预测性，混沌理论在遵循牛顿定律的常规尺度下，就直指确定论系统本身也普遍具有内在的随机性。 这使拉普拉斯妖无处遁形，最终只能仓皇逃窜。 混沌理论也由此被誉为20世纪自然科学的重要发现。在此之后，人类进一步触及了世界的本质——混沌，开始为无常的命运把脉，并且逐步掌握大自然的一把重要密钥。 凯利公式：赌场上的最大赢家赌徒迷信的是运气，赌场相信的是数学。 赌王何鸿燊接手葡京赌场时，生意蒸蒸日上，但理性的赌王仍然忐忑，请教“赌圣”叶汉：“如果这些赌客总是输，长此以往，他们不来了怎么办？”叶汉笑道：“一次赌徒，一世赌徒，他们担心的是赌场不在怎么办。” 叶汉说的只是心理层面，现代赌场程序方面的设计比叶汉当年要缜密得多，赌场集中了概率论、统计学的数学知识。一个普通赌徒，只要长久赌下去，最终一定会血本无归。所谓的各种制胜绝技，除了《赌圣》电影里的周星星，现实世界里的周星驰都不信。 一个痴迷于发财梦的赌徒永远不会明白，与自己对赌的不是运气，也不是庄家，而是狄利克雷、伯努利、高斯、纳什、凯利这样的数学大师，赢的概率能有多大？ 从表面概率看，这确实是一场公平的游戏，但这种公平是有一定条件的。 大数定律讲究“大量重复的随机现象”，只有足够多次试验才能使硬币正反面的出现次数与总次数之比几乎等于1/2.可具体多少次才算“足够多”？才能够把它用在个人对赌上？ 没有人知道。因为，概率论给出的答案是——无穷大。 谁也不知道无穷大有多大，只知道这是一个令人仰望的数量。可抛硬币次数越少，大数定律的身影就越模糊，可能10次中5正5反，也可能9正1反，也可能10正0反或0正10反…… 现实往往是，在远未达到“足够多”次试验时，你就已经输个精光了。 你身上有100元结果如此，你身上有10000元结果也是如此，就算你身上有100万元结果还是如此，因为你永远不可能有“足够多”的钱。 “输赢概率为50%”，这本身就具有很大的误导性。在硬币抛出之前，50%的概率代表的是可能性；在硬币抛出之后，50%的概率代表的是结果的统计平均值，并不是实际分布值。 这是你对大数定律的误解之一。 把“大数定律”当“小数定律”，觉得游戏是无条件“公平”的，正面和反面出现的频率都为1/2 。这种在潜意识里被奉为圭臬的“公平”，紧接着让你踏入了第二个误解——“赌徒谬论”。 大数定律有一个明显的潜台词：当随机事件发生的次数足够多时，发生的频率便趋近于预期的概率。但人们常常错误地理解为：随机意味着均匀。 如果过去一段时间内发生的事件不均匀，大家就会“人工”地从心理上把未来的事情“抹平”。也就是，如果输了第一把，那下一把的赢面就会更大。 这种你下一把就可以赢回来的强烈错觉，就是“赌徒谬论”。 当你玩游戏连输时，你的心底突然冒出一个神秘的声音，它激动地朝你呐喊：稳住，风水轮流转，下一把你很有可能就要赢了！ 其实，上一把和下一把之间并没有任何联系。 就好比一个笑话：在乘坐飞机时带着一枚炸弹就不会遇上恐怖分子了，因为同一架飞机上有两枚炸弹的可能性是极小的。 两者如出一辙，都把相互独立事件 6 误认为是互相关联的事件。要知道，大数定律的工作机制，可不是为了刻意平衡前后的数据。在这场游戏中，任意两次事件之间并不会相互产生影响。 赌局是没有记忆的，哪怕你曾经输了多次，它也不会因此给你更多胜出的机会。 天真的你，肯定不知道在赌场上有一个解不开的魔咒：赌徒破产困境。 第1把，赢；第2把，赢；第3把……你觉得自己被幸运女神眷顾，一身富贵命。可早在18世纪初，那群热爱赌博的概率论数学家们就提出了那个让赌徒闻风丧胆的破产噩梦：在“公平”的赌博中，任何一个拥有有限赌本的赌徒，只要长期赌下去，必然有一天会输个精光。 我们来看看，为什么那么多长期赌徒都输成了穷光蛋？钱都到哪去了？ 把不同r对应的f (r, n)和f (r, s, p)放到同一个图中进行比较，它形象地揭示了赌徒输光定理的含义：所谓的“公平”赌博，其实并不公平。 在f (r, n)中，随着次数n的增加，赌徒输光的概率会逐渐增加并趋近于1，并且r越小，这种趋势越明显。这说明在“公平”赌博的情况下，拥有更少筹码的赌徒会更容易破产。 而在f (r, s, p)中，图20-2(b)则冷峻而无情地告诉我们：如果希望输光的概率比较小，那么需要每次的赢面p足够大或者是手里的筹码r足够多。 可面前有一位存在感极强的庄家，你真能从他那里虎口夺食，在赢面和筹码中赌一把吗？ 答案，显然是难乎其难的。 第一，没有一个赌场会让你的赢面超过50%。想要每一次的赢面足够大，除非庄家为你作弊，不随机，故意让你赢。 第二，庄家不是赌徒。庄家的背后是赌场，也就意味着庄家相比于你，拥有“无限财富”。你的小金库永远比不过庄家的赌场钱庄，这也意味着，你比庄家更容易山穷水尽。 当然，也许你可以一掷千金，但赌场设置了最大投注额，这并不是他们好心，想保护你免遭破产，他们只是为了自保才设计了一道安全屏障，来抵抗“无限财富”带来的破产威胁。毕竟万一哪天比尔·盖茨去赌场了，一次性砸个几百亿元进去，如果赢了，那赌场老板恐怕真的要哭了。 第三，庄家是“抽水”收入。忘了抛硬币游戏中那毫不起眼的2%了吗？赌徒赢钱后，庄家会从赌徒手中抽取一定比例的流水佣金。这样一来，即使你有一个小金库足以和庄家慢慢磨，打一场持久战，但赢得越多，为庄家送去的“抽水”越多。长此以往，你还是输了，钱都进了庄家的口袋。 最终，庄家赚的钱只与赌徒下注的大小有关。 这世上，天才终究是少数，而“赌神”“赌王”之所以成为普通赌徒难以望其项背的存在，不仅因为他们深谙赌徒心理，也不仅因为他们懂赌场规则，还因为他们懂得该下注多少。 凯利公式 在赌场老板的眼里，世界上或许只有两种人：一种现在是穷鬼，另一种未来是穷鬼。 不过，赌场老板也会有所忌惮，特别是遇到善用数学博弈的高手时。凯利公式在高级赌徒的世界里大名鼎鼎，是顶级高手常用的数学利器。那什么是凯利公式？我们先看一个例子。 赌场操盘者每一次下注的时候，都会谨记数学原则；而作为普通赌徒，除了心中默念“菩萨保佑”外，哪里知道这后面的数学知识？所以，就算你赢得了“财神爷”的支持，也永远赢不了凯利公式。 但这种不公平并非是庄家出老千，现代赌场光明正大地依靠数学规则赚取利润，从某种意义上来说，赌场是最透明公开的场所。如果不是这样，进出赌场不知有多少亡命之徒，何鸿燊哪怕有九条命都不够。 最终结论只有一个：除非100%赢，否则任何时候都别赌上全部身家，即使赢率相对较高也要谨慎。 有人可能说，我又不是与赌场对赌，我只要赢了对手就行了。可无论是你还是对方，赢者都是要给赌场“流水”的，赌的时间一长，两者都是在给赌场打工。 现代赌场自己做庄的可能性很小，他们更依赖数学定理获取利益。对于那些小型赌场和线上赌场，怎么就确定你的对手不是赌场本身呢？ 没有谁能说服一个堕落的赌徒，因为这是人格的缺陷。如果你尚且是一个具有理性精神的人，就别再迷恋所谓的运气。赌徒能够依靠的是“菩萨保佑”，而赌场后面的大师是高斯、凯利、伯努利这样的数学大神。你怎么可能赢得了庄家？ 论理性，没有人能比赌场老板更理性。 论数学，没有人能比赌场老板请的专家更精通数学。 论赌本，没有人能比赌场老板的本钱更多。 如果你想真正赢得这场赌局，法则只有一个：不赌。 贝叶斯定理：AI如何思考？AI是人类最优秀的机器，然而AI永远只是一个机器吗？ 当笛卡儿说出“我思故我在”时，被认为是“人类的觉醒”。 第一个获得公民身份的机器人索菲娅 1 被问道：“你怎么知道自己是机器人？”索菲娅的回答是：“你怎么知道自己是人类？” 机器人会反驳了？这到底是21世纪的福音，还是人类搬起石头砸自己的脚？ 明珠蒙尘，就像凡·高，画稿生前无人问津，死后价值连城。 这个“不科学”的公式现在已经非常流行，就像微积分基本定理全称是牛顿-莱布尼茨公式一样，贝叶斯公式被称为贝叶斯-拉普拉斯公式应更科学。 贝叶斯定理素来以其简单优雅、深刻隽永而闻名，贝叶斯定理并不好懂，每一个因子背后都藏着无限的深意。 它到底是如何为人类服务的？ 对于贝叶斯定理，参照下面的公式，首先要了解各个概率所对应的事件。 条件概率可以理解为后验概率 = 先验概率×调整因子。 生老病死，人生事尔，身体是革命的本钱。在当今医学发达的时代，疾病那只魔鬼似乎难逃科技之手，什么都能检查出来。 可你真的生病了吗？ 一种准确率为99%的试剂，呈阳性，本以为药石无医，可在贝叶斯定理下，可信度也不过2%，原因无它，5%的误报率在医学界可谓是非常高了。都说疾病是魔鬼，可以无情地夺去人类生存的希望，可在这看似冷酷的贝叶斯定理下，不到2%的概率可以说是极大的慰藉了。 今天的贝叶斯理论已经开始遍布各地。从物理学到癌症研究，从生态学到心理学，贝叶斯定理几乎像“热力学第二定律”一样成为宇宙真谛了。 物理学家提出了量子机器的贝叶斯解释，捍卫了弦和多重宇宙理论。哲学家主张科学作为一个整体，其实是一个贝叶斯过程。而在IT界，AI大脑的思考和决策过程更是被许多工程师设计成了一个贝叶斯程序。 最后让贝叶斯定理站在世界中心位置的是人工智能领域，特别是自然语音的识别技术。 随着大量数据输入模型进行迭代和大数据技术的发展，贝叶斯定理的威力日益凸显，贝叶斯公式巨大的实用价值也愈发体现出来。 然而，作为人工智能产品的主要入口，语音识别仅仅只是运用贝叶斯公式的一个例子。实际上，贝叶斯思想已经渗透到了人工智能的方方面面。 AI的第一课，都是从贝叶斯定理开始。因为大数据、人工智能和自然语言处理中都大量用到了贝叶斯公式。 我们无法预测贝叶斯公式与计算机结合的真正威力，因为一切才刚刚开始。贝叶斯公式与AI的结合，这到底是一场科学的革命，还是一场理念的革命？到底是生产力的革命，还是人类在革自己的命？过去的科学家总结出客观的贝叶斯公式，现代科学家用这个公式给AI注射主观基因。这种主观仅仅只是一种数据的表达，还是意识觉醒的一种外在展示？而人类引以为豪的“我思故我在”，真的与AI的“贝叶斯思考”有区别吗？ 三体问题：挥之不去的乌云寻求三体解析解，是人类的梦想。 椭圆曲线方程：比特币的基石人会说谎，但数学不会骗人。 2009年1月3日，中本聪一直从下午忙到黄昏，在赫尔辛基的一个小型服务器上创建、编译、打包了第一份开源代码。尽管这份代码非常简陋，至今仍被很多程序员嘲笑，然而它还是正常运行了SHA256算法、RIPEMD-160算法、Base58编码。在2009年1月3日18点15分，比特币世界的第一个区块（block）被创建。 这一天被比特币信徒称为“创世日”，而这个区块也被称为“创世块”，中本聪则成了“创世主”。这一天标志着比特币的诞生！ 20世纪90年代，互联网的浪潮席卷全球，全世界都为之狂欢。唯有部分密码朋克沉默不语，这个天生与计算机为伍的极客团体，集结了大批计算机黑客、密码学者。 他们拥有敏锐的大脑，没有人比他们更熟悉代码世界。 作为互联网世界最早的原住民和创世者，除了了解互联网对人类未来社会的引领力外，同时也对互联网可能带给人类的负面影响警惕万分，特别是隐私领域被侵犯，这是最让人头痛的地方。在互联网世界，隐私保护问题不仅仅是社会治理结构的问题，如果没有强大的技术力量作为支撑，根本不可能成功保护隐私。 如果互联网世界中的企业日益做大，而后它们成长为虚拟世界的“中心节点”，最后一定会成长为权力中心，成为互联网自由世界的“噩梦”。而其中最让人担心的就是支付体系问题，这里面涉及个人财富的稳私，那如何来保护自己的互联网财富？ 这帮技术自由主义派偷偷成立了一个密码朋克小组，主要目的是捍卫数字世界公民隐私，讨论的议题包括追求一个匿名的独立电子货币体系。 他们都有着这样的共识：如果期望拥有隐私，我们必须亲自捍卫之，使用密码学、匿名邮件转发系统、数字签名及电子货币来保障公民的隐私。 正如印刷技术改变了中世纪的行会及社会权力结构一般，他们相信密码技术方法也将从根本上改变机构及政府干预经济交易的方式。 由此，利用密码学开发一种可以不受任何政治力量或金融力量操控的电子货币摆上了密码朋克小组的议程。 1998年，戴伟提出了匿名的、分布式的电子加密货币系统——B-money。 2005年，尼克·萨博提出比特金的设想，用户通过竞争性地解决数学难题，再将解答的结果用加密算法串联在一起公开发布，构建出一个产权认证系统。 从乔姆的E-cash，到戴伟的B-money，再到萨博的比特金……几代密码朋克怀着对自由货币的向往，像堂吉诃德一般偏执而骄傲，试图成为互联网货币的铸币者，却最终都功亏一篑。 尽管这些理论探索一直并未真正进入应用领域，也长期不为公众所知，但这些研究成果极大地加速了比特币的面世进程。 数字货币的诞生历程，就像是一次接力赛。非对称加密、点对点技术、哈希现金（Hash Cash）这些关键技术没有一项是中本聪发明的，而他站在前人的肩膀上，创造出了比特币。 乔姆、戴伟、萨博三人是冲在前锋的排头兵，非对称加密、点对点技术、哈希现金这三项关键技术则是在货币自由道路上披荆斩棘的利器。 汇集加密圈先驱们的奋战经验，以及累积数代人的技术成果，中本聪借助数学力量建立起区块链世界：以ECC椭圆曲线为钱包基础，以去中心化为精神内核，以SHA256算法为最后的数学堡垒，力图对抗互联网世界中的商业巨头和国家垄断！ 2008年11月1日，在美国金融危机引发全世界经济危机之时，论文《比特币：一种点对点的电子现金系统》被发布。 2009年1月3日，中本聪打包了第一份开源代码，比特币世界的第一个区块被创建。 此后，比特币市值一路水涨船高，虽然过程中也曾多次面临绝境，但一直受到更多人的支持与拥护，因为他们坚定地相信比特币背后的最大支柱——数学。 纵观比特币的方方面面，都与数学密不可分。 （1）哈希算法。 （2）工作量证明机制。 （3）椭圆曲线加密算法。 相比于其他数学应用，椭圆曲线方程在比特币中扮演着关键角色。可以说，没有椭圆曲线方程，就没有比特币的安全性，没有安全性，比特币就不可能建立货币信用。 能建立起这么一套强大的加密系统其实并不容易，这背后充满了博弈与阴谋。 NSA（National Security Agency，美国国家安全局）是加密世界里最大的“魔鬼”，在20世纪90年代末以前，非对称加密技术被视为军用，均在NSA的严密监视下。虽然在这之后，NSA表面放弃了对加密技术的控制，使这些技术得以走进公众领域，并使其广泛应用于网络通信。但实际上NSA仍在干涉加密领域，通过对加密算法置入后门，然后将被置入后门的算法推广为标准算法，轻而易举地获取使用者的信息。 有趣的是，中本聪并不信任NSA公布的加密技术。2013年9月，爱德华·斯诺登曝料NSA采用秘密方法控制加密国际标准，加密货币采用的椭圆曲线函数可能留有后门，NSA能以不为人知的方法弱化这条曲线。所幸，中本聪使用的不是NSA的标准，而是选择了Secp256k1椭圆曲线，它是一条随机曲线，而不是伪随机曲线。 比特币客户端中的核心是私钥，拥有私钥就拥有私钥对应比特币的使用权限，所以，加密钱包的核心对象显而易见，就是私钥。 （1）输入：密码。 （2）中间生成：主密钥、主密钥密文生成参数、主密钥密文、私钥密文。 （3）最终保留：主密钥密文生成参数、主密钥密文、私钥密文。 （4）内部输入：私钥。 比特币使用椭圆曲线算法生成的公钥和私钥，选择的是Secp256k1曲线。SHA-256十分强大，它不像从MD5到SHA-1那样增强步骤，而是可以持续数十年，除非存在大量突破性攻击。也正是因为这样一套非常完备的加密体系，比特币在初期就得到了很多极客、技术派、自由主义者和无政府主义者的信赖。他们相信数学，而不是相信中本聪。 当然，比特币钱包的加密体系虽然非常安全，但整个比特币生态并非无懈可击。在算力争夺战争中，比特币的中心化早已远远超出了法币的中心化。一次次利益纷争的背后，实际是一场场权力与利益的博弈。 在这一过程中，总有人试图成为权威，同时也让数学构建货币信任机制的发展充满了层层阻碍。 比特币本质是一种数学 从诞生初衷上看，比特币以解决双花问题及拜占庭将军问题为目标，试图以建立点对点的电子现金系统让一切回到货币发展的本质。从实现基础上看，比特币就是建立在已有的数学理论之上；从安全保障上看，无论密钥对生成，还是私钥签名和签名验证，都离不开椭圆曲线函数的加固保障。将这三者浓缩为一点，数学就是比特币的基石。 虽然自由主义者认为比特币承载了“此物一出天下反”的理想，但实际上比特币仍然只是数学在互联网世界的一种延伸。无论赋予它多少荣耀与光环，它仍然只是一段开源程序、一种密码算法、一个P2P的电子支付系统、一台世界性的计算机、一个人类新的底层操作系统。与TCP/IP 、支付宝、P2P一样，其最大的意义就是为人类服务，否则最终只会沦为科技先验者的实证游戏。 2010年12月12日，中本聪在比特币论坛上发布最后一个帖子，随后活动频率逐渐降低。 2011年4月，中本聪发布最后一项公开声明，宣称自己“已经开始专注于其他事情”。 此后，中本聪消失，再未现身。 传奇也好，传说也罢，起源于数学世界的比特币，已经开启了它的创世之旅。","categories":[{"name":"professional","slug":"professional","permalink":"http://muxueweiyu.github.io/categories/professional/"},{"name":"math","slug":"professional/math","permalink":"http://muxueweiyu.github.io/categories/professional/math/"}],"tags":[{"name":"美","slug":"美","permalink":"http://muxueweiyu.github.io/tags/%E7%BE%8E/"}]},{"title":"法律就业","slug":"professional/法律/法律就业","date":"2021-04-28T13:21:39.000Z","updated":"2021-04-30T12:55:16.220Z","comments":true,"path":"2021/04/28/professional/法律/法律就业/","link":"","permalink":"http://muxueweiyu.github.io/2021/04/28/professional/%E6%B3%95%E5%BE%8B/%E6%B3%95%E5%BE%8B%E5%B0%B1%E4%B8%9A/","excerpt":"想到了，就写一些 从身份到契约","text":"想到了，就写一些 从身份到契约","categories":[{"name":"professional","slug":"professional","permalink":"http://muxueweiyu.github.io/categories/professional/"},{"name":"法律","slug":"professional/法律","permalink":"http://muxueweiyu.github.io/categories/professional/%E6%B3%95%E5%BE%8B/"}],"tags":[{"name":"思考","slug":"思考","permalink":"http://muxueweiyu.github.io/tags/%E6%80%9D%E8%80%83/"}]},{"title":"专业素养","slug":"professional/effience/专业素养","date":"2021-04-28T13:20:21.000Z","updated":"2021-04-30T08:07:06.571Z","comments":true,"path":"2021/04/28/professional/effience/专业素养/","link":"","permalink":"http://muxueweiyu.github.io/2021/04/28/professional/effience/%E4%B8%93%E4%B8%9A%E7%B4%A0%E5%85%BB/","excerpt":"《布拉格宣言》：走向具有信息素养的社会 《亚历山大宣言》：信息素养是终身学习的核心","text":"《布拉格宣言》：走向具有信息素养的社会 《亚历山大宣言》：信息素养是终身学习的核心 信息素养《布拉格宣言》认为，信息素养是一种能力，它能够确定、查找、评估、组织和有效地生产、使用和交流信息，并解决面临的问题。 《亚历山大宣言》指出，信息素养和终身学习是信息社会的灯塔，照亮了通向发展、繁荣和自由之路。信息素养是终身学习的核心。 两大宣言：彰显信息素养的时代意义 （1） 信息素养是人们有效参与信息社会的一个先决条件，是个人、企业、地区和国家竞争优势的关键要素。 （2） 信息素养是发展当代社会经济，提高教育、健康和人类服务质量等的重要支撑，是数字化生存的关键性基础。 （3） 信息素养是终身学习的核心。它能使人们在整个一生中有效地寻求、评价、利用和创造信息，以实现个人的、社会的、职业的和教育的目标。 （4） 信息素养是数字社会的一项基本人权，它能促进所有国家的社会内涵。终身学习可以使个人、团体和国家有能力实现其目标，同时可以利用日益变化的全球环境中不断涌现的机会共享利益。终身学习可以帮助人们及其所属机构应对技术、经济和社会的挑战，克服不利条件，促进所有人走向共同发展。 （5） 信息素养是适应学习、工作和生活需求的必要基础。 面向终身学习：信息素养的内涵、演进与标准 识别需求资源获取学到一招，豆瓣租房 自如 便民查询 资源变现 麦肯锡 波士顿咨询集团 贝恩 艾瑞网 腾讯企鹅智库 阿里研究院 CBNData 中国社会科学院 国家统计局官网 中国经济信息网 Wind 信息处理整合应用明显发觉对于美的感知能力越来越强。","categories":[{"name":"professional","slug":"professional","permalink":"http://muxueweiyu.github.io/categories/professional/"},{"name":"effience","slug":"professional/effience","permalink":"http://muxueweiyu.github.io/categories/professional/effience/"}],"tags":[{"name":"专业，素养","slug":"专业，素养","permalink":"http://muxueweiyu.github.io/tags/%E4%B8%93%E4%B8%9A%EF%BC%8C%E7%B4%A0%E5%85%BB/"}]},{"title":"中国网络文学史","slug":"professional/effience/中国网络文学史","date":"2021-04-28T09:22:45.000Z","updated":"2021-04-28T13:11:36.392Z","comments":true,"path":"2021/04/28/professional/effience/中国网络文学史/","link":"","permalink":"http://muxueweiyu.github.io/2021/04/28/professional/effience/%E4%B8%AD%E5%9B%BD%E7%BD%91%E7%BB%9C%E6%96%87%E5%AD%A6%E5%8F%B2/","excerpt":"全面梳理了二十年来中国网络文学发展的缘起和历程，对作家作品进行了全面的概述与分析，对网站运营和产业发展状况进行了全面的总结，同时从读者阅读的角度、理论批评的角度对网络文学亚群体的基本情况进行了系统的归纳与清理，对正确认识与估价网络文学发展二十年来的得与失，全面把握网络作家队伍的整体状况，准确研判网络文学未来发展的趋势，都有着重要的意义和价值。","text":"全面梳理了二十年来中国网络文学发展的缘起和历程，对作家作品进行了全面的概述与分析，对网站运营和产业发展状况进行了全面的总结，同时从读者阅读的角度、理论批评的角度对网络文学亚群体的基本情况进行了系统的归纳与清理，对正确认识与估价网络文学发展二十年来的得与失，全面把握网络作家队伍的整体状况，准确研判网络文学未来发展的趋势，都有着重要的意义和价值。 中国网络文学的时代隆起寻找互联网初心——全球互联网先驱同话“互联网50年” 网络文学，顾名思义，由“网络”与“文学”组成。早期网络写手李寻欢曾言：“网络文学的父亲是网络，母亲是文学。”因此，要讨论汉语网络文学的诞生，就离不开对“网络”发源地的追问。 源于海外，起于本土 “全民写作”机制下的网络文学热 二十年网络文学发展大格局 从顶层设计到管理平台 从注意力到影响力 网络文学改变了什么 改革开放与网络文学二十年 文学网站平台 二十年文学网站发展的几个阶段 大型网站的前世今生 中小型文学网站的发展处境 门户网站唱响文学频道 文学机构网站的主流发声 移动阅读犃犘的异军突起 网络作家阵容 从“写手”到“作家” 网络作家的代际衔接与生存状态 “大神”的天空 “扑街写手”的“塔基”之功 继承文学传统，呼唤“工匠精神” 网络文学作品 网络类型小说一统江湖 海量生产中的“现实”导向 榜单标杆：主流化与精品化 网络诗歌与网络散文 其他类型网络文学作品 网络文学产业经营 商业模式的探索之旅 “犐犘热”与“网络文学＋” “粉丝经济”与产业链上的“精耕细作” 商业化的“机”与“危” 两种效益的博弈与规制 网络文学阅读 网络文学阅读 不断增加的“粉丝群” 犘犆端、移动阅读与“听书族” 付费·打赏·评论 市场细分与青少年亚文化消费 网文出海，世界“圈粉” 网络文学理论批评 网络文学批评的三股力量 二十年来的理论批评成果 网络文学理论批评探讨的主要问题 理论批评面临的困境 女性及少数民族网络文学 二十年女性网络文学景观 少数民族网络文学的成就和局限 网络文学的贡献、局限和发展趋势 网络时代的文学新锐 二十年网络文学的“短板” 网络文学发展的新趋势 网络文学大事件 文学网站类 网络作家类 网络作品类 网络文学活动类 理论批评类 学术论争类 政策法规维权类","categories":[{"name":"professional","slug":"professional","permalink":"http://muxueweiyu.github.io/categories/professional/"},{"name":"effience","slug":"professional/effience","permalink":"http://muxueweiyu.github.io/categories/professional/effience/"}],"tags":[{"name":"文学，历史","slug":"文学，历史","permalink":"http://muxueweiyu.github.io/tags/%E6%96%87%E5%AD%A6%EF%BC%8C%E5%8E%86%E5%8F%B2/"}]},{"title":"做二休五","slug":"professional/工作/做二休五","date":"2021-04-28T05:42:01.000Z","updated":"2021-04-28T07:25:56.123Z","comments":true,"path":"2021/04/28/professional/工作/做二休五/","link":"","permalink":"http://muxueweiyu.github.io/2021/04/28/professional/%E5%B7%A5%E4%BD%9C/%E5%81%9A%E4%BA%8C%E4%BC%91%E4%BA%94/","excerpt":"原来我是在隐居啊。 “虽然有大量的书不断推出，但不用尽力去追逐。跟自己有缘分的书，一定会在某处与你相遇。”","text":"原来我是在隐居啊。 “虽然有大量的书不断推出，但不用尽力去追逐。跟自己有缘分的书，一定会在某处与你相遇。” 隐居，就是这种感觉一天的生活起床，而且是早起 一旦过着清闲的生活，人也会跟着变懒。若自己不定下规则，没人会帮你完成。所以我这个习惯，或许可以说是一种生活的美感吧。 早上起床后先用冷水洗脸，用力拍打脸颊。接着开窗户通风。 接着跟着六点半NHK广播体操一起活动筋骨。 当人运动到全身的肌肉后，就会通体舒畅。 早餐：米饭配味噌汤及酱菜。 拌入盐后静置一晚即可食用的基本型快速腌菜。 不想吃饭的时候，我就吃一两片全麦吐司 每天的例行公事先做完，就不会对接下来要做什么事感到困扰，心情就会很轻松。 不论做什么，只要想到“世界上的人这时应该都正搭着爆满的电车通勤吧”，原本平凡的早晨，在隐居生活中反而显得更加甜美了。 果然还是隐居好。 午饭，冬天就是汤乌冬面，夏天则是冷荞麦面。 加太多料会搞不清楚自己在吃什么，所以荞麦面里我只会加入一两种蔬菜。 广播的好处在于可以一边做别的事一边听，十分有效率。 下午的自由时间 下午的自由时间，我有时会散个步，顺便买东西，或是在附近的公园做做日光浴、拔拔野菜。心血来潮时也会去喜欢的店家逛逛。 我很喜欢走路，每天至少会走一个小时以上。在觉得快要迷失自我时，散步是个好方法。 重点在于避开信息泛滥的车站附近等地，前往河川、公园等大自然的场所。专注地看着天空、树木或水流等自然事物。 晚餐：如果没有什么特别的事，我会在傍晚五点左右吃晚餐。 在睡前进食确实是蛮伤胃的，如果早点吃晚餐，肚子也会轻松不少。晚上确实地断食，让胃休息，这或许是先人们的智慧呢。 边听广播边洗碗，做做瑜珈之类的轻运动后就上床睡觉。 基本上是早睡早起的模式。 因为这种循环已经成了习惯，所以我几乎每天都过着同样的日子。 由于没有什么非做不可的事，我会依照当天的心情偶尔调换顺序。 虽然如此，我还是想在有限的人生里有效地运用时间，所以我会花心思同时做两件事。 随心所欲地生活，不想做的事就不要做，大致就是这样。 一月已经过半，附近的梅花开始绽放；而暖和的日子里，隔着玻璃窗能看见日照之处隐隐浮现出海市蜃楼的景象。不用翻开日历，我就先察觉了季节的变换，这让我十分心满意足。 时光在转瞬间流逝。 什么是“隐居”？遗世幽居、辞官、辞职等从世间隐退，随兴生活。 专栏作家天野佑吉的《隐居大学》 享受人生是隐居的最高旨趣。 若这就是隐居的精髓，那么隐居的难度就比想象中更低了。 一个月的生活费约7万日元这里的7万日元，除了房租、水电煤气费及饭钱外，还包含了医疗费、税金、保险费和交际费等所有生活上的支出。 只要有心的话，年轻单身男子的独居生活，只花费到这种程度也不会太难做到。这样的感觉有点像是将就的穷学生呢。 只要每个月的收支不是负的就行，我的理财观就是如此轻松。 节省不是我的目的，所以我不会特地去挑战那种生活，如果真的想尝试，也许仅花日币6万元左右我也活得下去。 我没有钱，过着清贫的生活，有时吃野草度日；取而代之的是从过度疲劳中解脱了。 善加“利用自己”，不花钱也OK节约生活的重点，在于自己做得到的事情要尽量亲力亲为。虽然没钱，但因为有大把的时间，就花时间来做吧。 有趣的是，人一旦没钱了，灵感便会浮现。 每餐自理的话，伙食费就能降到外食的四分之一左右。 小苏打是可用于家庭清洁的万能清洁剂，把小苏打加水调成糊状，就能清洁不同程度的污垢，不必买其他各种清洁剂，非常方便。 清扫的重点在于，不要抱持着“非打扫得一尘不染不可”的心态。 洗衣服 买衣服时我会选择可以在家洗濯的材质。 一定要送洗的材质（例如羽绒服），就尽量不买。 不使用柔顺剂 小苏打就是这样，毫不执着，十分干脆好相处，不会纠缠不休，让我头痛。 理发 每个月都用它自己理一次头发。 对着浴室的镜子，后面再放一座全身镜，就能看着后脑勺自己理发，连脖子的发际线处都能理得很干净。 购物 我买东西的重点不在于“想要、不想要”，或是“有的话很方便、没有的话很不方便”，而是用“需不需要”来判断。 如果我有时间或兴致，还会想到这样的购物能带给社会什么样的利益，或是能反馈给社会些什么。 每当这样思考时，乍看便宜、其实综合来讲成本很贵的东西，真的会让我领悟到“免费的最贵”这个道理。 例如决定了想要的东西，如果确定那里有卖倒也无妨，但如果是特地跑到遥远的Outlet去看有没有卖，这种事我是一定不会做的。 交通 原则上我是不坐电车跟公交车的，通常我会把活动范围控制在走路或骑自行车可以到达的范围内，如此一来还可以运动。 一般来说，坐电车五站内的距离，我都会骑自行车。如果是坐地下铁的话，距离大概是约两倍的十站左右吧。在这段范围内，想处理的事应该都可以达成。 而且光想到油钱、停车费、保养费和汽车税等养车的费用，我就敬而远之了。 对生于1970年以前的泡沫世代或更老一辈的人来说，像我们这种没什么物欲的世代，是很“可怜”的。 的确我个人是觉得没有汽车、摩托车、房子，也不需要出国旅行、品味烟酒声色也能活得下去，但要说什么这很可怜，我就不敢肯定了。 运动 就是散步跟骑自行车这类，独自一人就做得到的事。 特别是走路的效果，从很早以前就备受好评了。 散步时可以适时接收到一些外在信息，也能早早察觉花朵的绽放、日落的时间等。此外，早上做广播体操，以及睡前做简单的瑜珈，这些也都不用花半毛钱。 实际做一遍广播体操就会知道，它在非常短的时间内可以动到全身的肌肉、关节，安全又有效率的运动非它莫属了，而且又是免费的。 重点是每一个动作都要确实地做！ 虽然会有一点累，尤其是肩膀四周，但这样也能知道日常生活里自己哪个部位是常用或不常用的。 广播体操是与身体的交流。 浴缸旁边只放了肥皂和洗发水。 洗手台上放了牙刷、牙膏、漱口水，以及刚刚提到的橄榄油，基本上就这么简单。在打扫时也非常轻松！ 发掘隐居时的兴趣为了不用每日忙乱也能尽情生活，发掘不用花钱，而且一个人也可以沉醉其中的兴趣是上上策。 首先是读书。 读书是一个人就可以做得到的，不用花钱、不用看时间或场所，而且客观来说，明明只是单纯地消磨时间，但似乎还能让自己变聪明，堪称为最强的兴趣。 虽然实际上并不会因为看了书就变聪明，这点我最知道了。 读书时，我会尽量善用图书馆。图书馆是知识的宝库，让我们了解原来世界上还有这么多事是我们所不知道的。 有本名叫《去图书馆吧》的书，作者为宫田升，出版社是MISUZU，它是一本告诉我们如何利用图书馆的好书。 我以“书即是相逢”为信条，当想要看某本书时会立刻把握当下的时间点。 对待书的态度，或许跟与人交往的方式类似也说不定。 我跟某人见了一次面之后，如果觉得对方和我不投缘，之后便不会再见。 书本也是一样，如果看了前十页觉得无聊，我就不看了，立刻还回图书馆。 这种凭第一印象决定要不要放弃的感觉十分相似。 注定会相遇的人或是书，因为最后总是会自然地碰上，所以一切都不用拘泥也没关系，这是我的见解。 假日人很多，所以我不想外出。 轻松应对：时尚篇现在比起乐趣，我更在意的是方便。 话虽如此，但人还是会有自我意识过剩的时期呢。那段时期会把“自己要和别人不一样”视为人生最重要的课题，把全部的心力都放在这上面。 轻松应对：人际关系篇来者我会适时地抗拒，离去的东西我则不会再去追求。 就算是家人或朋友，若是太过亲密就会忘了分寸，在意一些微不足道的小事，而说出多管闲事的话。 但若是保持适当的距离，就不会忘了最基本的道理——这是对方自己决定的事。 随着年纪渐长（其实从年轻时就开始了），我越来越觉得很多事非常麻烦。 但每当我自己一个人独处时，就会神采飞扬、精力充沛。 不是“如鱼得水”，而是“如隐居得孤独”。 真正会留下来的人，还是会留下来的。我的人生中即使只剩下两三人，也还是可以感到快乐。 以前我就很喜欢独处，完全不会觉得难受。 前世是和尚？其实前世占卜什么的，只要用在对自己有利的方面就好了对吧。完全不用介意啊。 隐居吃什么一忙起来便忽略掉的事物待在不正常的地方久了，就会觉得那很正常。明明是很可怕的事，现在却好像一点也不稀奇。 一闲下来，对吃就感兴趣了过去，早餐我也只以甜点、面包、速食面或便利店便当填饱肚子就算了。 但在网络或图书馆看了书和数据之后，我开始想要吃对身体有益的食物。 花了蛮长的时间尝试各种料理后，终于决定以基本的一菜一汤为原则，过粗食生活。 粗食意外地方便就是方便。 质朴就是基本，不用做多道料理 只要一菜一汤就能解决，实在是太方便了！ 清洗的碗盘变少 做的菜色少，需要清洗的烹饪用具和碗盘自然也会减少。 而且因为不太使用油，所以几乎用不到洗洁精。 不用一直洗洗刷刷实在很方便，又几乎不必买洗洁精，海绵也可以用很久，相当经济。 不用烦恼吃什么或买什么 为了健康而长久忍耐，吃着自己讨厌的食物，可能在精神方面反而会生病吧。 既然现代社会有如此多样化的思想和健康法，那么不仅限于食物，只要选择适合 “人有千百种”，能抱持这样宽容的想法最快乐了。 健康虽然是很重要的事，但为了它而让自己被牵着鼻子走，心理是不会健康的。 如果把健康想成是粗食的副产物，就会很快乐了。 粗食的优缺点 变得早睡早起 不必抽烟了 慢性病症状减轻 精神上的安定 过剩的欲望会减退 简而言之，就是没有欲望了 草食动物总是给人担惊受怕、四处逃窜的印象。 但我生为人类，极少数时候仍然会有一定要做、非迎头而上不可的事。 那时，奋起精进的动力来源就是吃肉了。必要的野心及向上精神是不可或缺的。 我主要是草食，偶尔必要时才是肉食。 食即色也 作家开高健曾说：“美食与好色无法两立。” 健康是最好的节约方式隐居不是一天造成的。 美味的野草生活但如果因此而食物中毒，我可不负责任喔。 某周的食谱体脂超低 隐居之前的日子只是觉得：“哦，原来人生就是这样啊。” 表达开始退化如果一直待在日本，是很难放弃这种让人喜爱的生活的。 这样说来，是不是该去环游世界了呢。 二十岁之后的人生要用减法我做什么事都是这样，只要想做，就会在时机成熟的时候执行。 长辈们都会说，年轻人有大好的未来，但我不这么认为。 曾经有打工的伙伴突然因为交通事故而过世。 而且他年纪还小我两岁。 所谓的人类，原来并不是依照顺序走的啊…… 旅行与茧居的共通点我好像不是一个人旅行的。 能去环游世界，真的是太好了。 最大的收获就是让我明白，无论是一个人的旅行，或是宅在家的生活，都是因为有大家的帮忙我才做得到。 表面上看来，我可能是足不出户没错，但制造出那种环境的，是我和周围的其他人。 现在回想起来，其实是因为他人的力量，我才能继续旅行下去。 虽然是理所当然的事，但不是很值得感谢吗？ 从这层理由上看来，茧居也是同样的。这是我的新发现。 如果只有只身一人的话，无论是旅行或茧居，都是办不到的。 如果一直那样茧居下去，我可能会变成独居老人，一想到这点我就觉得非常不安。 到目前为止，我没做过什么努力，但依然活得下去，这都是多亏了我身边的人。 他人力量万岁！ 漫无目的地去了东京虽然听人命令行事很轻松，但我喜欢自己做选择后无法怪到他人头上、也没有后路的那种紧张感。 就算我的生活宗旨是轻松，但这种自己决定的乐趣是无法让步的。 无论何时何事，我都想要自己选择。 此外，我个人觉得还有一件事非常重要，那就是不要马上划分黑白对错。 虽然是看似理所当然的事，但正因如此，能够求得温饱、每天快乐度日的话，那么无论在哪里做什么应该都是一样的吧。我是这么想的。 隐居前的一番摸索刚毕业的年轻人，每天工作12小时以上，星期六和假日也要去上班，星期日则哪里都不去只在家里睡死。直到现在，这种故事我还是偶尔会从本人或其家人口中听到，但我还是要强烈地声明： 这种事一点也不正常！ 下定决心隐居的契机就算工作成那样，我还是过得一点也不宽裕，这到底是谁的问题？ 明明我要求的完全不多，却过得如此痛苦，这到底是为什么？ 职场跟这个漠然的社会，别说保护我们了，根本只有夺走我们的时间、金钱和余裕不是吗？ 有必要为它这样拼命工作吗？ 我真的是不懂。 因此我渐渐淡出社会，走向隐居。 在二十多岁时正式隐居来到东京三年之后，我才达成现在这种生活。 俗话说，有志者事竟成，果然要在社会边缘闭关三年，才懂这句话的真义啊。 如此苦行下去，状态似乎会变得更差。 与其花功夫喜欢自己讨厌的人，还不如不要理他，转而更加珍惜身边亲近的人呢。 没有痛苦的回忆，能够每天快乐地生活，这才是最理想的啊。 隐居的二三事为什么没钱就无法活下去？没有钱就没有自由，这实在是太不自由了！ 我一直很想知道没有钱也能自由的方法。 造成生活困苦的理由虽然有很多，但追究到最后，一定都是归结于“因为没有钱”。 我知道标准答案会是“那就再多努力工作吧”，但除了我以外，大家都工作过度了啊。 就算这样钱还是不够，这不是个严重的问题吗？ 所以我在想，除了金钱以外，是不是还有其他方法可以解决各种苦恼。 而所谓的隐居，也算是一种摸索“不花钱似乎也可以活下去的方法”的旅程。 跑去见流浪汉就算如此，人竟然真的能这样完全不工作、只靠别人给予也活得下去啊…… 幸福真的是依每个人的标准而有所不同，但我能拥有自己的小小城堡真的很好。 都市的各种诱惑、隐居以外的全部，都在唾手可及之处，但隐居的人却有意识地与之保持距离生活着。为了这种生活，偶尔还是要工作，而且不会讨厌工作。 并非完全舍弃，而是与社会保持最低限度的关系，这就是隐居的重点。 降低自己的生活水平在租房信息中很受欢迎的昂贵房子，都有共通点呢。 位于市中心、离车站近、随时有警卫看守、从高楼可以看得见全景、由最新锐时尚的设计师设计、具备随时可使用的宴会厅、宴会时有从一流饭店派过来的礼宾部人员，随时提供舒适奢华的生活之类的。 所以要找便宜的房子，就用相反的条件去筛选就可以了。 不是位于市中心的高楼大厦。离车站远一点，但用走的也可以。附近没有便利店或超市也可以。破旧公寓也可以。一楼也可以。合租也可以，只要有厨房、卫浴、洗衣机，总之只要日常生活设备都齐全就可以了。 但公司在市中心……其实只要不找市中心的工作就好了。 做做伏地挺身或锻练腹肌的运动，都会瞬间让体温上升，我很推荐。 做二休五，生活无虞因此，像我觉得每天上班太辛苦，但要是完全不工作、与社会脱节又会不安心，所以一星期工作两天应该是刚刚好。 既可以赚到让自己无忧无虑生活的最低限度的金钱，工作得到的满足感也是一帖精神上的安定剂。 隐居和飞特族有什么不同？只是茫然的过着打工生活的人，以及退休后漫无目的地生活的人，我觉得都不算隐居。 或许可以说，隐居在某种程度上需要对自己有一种觉悟吧。 私房储蓄是必要的人生会发生什么事谁也不知道。 生活不是只有自己一个人的事，也是社会的事……没有自立能力的人，就只能依赖他人、造成别人的负担。 要生活，又要不花钱，没有这么好的事。 稍微有点存款的话，就能够安心隐居了。 至于担心经济是不是景气什么的，这已经超出个人做得到的范围了，所以不用因为基于责任感而要去承受。 隐居不花费社会资源我几乎不去医院。 为了让自己不要生病，我会花精力和金钱去注意身体状况。而且因为人类有自然治愈的能力，所以在某种程度上，是能够靠自己治好的。 21世纪的隐居・租一间在郊区的便宜小公寓 ・一星期只工作两天 ・不带给别人麻烦 ・朋友都是精挑细选过的所以很少・没有手机 ・也没有电视 ・不社交 ・偶尔会有进城的小奢侈 ・基本上没有欲望 ・不坚持己见 ・但坚持跟现代社会保持一点距离・最后是要热爱和享受自己的生活 就是这种感觉。可谓“人畜无害”！ 生活中的起居、玩乐或工作，全部的决定权都在自己。 再也没有比这更有趣的事了。相对来说，全部的事都必须由自己决定，没有谁会告诉你哪些是你该做的。 隐居的自言自语无论发生什么事，都不要马上下判断。 不要当作个人的事情来接纳，要用更宏观的角度来看待事物。 这样无论是景气也好、失败也罢，眼前发生的事带来的喜忧就会大幅减低，变得非常自在。 室町时代的剧作家观阿弥说过：“人生有雄时有雌时。” 长长的人生里，有一帆风顺的成功时刻（雄时），也有做什么都不顺利的时候（雌时）。 可能也有像隐居这种难以言表的时刻。 因为世事无常，不可能永远一直这样下去对吧。 那时，就只能顺应情境去度过，快速转换为半放弃的心态。 无论如何，人生都只是场玩乐而已，也许前方就是下一次的隐居呢。","categories":[{"name":"professional","slug":"professional","permalink":"http://muxueweiyu.github.io/categories/professional/"},{"name":"工作","slug":"professional/工作","permalink":"http://muxueweiyu.github.io/categories/professional/%E5%B7%A5%E4%BD%9C/"}],"tags":[{"name":"隐居","slug":"隐居","permalink":"http://muxueweiyu.github.io/tags/%E9%9A%90%E5%B1%85/"}]},{"title":"深沉的美","slug":"professional/仰望星空/深沉的美","date":"2021-04-14T08:30:33.000Z","updated":"2021-04-15T07:27:34.772Z","comments":true,"path":"2021/04/14/professional/仰望星空/深沉的美/","link":"","permalink":"http://muxueweiyu.github.io/2021/04/14/professional/%E4%BB%B0%E6%9C%9B%E6%98%9F%E7%A9%BA/%E6%B7%B1%E6%B2%89%E7%9A%84%E7%BE%8E/","excerpt":"100,000 StarsAn interactive 3D visualization of the stellar neighborhood, including over 100000 nearby stars. Created for the Google Chrome web browser.","text":"100,000 StarsAn interactive 3D visualization of the stellar neighborhood, including over 100000 nearby stars. Created for the Google Chrome web browser. Making 100,000 Stars 十年之前就可以做到这一点了 Partiview cosmos HackTheUniverse Tutorials google sky","categories":[{"name":"professional","slug":"professional","permalink":"http://muxueweiyu.github.io/categories/professional/"},{"name":"仰望星空","slug":"professional/仰望星空","permalink":"http://muxueweiyu.github.io/categories/professional/%E4%BB%B0%E6%9C%9B%E6%98%9F%E7%A9%BA/"}],"tags":[{"name":"星空","slug":"星空","permalink":"http://muxueweiyu.github.io/tags/%E6%98%9F%E7%A9%BA/"}]},{"title":"法律启蒙","slug":"professional/法律/法律启蒙","date":"2021-04-08T12:34:55.000Z","updated":"2021-04-14T08:30:30.778Z","comments":true,"path":"2021/04/08/professional/法律/法律启蒙/","link":"","permalink":"http://muxueweiyu.github.io/2021/04/08/professional/%E6%B3%95%E5%BE%8B/%E6%B3%95%E5%BE%8B%E5%90%AF%E8%92%99/","excerpt":"法律与人生","text":"法律与人生 我们有社会吗？只有政府","categories":[{"name":"professional","slug":"professional","permalink":"http://muxueweiyu.github.io/categories/professional/"},{"name":"法律","slug":"professional/法律","permalink":"http://muxueweiyu.github.io/categories/professional/%E6%B3%95%E5%BE%8B/"}],"tags":[{"name":"思想","slug":"思想","permalink":"http://muxueweiyu.github.io/tags/%E6%80%9D%E6%83%B3/"}]},{"title":"数学史","slug":"professional/math/数学史","date":"2021-04-08T12:33:13.000Z","updated":"2021-04-11T15:07:25.592Z","comments":true,"path":"2021/04/08/professional/math/数学史/","link":"","permalink":"http://muxueweiyu.github.io/2021/04/08/professional/math/%E6%95%B0%E5%AD%A6%E5%8F%B2/","excerpt":"算术有一种非常大的、让人得以提升的效果,迫使头脑去思考抽象的数。 算术、几何、音乐和天文——作为文科教育的核心。四学科加上三学科(语法、修辞和芝诺的逻辑)所组成的。传下来的传统，决定了西方教育传统的方向。","text":"算术有一种非常大的、让人得以提升的效果,迫使头脑去思考抽象的数。 算术、几何、音乐和天文——作为文科教育的核心。四学科加上三学科(语法、修辞和芝诺的逻辑)所组成的。传下来的传统，决定了西方教育传统的方向。 123456789101112131415161718192021222324252627282930有一次,托勒密问欧几里得,是否有比研究 《几何原本》更简捷的途径,可以获得几何学的知识。对此,欧几里得答道:不存在通向几何学的王室大道。阿基米德的头脑,比荷马的头脑更有想象力。在我看来,所有证据似乎都表明,阿波罗尼奥斯是希腊数学天文学的开山鼻祖。当我兴之所至地一圈圈追踪天体的来回往复时,我的双脚不再触及这片大地,我站在宙斯本人的面前,尽情享用诸神的美味。蜜蜂……凭借某种几何学的先见之明……知道六边形比四边形和三角形更大,耗费同样的材料可以储藏更多的蜂蜜。一种珠贝与酸枣的混合物……或者说是昂贵的水晶与普通卵石的混合物。忽视数学会伤害所有的知识,因为,对数学无知的人,不可能了解其他科学或这个世界上的其他事物。数学,是科学不可撼动的基础,是人类事务丰富的利益之源。带领数学从鸿蒙初辟走到牛顿时代,他所做的工作几乎占到一多半。我想,领悟了二次或三次流数、二次或三次微分的人,大可不必对上帝身上的任何一点过于拘谨。数学的进步和完美,跟国家的繁荣密切相关。数学是科学的女王,而数论是数学的女王。任何数学分支,不管多么抽象,有朝一日都要应用于真实世界的现象。在大多数科学领域,一代人总是摧毁上一代人所构建的东西,一代人所确立的东西总是被下一代人所毁灭。只有在数学领域,每代人都是在老建筑之上构建新楼层。","categories":[{"name":"professional","slug":"professional","permalink":"http://muxueweiyu.github.io/categories/professional/"},{"name":"math","slug":"professional/math","permalink":"http://muxueweiyu.github.io/categories/professional/math/"}],"tags":[{"name":"思维，逻辑","slug":"思维，逻辑","permalink":"http://muxueweiyu.github.io/tags/%E6%80%9D%E7%BB%B4%EF%BC%8C%E9%80%BB%E8%BE%91/"}]},{"title":"SQL","slug":"Program/SQL/SQL","date":"2021-04-07T01:41:52.000Z","updated":"2021-04-07T01:42:40.330Z","comments":true,"path":"2021/04/07/Program/SQL/SQL/","link":"","permalink":"http://muxueweiyu.github.io/2021/04/07/Program/SQL/SQL/","excerpt":"数据库无所不在","text":"数据库无所不在","categories":[{"name":"Program","slug":"Program","permalink":"http://muxueweiyu.github.io/categories/Program/"},{"name":"SQL","slug":"Program/SQL","permalink":"http://muxueweiyu.github.io/categories/Program/SQL/"}],"tags":[{"name":"program","slug":"program","permalink":"http://muxueweiyu.github.io/tags/program/"},{"name":"SQL","slug":"SQL","permalink":"http://muxueweiyu.github.io/tags/SQL/"}]},{"title":"jQuery","slug":"Program/JS/jQuery","date":"2021-04-07T01:06:47.000Z","updated":"2021-04-07T01:41:46.277Z","comments":true,"path":"2021/04/07/Program/JS/jQuery/","link":"","permalink":"http://muxueweiyu.github.io/2021/04/07/Program/JS/jQuery/","excerpt":"伟大始于卑微，John Resig(jQuery作者)不是神，仅仅是一位JavaScript代码的爱好者，大概他无意间看到cssQuery代码的精巧和使用的灵巧，萌生了模仿与超越的念头和动力。","text":"伟大始于卑微，John Resig(jQuery作者)不是神，仅仅是一位JavaScript代码的爱好者，大概他无意间看到cssQuery代码的精巧和使用的灵巧，萌生了模仿与超越的念头和动力。","categories":[{"name":"Program","slug":"Program","permalink":"http://muxueweiyu.github.io/categories/Program/"},{"name":"JS","slug":"Program/JS","permalink":"http://muxueweiyu.github.io/categories/Program/JS/"}],"tags":[{"name":"program","slug":"program","permalink":"http://muxueweiyu.github.io/tags/program/"},{"name":"Tool","slug":"Tool","permalink":"http://muxueweiyu.github.io/tags/Tool/"}]},{"title":"random","slug":"Program/code practice/random","date":"2021-04-02T07:10:06.000Z","updated":"2021-04-02T09:20:37.292Z","comments":true,"path":"2021/04/02/Program/code practice/random/","link":"","permalink":"http://muxueweiyu.github.io/2021/04/02/Program/code%20practice/random/","excerpt":"Repeat practice practice practice","text":"Repeat practice practice practice 12345678910111213141516171819using System;public Static class NullUtil&#123; public static bool IsNull(this object x) &#123; return x == null; &#125;&#125;public class Test &#123; static void Main() &#123; object y = null; Console.writeLine(y.IsNull()); y= new object(); Console.WriteLine(y.IsNull()); &#125;&#125; 1-1 1234567891011121314151617181920212223242526create table squeezable(random_text varchar2(50))/declarei binary_integer;j binary_integer;l binary_integer;v_string varchar2(50);beginfor i in 1 .. 10000loopj :=dbms_random.value(1,100);v_string :=dbms_random.string(&#x27;U&#x27;,50);while(j&lt;length(v_string))loopk :=dbms_random.value(1,3);v_string :=substr(substr(v_string,1,j)||rpad(&#x27;&#x27;,k)||substr(v_string,j+1),1,50);j :=dbms_random.value(1,100);end loop;insert into squeezablevalues(v_string);end loop;commit;end;/ 1-2 123456789101112131415161718192021222324252627282930update accountsset balance = balance - purchased_amountwhere balance &gt;= purchased_amountand credit_limit &gt;= purchased_amountand expiry_date &gt; today()and customer_id = provided_idand card_num = provided_cardnumselect c.customer_id,a.card_num,a.expiry_date,a.credit_limit,a.balancefrom customers cleft outer join accounts aon a.customer_id = c.customer_idand a.card_num = provided_cardnumwhere c.customer_id = provied_id​```SQLselect custnamefrom customerswhere city =&#x27;GOTHAM&#x27;and custid in(select o.custidfrom orders o,(select distinct od.ordid from orderdetail od,articles awhere a.artname=&#x27;BATMOBILE&#x27;and a.artid = od.artid)xwhere o.ordered &gt;= somefuncand x.ordid = o.ordid) 1234567891011121314151617181920212223242526272829303132333435INSERT INFO your_table(column_namel,column_name2,...) VALUES(&#x27;value1&#x27;,&#x27;value2&#x27;,...) 1-1INSERT INTO my_contacts(last_name,first_name,email,gender,birthday,professional,location,status,interests,seeking)VALUES(&#x27;Anderson&#x27;,&#x27;Jillian&#x27;,&#x27;jill_anderson@breakneckpizza.com&#x27;,&#x27;F&#x27;,&#x27;1980-09-05&#x27;,&#x27;Technical Writer&#x27;,&#x27;PaloAlto,CA&#x27;, &#x27;Single&#x27;,&#x27;Kayaking, Reptiles&#x27;,&#x27;Relationship,Friends&#x27;);1-2var query = from user in SampleData.AllUsers from project in SampleData.AllProjects select new &#123; User = user,Project = project&#125;;foreach (var pair in query)&#123; Console.WriteLine(&quot;&#123;0&#125;/&#123;1&#125;&quot;, pair.User.Name, pair.Project.Name)&#125;1-3var query = from defect in SampleData.AllDefects where defect.AssignedTo != null group defect by defect.AssignedTo; foreach (var entry in query)&#123; Console.WriteLine(entry.Key.Name); foreach (var defect in entry) &#123; Console.WriteLine(&quot; (&#123;0&#125;) &#123;1&#125;&quot;, defect.Severity, defect.Summary); &#125; Console.WriteLine();&#125;","categories":[{"name":"Program","slug":"Program","permalink":"http://muxueweiyu.github.io/categories/Program/"},{"name":"code practice","slug":"Program/code-practice","permalink":"http://muxueweiyu.github.io/categories/Program/code-practice/"}],"tags":[{"name":"program","slug":"program","permalink":"http://muxueweiyu.github.io/tags/program/"},{"name":"code","slug":"code","permalink":"http://muxueweiyu.github.io/tags/code/"}]},{"title":"D5000系统","slug":"professional/工作/D5000系统","date":"2021-04-02T01:41:45.000Z","updated":"2021-04-02T06:00:14.964Z","comments":true,"path":"2021/04/02/professional/工作/D5000系统/","link":"","permalink":"http://muxueweiyu.github.io/2021/04/02/professional/%E5%B7%A5%E4%BD%9C/D5000%E7%B3%BB%E7%BB%9F/","excerpt":"基于数据库管理的D5000系统数据管理技术","text":"基于数据库管理的D5000系统数据管理技术 以特高压、三华联网[1]为代表的智能电网飞速发展，国家电网公司集约化、扁平化管理[2]的快速推进，计算机、通信技术的长足进步[3—5]，推动了智能电网调度控制系统简称“D5000系统” D5000系统评价指标体系 建立服务器硬件健康度评价指标体系时：首先，需要对硬盘、内存、网卡、CPU等众多影响服务器健康状态的因素进行分析；其次，应该按照评价指标选取的一般原则对影响服务器健康状态的众多因素进行筛选，初步确定服务器的硬件健康度评价指标体系；最后，借鉴相关专家经验，对初步确定的评价指标体系进行修改完善，确定最终的评价指标体系。 建立D5000系统中每个业务特有的业务健康度评价指标体系时：首先，需要分析每个业务由哪些进程组成，根据进程重要程度找到每个业务的关键进程；其次，需要找出进程状态、进程占用内存、进程占用CPU等全部影响进程运行健康状态的因素；然后，按照评价指标选取的一般原则对影响进程运行状态的众多因素进行初步筛选，初步确定每个进程的评价指标体系，同时，借鉴专家经验，确定最终的进程评价指标体系；最后，业务下所有关键进程的评价指标体系构成该业务的业务健康度评价指标体系。 SCADA系统是以计算机为基础的生产过程控制与调度自动化系统。 1.C# 学习熟悉查询表达式和 LINQ to Object2.了解地理信息导航系统内容3.练习数据库使用","categories":[{"name":"professional","slug":"professional","permalink":"http://muxueweiyu.github.io/categories/professional/"},{"name":"工作","slug":"professional/工作","permalink":"http://muxueweiyu.github.io/categories/professional/%E5%B7%A5%E4%BD%9C/"}],"tags":[{"name":"1","slug":"1","permalink":"http://muxueweiyu.github.io/tags/1/"},{"name":"2","slug":"2","permalink":"http://muxueweiyu.github.io/tags/2/"},{"name":"3","slug":"3","permalink":"http://muxueweiyu.github.io/tags/3/"}]},{"title":"writing","slug":"professional/effience/English-writing","date":"2021-04-01T14:33:04.000Z","updated":"2021-04-01T14:09:12.581Z","comments":true,"path":"2021/04/01/professional/effience/English-writing/","link":"","permalink":"http://muxueweiyu.github.io/2021/04/01/professional/effience/English-writing/","excerpt":"英语三个基本要素： purity perspicuity precision","text":"英语三个基本要素： purity perspicuity precision 要素纯粹要素指的是地道英语的应用。它排除了一切俚语、粗鄙之语、过时的说法、外地方言、模棱两可的表达和各种不合语法的语言。除此之外，它还会排斥任何新兴词汇，直到它们被一流作家和演讲者使用。 清晰要素要求用最明确的语言表达最清晰的思想，这样的话，说话者和作者想传达的思想或想法就不会产生误解。所有模糊的、有歧义的和可能被误解的词是严格禁止的。清晰要素要求语言风格清楚、完全摆脱浮华，学究和做作的表达和任何变形效应都要避免。 准确要素要求言简意赅，没有冗余和同义重复，风格简洁明了，能让听者或读者立即理解说话者或作者的意思。它一方面禁止所有复杂的长句，另一方面又禁止太短而唐突的句子。它的目的是达到中庸之道，吸引听者或读者的注意力。 作家集Daniel Defoe 笛福 Robinson Crusoe by Daniel Defoe Book by Defoe,Daniel The Life and Adventures of Robinson Crouse A Journal of the Plague Year by Daniel Defore Joseph Addison Essays and Tales by Joseph Addion 在能表达相同或类似意义的情况下，永远使用简单的而非复杂的词 Thomas Babington macaulay Lays of Ancient Rome by Baron Thomas Babington Macaulay Oliver Goldsmith The Complete Poetical Works of Oliver Goldsmith Edmund Burke The work of the Right Honourable Emund Burke,Vol.03 (of 12) by Edmund Burke Washington Irving The Sketch-Book of Geoffrey Crayon by WashingtonIrving 英语语言里，散文段落结构最优的作家是麦考莱，演说文体的最佳模仿对象是艾德蒙德·伯克，而从描述和叙述的角度来说，段落写得最好的则要数美国人哥德史密斯和华盛顿·欧文。 不要认为图书馆里浩如烟海的知识对于成为一名作家来说是必要的。很多时候，众多的书本知识令人困惑。掌握为数不多的好书，并且融会贯通里面的知识，对于你来说这就够了。一位伟大的作家曾说过：“当心钻研一本书的人。”这句话的意思是钻研一本书（或者说一件事）的人都是大师。据说对《圣经》透彻的研究能让人成为文学大师。确实，《圣经》和莎士比亚创造了知识精华的典范。莎士比亚集合了前人所有的精华，给后来人播撒了知识的种子。他是知识海洋的化身，能够波及所有的思想大陆 。 要成为一名作家，就要向最好的作家学习。同样，想要拥有高雅的谈吐，就要向最好的演说家学习。想要学习正确地说话，就一定要去模仿公众演讲的大师。认真观察谈话大师，听听他们是如何进行表达的。去听最热门的讲座、演讲和课程，无须模仿演讲技巧，这些演讲技巧是练习过程中自然形成的，而非刻意营造。你该关注的不是演说家如何表达自己，而应该关注他所使用的语言和语言的使用方式。你是否听过今日大师的演讲？过去也有很多演讲大师，但他们现在已化作尘土，人们只能通过文字来欣赏他们的雄辩口才。不过，你可以做的就是去听听当今的演讲大师的演讲。对于许多人来说，还是前人的影响更为深远。当谈到演讲的精髓时，我们总是会去听前人的声音。也许你一直为比彻尔和塔尔梅奇的言谈感到着迷，两位的言谈都发人深省，他们用自己的声音征服了千万人的心。两位都是语言大师，他们将修辞的鲜花撒在雄辩的圣殿里，向听众抛出鲜花。听众沉迷于这些鲜花，并将它们存放在记忆的殿堂中。两位都是学者、哲学家，然而却被斯伯吉翁一个从现代角度来看没有接受，或者说仅仅接受了少量教育的普通人——远远地超越。仅仅靠着演讲，斯伯吉翁就吸引了成百上千的人来到他的礼拜堂。新教教徒、天主教徒、土耳其人、犹太人和伊斯兰教徒蜂拥而至，聆听、沉浸于他的教诲。德怀特·L. 穆迪——世界上最伟大的福音传道者——并不是饱读诗书的人，他的职业生涯是从在加拿大做皮鞋推销员开始的，但没有哪个销售员像他那样用绝妙的口才吸引了无数的听众。“那只不过是个人魅力罢了。”你会这么说，但这是绝无仅有的。是这些人嘴里说出的话语，是他们的说话方式、风格和力量吸引了无数双耳朵去倾听。个人魅力或个人形象不是他们成功的原因。确实，如果考虑到外表的话，他们中有部分是残疾人。斯伯吉翁又矮又胖，穆迪看起来像个乡村农夫，把自己罩在披风里的塔尔梅奇则是个邋里邋遢的人，只有比彻尔看起来还似乎过得去。很多人认为，外貌形象不是听众关注的重点。丹尼尔·奥康奈尔是个相貌平平、笨拙、难以相处的爱尔兰公民权利保护者，然而他的巧舌为他赢取了上百万的支持，甚至包括对立面的英国国会。他擅长长篇大论，并且精准地知道该说些什么以吸引听众的注意力。 基本上在所有场合里说话都要注重的是措辞和表达顺序。无论一个人在其他方面有多精致，如果他用词错误，或者没有按照合适的语言结构来表达，他就不会给你留下很好的印象。但是一个人如果能够正确用词，语言表达听起来很舒服，谈吐令人舒服的话，无论他的地位多么卑微，他都有可能吸引并影响你。 仔细倾听优秀的演说家，并记录下让你印象深刻的字句。随身携带笔记本，记录下那些不同寻常的单词、词组和句子。如果你听到一个不懂的词，去查词典。有许多词是同义词，意思相似，但是细分的话，它们各自表达同一意思的不同程度。有时，它们的意思甚至完全不同。要特别注意这些词，找到它们的准确含义，并了解它们的使用范围。 对批评持开放态度。不要怨恨批判，而要欢迎它。把它们看作能够指出你缺陷的朋友，这样你就能够得到改进。 接受了良好教育的、有能力的、高雅的人，纵使他性格无瑕，如果他缺乏表达能力、不能以组织良好的语言表达观点的话，那么和一个能力不如他，却能够用准备充分、有效的语句表达自己观点的人相比，他会错失更多的机会。 约翰·班扬（John Bunyan），英国著名作家、布道家。 古希腊盲诗人，著作《荷马史诗》。 古希腊著名思想家、哲学家、教育家、公民陪审员。 但丁·阿利基耶里，13世纪末意大利诗人，以长诗《神曲》闻名。 罗伯特·彭斯（Robert Burns），苏格兰农民诗人，代表作《友谊天长地久》《往昔的时光》《一朵红红的玫瑰》。 海因里希·海涅（Heinrich Heine），德国著名抒情诗人和散文家，患瘫痪症，在巴黎度过晚年。 伊莱休·伯里特（Elihu Burritt），美国外交官、慈善家和社会活动家，他还是高产的演说家、记者和作家。 詹姆斯·加菲尔德（James A. Garfield），出生于俄亥俄州，美国政治家、共和党人。他是继林肯之后第二位被暗杀的美国总统。 尤利西斯·格兰特（Ulysses Grant），美国军事家、政治家，美国第18任总统。 罗伯特·布坎南（Robert Buchanan），苏格兰诗人、小说家、剧作家。 英国名人墓地。 亨利·利·斯坦利（Henry M. Stanley），威尔士记者、探险家。 埃德加·爱伦·坡（Edgar Allan Poe），19世纪美国诗人、小说家和文学评论家。 斯伯吉翁（Spurgeon），浸礼会牧师，被称为“牧师王子”。 丹尼尔·奥康奈尔（Daniel O’Connell），爱尔兰民族主义运动的主要代表，英国下院天主教解放运动的领袖。 丹尼尔·韦伯斯特（Daniel Webster），美国著名政治家、法学家及律师。 《墓园挽歌》，诗人托马斯·格雷（Thomas Gray，1716—1771）的代表作。 塞缪尔·约翰逊（Samuel Johnson），英国作家、文学评论家和诗人；托马斯·卡莱尔（Thomas Carlyle），苏格兰讽刺作家、评论家、哲学家等 约瑟夫·艾迪生（Joseph Addison），英国散文家、诗人。 托马斯·巴宾顿·麦考莱（Thomas Babington Macaulay），英国历史学家、政治家。 奥利弗·哥德史密斯（Oliver Goldsmith），英国剧作家。 艾德蒙德·伯克（Edmund Burke），爱尔兰政治家、作家、演说家、政治理论家和哲学家。 华盛顿·欧文（Washington Irving），19世纪美国最著名的作家，被誉为美国文学之父。 查尔斯·狄更斯（Charles Dickens），英国作家，代表作有《大卫·科波菲尔》《雾都孤儿》《双城记》等。 亨利·哈勒姆（Henry Hallam），英国历史学家。 安德烈·维萨里（Andreas Vesalius），著名医生、解剖学家。 亚瑟·赫尔普斯爵士（Sir Arthur Helps），英国作家。 Thomas Moore（1779—1852），爱尔兰诗人、歌手、词作者、表演家。 弥尔顿（John Milton），英国诗人，代表作有《失乐园》《复乐园》《力士孙参》等。 昆体良（Quintilian），古罗马时期的著名律师、教育家和皇室委任的第一个修辞学教授。 乔治·贝克莱（George Berkeley），18世纪最著名的哲学家、近代经验主义的重要代表之一，开创了主观唯心主义。 约翰·洛克（John Locke），英国经验主义代表人物。 理查德·惠特利（Richard Whately），英国修辞学家、逻辑学家、经济学家、学者以及神学家。 凯尔特神话中的古爱尔兰著名的英雄人物，传说他是一位优秀的诗人。 优秀作家及他们的文学著作：伟大的作家 分类 世界名著 《圣经》不仅是一部关于上帝的启示的著作，也是目前为止最完美的文学作品。 撇开《圣经》不谈，最伟大的三部作品分别来自荷马、但丁和莎士比亚。紧随其后的是维吉尔和米尔顿的作品。 必备之书 荷马、但丁、塞万提斯、莎士比亚和歌德。 查普曼（翻译过《伊利亚特》《奥德赛》）翻译的荷马作品是最好的。诺顿翻译的但丁的作品和泰勒翻译的《浮士德》（歌德作品）都值得推荐。 馆藏丰富的资源库 除了以上提到的大家之作，所有人还应该拜读以下作家和作品： 普鲁塔克的《希腊罗马名人传》，马可·奥勒留的《沉思录》，乔叟、耿稗思的《师主篇》，哲罗米·泰勒的《圣洁的生与死》《天路历程》，麦考莱、培根、阿狄森、查尔斯·兰姆的《伊利亚随笔选》，雨果的《悲惨世界》，托马斯·卡莱尔的《英雄和英雄崇拜》，帕尔格雷夫的《英诗经典》，沃兹沃斯的《威克斐牧师传》，乔治·亚略特的《亚当·比德》，萨克雷的《名利场》，沃尔特·斯克特爵士的《劫后英雄传》，贝托尔德·奥尔巴赫的《在高地》，巴尔扎克的《欧也妮·葛朗台》，霍桑的《红字》，艾默生的文章、鲍斯威尔的《约翰逊传》，约翰·理查德·格林的《英国人民简史》，达尔文的《物种起源》，以及蒙田、朗费罗、丁尼生、布朗宁、惠蒂尔、拉斯金、赫伯特·斯宾塞的作品。 一本好的百科全书是值得拥有、值得依赖且不可或缺的词典。 美国文学代表作 《红字》《帕克曼的历史》，莫特利的《荷兰共和国的兴起》，格兰特的《回忆录》《富兰克林自传》，韦布斯特的演讲，洛威尔的《毕格罗的论文》和他的批判性文章，梭罗的《瓦尔登湖》，惠特曼的《草叶集》，库柏的《皮袜子故事集》《早餐桌上的独裁者》《宾虚》《汤姆叔叔的小屋》。 美国十大诗人 布莱恩特、爱伦·坡、惠蒂尔、朗费罗、洛威尔、爱默生、惠特曼、拉尼尔、奥尔德里奇和斯托达德。 英国十大诗人 乔叟、斯宾塞、莎士比亚、米尔顿、伯恩斯、沃兹沃斯、济慈、雪莱、丁尼生和布朗宁。 英国十大散文家 培根、艾迪生、斯梯尔、麦考莱、兰姆、杰弗里、德·昆西、卡莱尔、萨克雷和马修·阿诺德。 莎士比亚的最佳戏剧 按照作品的价值来排序的话应该是：《哈姆雷特》《李尔王》《奥赛罗》《安东尼和克里奥帕特拉》《麦克白》《威尼斯商人》《亨利四世》《皆大欢喜》《冬天的故事》《罗密欧与朱丽叶》《仲夏夜之梦》《第十二夜》《暴风雨》。 只看精品 如果你没有条件接触各大名家的著作，至少保证要看其中一部分。带着拓展文学视野的心态，仔细阅读，分析它们。记住，一本好书怎么读都是不够的。而对于不好的作品，我们则应尽力避免接触它。和其他事物一样，在文学领域里，经典永流传。","categories":[{"name":"professional","slug":"professional","permalink":"http://muxueweiyu.github.io/categories/professional/"},{"name":"effience","slug":"professional/effience","permalink":"http://muxueweiyu.github.io/categories/professional/effience/"}],"tags":[{"name":"thinking","slug":"thinking","permalink":"http://muxueweiyu.github.io/tags/thinking/"}]},{"title":"C#基础","slug":"Program/C#/C#","date":"2021-04-01T01:23:08.000Z","updated":"2021-04-01T05:21:31.735Z","comments":true,"path":"2021/04/01/Program/C#/C#/","link":"","permalink":"http://muxueweiyu.github.io/2021/04/01/Program/C#/C#/","excerpt":"教学代码不是产品代码 从这些代码中获取灵感，要比照抄照搬或是满足你特定的需求强多了。","text":"教学代码不是产品代码 从这些代码中获取灵感，要比照抄照搬或是满足你特定的需求强多了。","categories":[{"name":"Program","slug":"Program","permalink":"http://muxueweiyu.github.io/categories/Program/"},{"name":"C#","slug":"Program/C","permalink":"http://muxueweiyu.github.io/categories/Program/C/"}],"tags":[{"name":"program","slug":"program","permalink":"http://muxueweiyu.github.io/tags/program/"}]},{"title":"Random-Thoughts","slug":"Random Thoughts/2021/2021-04","date":"2021-04-01T00:31:48.000Z","updated":"2021-05-03T03:07:03.618Z","comments":true,"path":"2021/04/01/Random Thoughts/2021/2021-04/","link":"","permalink":"http://muxueweiyu.github.io/2021/04/01/Random%20Thoughts/2021/2021-04/","excerpt":"事情较多 两周实习","text":"事情较多 两周实习 1date: 2021-04-01 利益之线清晰可见：任何控制你数据的人就能控制整个数字未来，过去几年，载运储存和分享数据已经成为一种可谓普遍存在的习惯。传统的观点认为基于云端的存储是一项商品业务，一个数字文件柜。不过，云端存储潜力更像是一个可移动办公室。”你的整个计算环境必须跟着你，”可以解释”包括你的财政记录、健康信息、音乐播放列表。任何我的东西即个人活动所产生的信息，并且必须能与这个移动办公室中所有东西进行天衣无缝的互动，和同事一起制作文档，发送邮件，输入库存等等。”可笑啊”能用存储做什么？” 我们的劳动力越来越独立、流动和灵活，工作与家庭之间的界限只会越来越模糊。传统计算机设备并不适合现代工作方式 简单首创方便预安装，是否对解决数字世界的麻烦充满热情。逐渐学会提出问题，依赖别人想出答案 1date: 2021-04-01 查询的识别(Query Identification) 需要不同的数字类型目的是为了节省数据库存储空间和效率，为表的每列选择最合适的数据类型可以为表瘦身，还可以使数据操作更为快速。 保持数据库连接稳定(Stable Database Connections) 尽量减少分别连接数据库次数的重要，性能会有显著提升。再进一步优化，建立一组处理程序（handler)分别负责一个数据库连接，每个数据库只连接一次，性能进一步提高。效率飞速提升。，上述基础上，更新的数据填入数据，尽可能减少程序和数据库核心间的交互次数，性能飞跃。每次插入几行数据的做法，使数据的总处理能力增加5倍 数据库连接是很‘重’的操作，消耗资源很多。 简单连接操作，首先客户端与远程服务器监听（listener program）建立联系；监听程序创建一个进程或线程执行数据库核心程序，或直接或间接把客户请求传递已存在的服务器进程，取决于服务器是否为共享服务器。除此之外还需为每次session建立新环境，跟踪它的行为。连接池(connection pooling)保持永久数据库连接的技术对性能很重要。 战略优先于战术(Strategy Before Tactics)程序和数据库之间交互有开销。验证优化之后的结果集，局外思考(think outside the box)的能力，优化太关注问题本身而收到了干扰。需要大胆的思维，从大局角度看待问题，尤其是关键问题：写存储过程之前，已有哪些数据？希望存储过程返回什么结果，大胆思维，思考问题的答案，就能得到一个性能大幅提升的处理方式了。 先定义问题，再解决问题(Problem Definition Before Solution 所有技术方案，都只是达到目标的手段。没有经验的开发者误把新技术本身当成了目标。 先打基础，再赶时髦：摆弄新工具之前，先把手艺学好。 直接操作实际数据(Operations Against Actual Data) 永久表(permanent table)可以设置非常复杂的存储选项，而临时表不能 暂时工作表意味着以不太合理的方式存储更多信息。 用SQL处理集合(Set Processing in SQL) 必须先精确定义出要处理的记录集合。将一次“大批量数据的处理”分割成多次“”小块处理“是个坏主意。方法低效： 占用过多的空间保存原始数据，以备事务(transaction)回滚(roolback)之需； 万一修改失败，回滚消耗过长的实践。 严格从实践角度来讲,”从头开始重做”比”确定失败发生的时间和位置，接着已提交部分重做”要容易得多、简单得多、也快的多。 日志大小，规模较小的”每周或每日更新“ 几千个语句，借助游标(cursor)不断循环，很慢。换成几个语句，处理同样的数据，还是较慢，换成一个语句，解决上述问题，最好。 动作丰富的SQL语句(Action-Packed SQL Statements) 尽可能多把事情交给数据库优化器来处理。 充分利用每次数据库访问(Profitable Database Accesses) 合理范围，利用每次数据库访问完成尽量多的工作。 接近DBMS核心(Closeness to the DBMS Kernel) 自带函数执行效率高得多， 只做必须做的(Doing Only What Is Required) 测试是否存在，没必要编程实现那些数据库隐含实现的功能。 SQL语句反应业务逻辑(SQL Statements Mirror Business Logic) 检查数据库活动，看它是否与当时正进行的业务活动保持合理的一致性。 简洁的SQL(Succinct SQL) 声明性语言(declarative language),所以设法你的代码超越业务过程的规格说明。 SQL的进攻式编程(Offensive Coding with SQL) 掌握SQL艺术的五大要素 Five Factors Govering the Art of SQL 获得结果集所需访问的数据量 定义结果集所需的查询条件 结果集的大小 获得结果集所涉及的表的数量 多少用户会同时修改这些数据 内存中普遍的集合的操作也是很常见的，查询表达式和Enumerable中的扩展方法对其支持得很好。 123456Vmware workstation16：ZF3R0-FHED2-M80TY-8QYGC-NPKYF15：FC7D0-D1YDL-M8DXZ-CYPZE-P2AY612：ZC3TK-63GE6-481JY-WWW5T-Z7ATA10：1Z0G9-67285-FZG78-ZL3Q2-234JG 1date: 2021-04-02 只记得杰克 伦敦这样告诉喜爱文学的年轻人：宁愿去读拜伦或济慈的一行诗，也不要去读一千本文学杂志。我当时相信了杰克 伦敦的话，此后我很少去阅读杂志，我开始去阅读大量的经典作品。杰克 伦敦也正是这样的意思，十九年以后的今天，我坐在这里写下这篇短文时，心里充满了对杰克 伦敦的感激。我觉得自己二十年来最大的收获就是不断地去阅读经典作品，我们应该相信历史和前人的阅读所留下来的作品，这些作品都是经过了时间的考验，阅读它们不会让我们上当，因为它们是人类智慧的结晶和人类灵魂的漫长旅程。当一个人在少年时期就开始阅读经典作品，那么他的少年就会被经典作品中最为真实的思想和情感带走，当他成年以后就会发现人类共有的智慧和灵魂在自己身上得到了延续。 《大染坊》陈寿亭：”不管是男人对男人，还是男人对女人，这首先要相互信任，就是信得过对方；这第二步呢，就是相互理解，也就是体谅对方；这最高处，就是相互欣赏，也就是你看着我好，我看着你也好。“”你知道我欣赏家驹什么吗？家驹最大的好处，是他知道自己能干什么，不能干什么。人跟人在一起，特别是男人跟男人在一起，你知道什么最难避免吗？一个字：’争‘！就这一个’争‘字，不知道能毁了多少事啊。而家驹确实’让‘，这一个’让‘字，要是没有大文化，大学问，比如说他爹，卢老爷子这样的高人点拨，一般人是做不到的。我要饭的时候，满大街的人都是我老师；到了你家，咱爹娘是我老师；我干了染厂之后，家驹就是我老师。要是没有家驹这样的人，你想一想，我能干成什么？真正的高人，不像我这样，上蹿下跳，到处乱窜，真正的高人啊，是让你心甘情愿地为他上蹿下跳，家驹就有这么点儿意思。“ 我年轻初学写诗的时候，只知道追求诗句工整，修辞华美，总在字句上下功夫。到中年写诗时，始所有悟，才逐渐窥察到宏大深邃的诗意境界，也就能写出一些好诗来，有如被湍流冲洗的顽石，显得奇特不俗。唐朝李白、杜甫的诗，是不可逾越的高峰，有如数仞高墙挡在眼前，我恨自己领会不深，渴望而不可及。 元稹和白居易的诗，也只能说到达了高墙的门边，至于温庭筠、李商隐的诗，就不值得一提了，即使是他们的扛鼎之作，也未必能真正领会诗中三味。诗是六艺之一，哪能仅仅当作笔墨游戏呢？所以，你果真要学习写诗，不仅是字词句式，还要有更深的学问，作诗的工夫，在于诗外的历练。 《示子遹》是宋代诗人陆游在公元1208年（南宋嘉定元年）为儿子写的诗，那是他已84岁，不久后就要离开这个世界。因此，将这首诗视作诗人的一份文学遗嘱，也无妨。 1234567891011121314151617《示子遹》 我初学诗日，但欲工藻绘； 中年始少悟，减弱窥宏大。 怪奇亦间出，如石漱湍濑。 数仞李杜墙，常恨欠领会。 元白才倚门，温李真自郐 正令笔扛鼎，亦未造三昧。 诗为六艺一，岂用资狡狯？ 汝果欲学诗，工夫在诗外。 1date: 2021-04-03 “Unix is simple. It just takes a genius to understand its simplicity.” 但是我不这么认为，因为我不是一个天才，但是我却勇敢的把 Windows 完全删除掉，遇到不明白的事情的时候努力用 UNIX 的方式去解决，而不是寻求 Windows 的帮助。现在我体会到了 UNIX 的思想和好处，我可以用比 Windows 高效几倍的效率工作。因为我相信这样的信念：”Windows 能办到的事 Linux 一定能办到，而且办的更好。” 根本的编程思维不同 1date: 2021-04-04 开源项目是社区导向，除了维护核心代码的人，还需要更多的人负责管理社区、撰写文档编写插件。社区绝对不容忽视，一个项目是等闲平庸、举步维艰，还是能处处满足甚至超出用户的期许，可以说完全取决于社区。 如何运营项目，用户如何使用我们的代码，是jQuery与大多数开源项目(以及大多数JavaScript库)的根本差异所在。参与其中. 1date: 2021-04-05 人类的快乐，不是靠理性、电脑、物质，而来自情感、直觉、本能、快乐行动。 凡永恒伟大的爱，都要绝望一次，消失一次，一度死，才会重获爱，重新知道生命的价值。 阿里安因情人走，知道巴克斯更好，巴克斯因阿里安死，更知其可贵。 神话，是大人说小孩的话，说给大人听的。多听，多想，人得以归真返璞。 中国神话，好有好报，恶有恶报，太现实。神权、夫权、谁管谁，渗透神话，令人惧怕。 希腊神话无为而治，自在自为。 1date: 2021-04-06 思想是不会亡的 123456789101112131415161718192021222324252627282930313233343536373839404142434445大佬语录:罗素：精神濒临崩溃的症状之一，就是相信自己的工作非常重要。亚里士多德 ：所有拿薪水的工作都会消耗人的心灵，降低人的心智。阿兰·德波顿 ：所谓工作，就是有尊严的疲惫。石田衣良：工作的乐趣顶多只能将口袋装满，但工作的苦闷却是要卡车才装得下。毛姆：“你想干什么？” “我想游手好闲。”蔡澜 ：”所有做过的工作里，哪一样最使你快乐？&quot;&quot;赚钱的。&quot;马特·海格：我终于明白工作在地球上为什么如此重要，它可以让你忘记寂寞。但对我来说，寂寞仍然无法摆脱，它就在办公室里等着我。雷蒙德·卡佛：我从没喜欢过工作，我的目标永远是得过且过。木心：我的修身原则：一，不工作；二，没人管；三，一个人。朱生豪：到星期一灵魂就像是一片白雾；星期二它醒了转来，发现仍旧在囚笼里，便又要苦闷了。石川啄木：把回家去的时间当作唯一等候着的事情，今天也这样工作了。布考斯基：工作就是这样钩住了你：只给你足够的钱维生，但从来不够让你能逃脱。余华：我第一天到文化馆上班时故意迟到了两个小时，结果我发现自己竟然是第一个来上班的，我心想这地方来对了。查尔斯·布考斯基：上班明明是为别人赚大钱，可最后竟还要反过来谢他给你一个工作机会，一个人怎么可能享受这种鸟日子呢？王尔德：我不想谋生，我想生活。契诃夫：没有钱用，但又懒得去挣钱。请您给我寄一些钱来吧！弗兰克·迈考特：没有尊严的工作是死的工作。“我早上起床，去做一份根本不喜欢的工作,，我工作只是为了钱，可钱还少得可怜，我每天都付出更多努力，但情况完全没有改变，我不只是累，我是筋疲力尽。”“工作是世上最伟大的事，所以我们该把一些工作留给明天。”“我上班总是迟到，不过我会用早退离开来弥补。”“如果工作真的这么棒，那有钱人就会多留些工作给他们自己。”布考斯基：工作就是这样钩住了你：只给你足够的钱维生，但从来不够让你能逃脱。 1date: 2021-04-07 计算机这专业的渗透性非常强。产生的岗位远远不止在计算机行业内，还有驱动其他行业产生海量的的对应岗位。 其本质原因在于，计算机做的是一个根本性的问题，构建的是未来世界的基础架构。谷歌三驾马车MapReduce，BigTable，GFS解决的不只是互联网的问题，而是为所有学科将会面对的数据存储处理问题，提出了解决方案，并指明了前进的道路。 遇到海量数据处理，需要大数据工程师来处理，而本专业内部可以找到答案。 数学有扎实的数理通识教育，技术发展太快了，但万变不离其宗，唯一不变的就是背后数学原理。想要在未来快速适应各种新技术，扎实的数理基础太重要了。 过于特化的专业=扑街 要么文史哲法律，要么基础数理化， 1date: 2021-04-08 无论是读是写，学生不容易感到实际的需要;读的方面，往往只注重思想的获得而忽略语汇的扩展、字句的修饰、篇章的组织、声调的变化等；作的方面，总想创作，又急于发表。不感到实际的需要，读和作都只是为人，都只是奉行功令，自然免不了敷衍、游戏。只注重思想而忽略训练，所获得的思想必是浮光掠影。因为思想也就存在语汇、字句、篇章、声调里。 不断地去递归，去伪求真 有些事情没有去经历过你是真的没办法了解自己是那个拙的 1date: 2021-04-11 理清下思路，这个周末基本上将后三个月的网络问题给解决了，下两周就要开始实习了，具体事情应该比较简单点，我要将剩下的重心，放到English postcast 三个月的时间网络完善，时间充足，任务明确。可以试试。 理清书签，Linux nano python JavaScript Csharp wikipedia quora 1date: 2021-04-12 今天理清了下实习内容发现很多东西都是相通的。 我的方向就是工程师，一直都是不过显然在现在这个阶段，去一线做机务并不是一个很好的选择，想成为一个合格的工程师吗，最重要的就是解决问题的能力了而这种能力显然在项目锻炼中可以更好的得到提升，我在提高一直都在。 why using docker? Principles of virtualization 为什么我们需要虚拟化技术? 未来, 电子书 kubernetes-vs-docker How Can Containers and Kubernetes Save you Money? Kubernetes vs. Docker: A Primer 对于目前的我来说，就是数学，英语，计算机。 怎么说呢，读的书多了，总是想写点什么……,不过不是什么东西都适合写进博客，可以试着找找适合个人知识管理的公开方案。 这句话我挺喜欢的，为什么这个由软件组成的世界这么糟糕？因为人们最常接触到的东西太糟糕了。可以说那些看不见的技术都还是发展得很好的，但看得见的技术都已经沦落到互相比烂了，太过于依赖平面设计，以至于没有功能上的创新。变成门槛的降低并不总是一件好事。 编程的恶习，倾向于用自己不熟悉的东西挑战自己。编程是为了解决问题。几乎一样的功能我用Python,PHP, Golang, Node.js配合MySQL, MongoDB, SQLite, Redis都实现过, 把以前写过的代码拿出来照抄一遍都能做完, 代码也很是清晰. “简约至上”, “少即是多”, “KISS原则”, 这些设计理念基本中的基本, 我忘记他们太久了, 我太沉迷于挑战自我这件事情, 以至于这次的失败让我非常难以接受. 我忘记了编程本应该是一个有趣的事情, 忘记了对优雅清晰的代码的追求. 忘记了初心的我回过神来, 才发现给自己平日里堆砌的所谓”挑战性”一直在增加我编码时的挫败感. 我自认是一个挺抗压的人, 心理学和NPL的知识让我能够很快的调节自己的心态, 但这些并不能够阻止我自己反复不断地犯决策上的错误, 反而让我能在错误的路上走得更远, 最后便无法回头了, 这次的情况算是彻底击溃了我往日在”应对挑战”上积累出来的盲目的自信, 我完全错了. 需要掌控设计的原则，设计理念基本中的基本，不能忘记啊 1date: 2021-04-13 Making 100,000 Stars HOW TO ACCESS THE WEB SERVER THROUGH A HOSTNAME? 1date: 2021-04-14 一个很棒的可视化项目webgl-water Babylon.js 4.2 1234＃如果上面返回的Python版本是3.Xpython -m http.server＃如果上面返回的Python版本是2.Xpython -m SimpleHTTPServer 3 Dreams of Black three.js Audio Visualization snowstack codrops 3D Book Showcase A day to said 1date: 2021-04-15 传统欧美国家成熟用户都是：家庭电脑=&gt;上网+邮件=&gt;笔记本=&gt;Web 2.0=&gt;iOS和安卓=&gt;今天——他们整个消费习惯和成长是严格按照硅谷商业进化图的，啥出新了，他们就买啥； 中国大半数消费者是：买山寨机=&gt;买山寨安卓机=&gt;手机微信淘宝支付宝=&gt;买华米OV中高端安卓机… …中国最早网民数量多历史久远，但是在14亿人里比例太低。互联网公司为了“贴合用户”，不得不顺从今天大部分人的消费历史和习惯： 第一台也是唯一智能设备是安卓手机，一切做成手机A-P-P，一切沟通用微信，一切做成带货，一切做成直播，一切做成小额贷款，一切用手机支付，一切A-P-P自己内置一套小程序 嗯，只能说大部分人真的没钱买一个好点的笔记本，而且大部分人的工作也确实用不上笔记本…… 哎，这种智能手机普及，某种程度上也阻碍了他们用键盘和真正的桌面操作系统去接触真正的生产力工具，比如SaaS、邮件、服务、在线会议等等 是这样的，不过本来很多人有更好的机会。 打个比方，如果没有GFW，中国社会能够非常顺利地推动chromebook这种低成本生产力设备在社会各个阶层里推广——这样他们有机会用键盘、大屏幕、SaaS来提高生产力。 不过既然禁了，这个选项也就基本没有了，互联网厂商全都做App去了，也就没有社会生产力可言了 有点意思，有感而发，根本改变不了，没有任何东西是自发的 1date: 2021-04-16 “我让你学VIM，远离pycharm/vscode/visual studio，早日成为我这样的高手，是为你好” “别只学python，学点高级特性的语言，是为了让你端正学CS的态度” “只学编程是没用的，你还要把os、graphics、compiler、database、algorithm也都学完，不然只学个python这叫急功近利” ——不，你只是想装逼而已 Phoria 软件重用：不要重复造轮子。而STL无疑是C++领域中最大、最重要的轮子。有必要了解这个大轮子，用好这个大轮子。设计更多的库来扩充功能要好过设计更多的语法。库让我们来实现代码的可复用性 Learning standard C++ as a new language 多用算法调用，少用循环。效率高，不易出错，可维护性好。“最好的软件应该是那些最清晰的、最容易懂的、容易增强和维护、适用于新环境的软件”。STL使用高层次的术语取代了低层次的词汇，软件的抽象层次在改变中得到了提升，更容易实现、增强和维护。 Make it right before you make it faster Keep it right when you make it faster. Make it clear before vou make it faster. 程序的正确执行是第一需求，也是最基本的需求。“我亦无他，唯手熟尔”日积月累的经验沉积。 避免代码过长 代码缩进和对齐 空行分隔段落 使用空格 语句行 优秀的程序员很清楚自己的能力是有限的，对待编程任务的态度是完全谦卑的， 简洁，清晰，纯粹 代码阅读时会消耗脑力。 用读书来补充脑力。 1date: 2021-04-17 建立自己的代码规范 将规范融入编程过程 坚持不懈直到养成习惯 再快一点，再高一点 Establish your own code specification 不成熟的优化是万恶之源，前辈的教诲呀，优化之前 算法是否正确？ 如何在代码优化和可读性之间进行选择？ 该如何优化？ 如何选择优化方向？ 先算法，再数据结构，最后实现细节，由粗到细 相对路径包含头文件 男人嘛总有一天要面对自己害怕的东西， 尽量减少文件之间的编译依赖。 为了加快编译进程，减少时间的浪费，我们应该尽量减少头文件依赖。 任何情况下都不应该在头文件中使用”using namespace XXX” ,以避免可能的名空间污染，推荐使用全程：XXX::ABC, 在实际工程实践中，会定义各式各样的名称，随着工程的扩大，名称冲突问题总会不期而至。使用自己的名空间将全局名空间合理划分，有效减少名污染问题。 坚持“以行为为中心”的类设计，突出接口功能，同时，这也是对大公司设计规范的一种学习与遵循。 用心做好类设计 很大一部分精力要花在类的设计上，一个类型应该做到“易于正确使用，难以错误使用”。良好的类应该拥有“简单自然的语法，符合直觉的语义，以及一个或更多高效的实现”。事实上，如果缺乏一个详细的规划设计，这样的目标是很难达到的。 类应该如何创建和销毁呢？这回影响到类的构造函数和析构函数的设计。 类是否需要一个无参构函数？如果需要，而恰恰此时这个类已经有了构造函数，编译器就不会帮我们了，那我们就得显时地写一个。 类需要复制构造函数吗？其参数上加上const修饰吗？ 所有的数据成员是不是都已经在构造函数中完成类初始化呢？ 类需要赋值操作符吗？ 类的析构函数需要设置为virtual吗？ 类中哪些值的组合是合法的？合法值的限定条件是什么？ 其次，类的设计是对现实对象进行抽象的一个过程。 保证外部接口简单，因为类库是按照一定的接口规范，向上提供一定的功能服务的，所以，接口设计得越简单，上层用户使用起来就越方便。 我们应该设身处地地为用户考虑一下，从技术、情感和信心理学等方面认真考虑一下。 类设计是件非常具有挑战性的工作，这既是一个数据类型的设计过程，也是一个对显示对象抽象、综合各方面因素来权衡利弊的过程。 类接口的目标是完整且最小。 利于理解、使用，维护成本也相对较低。 可以缩小头文件长度，并缩短编译时间。 只可意会不可言传，需要长期的实践中慢慢揣摩体会。 坚持数据封装，坚持信息隐藏，杜绝公有、保护属性的存在。推荐Pimp的二层设计。 要先知道有这样的设计模式，前人经验实践的结晶，可以帮助我们优化设计，封装变化，降低耦合。但是理解与应用又有一定的难度，慢慢来体会，将其融入到你的设计中。 1Write with the door closed, rewrite with the door open. Your stuff starts out being just for you, in other words, but then it goes out. Once [it’s out there] it belongs to anyone who wants to read it. Or criticize it. If you’re very lucky … more will do want to do the former than the latter. 读万卷书，行万里路。这句话之于程序员依旧有效。“阅读伟大的代码之于程序员，就如同阅读伟大作品之于作家。”阅读别人的代码是很有价值的，大师们的思想和技艺都凝聚在他们的代码里；阅读他们的代码，从中学习他们的思想与技艺，就等于站在巨人的肩膀上，优化我们的设计，提高我们的能力。 阅读代码还是一种能力 阅读代码需要耐心 阅读代码需要方法 阅读代码需要正确的态度 quake kev 基于浏览器的集成环境 Verold Studio Sketchfab SculptGL JSFiddle Shadertoy 3D内容仓库和现成素材 The Trimble 3D Warehouse Turbosquid Renderosity 3DRT 游戏引擎 playcanvas Turbulenz Goo Engine Babylon.js KickJS 展示框架 tQuery Learning Three.js Voodoo.js PhiloGL Learning WebGL 1date: 2021-04-18 WebGL资源 WebGL规范 WebGL邮件列表和论坛 WebGL博客和演示站点 Learning WebGL Learning Three.js TojiCode Three.js on Reddit WebGL.com WebGL Mozilla Labs Demos WebGL Chrome Experiments CSS3规范 CSS3 CSS3博客和演示站点 David DeSandro Codrops Dirk Weber Keith Clark Bradshaw Enterprises Canvas资源 2D Canvas API 3D JavaScript库 Three.js SceneJS GLGE Phoria 3D游戏引擎 playcanvas Turbulenz Goo Engine Verold Babylon.js KickJS 3D展示框架 Voodoo.js tQuery PhiloGL Vizi 3D编辑工具 Blender SketchUp Poser 基于浏览器的集成环境 Goo Create Verold Studio Sketchfab SculptGL 调试和分析WebGL应用 webgl-debugging-and-profiling-tools 移动3D开发资源 CocoonJS Ejecta WebSockets和WebRTC WebSockets [WebRTC](http://www.html5rocks.com/en/tutorials/webrtc/basics/) Web Workers Web Workers Transferable-Objects-Lightning-Fast 1date: 2021-04-19 csszengarden CSS设计类Web站点 CSS Discuss CSS at MaxDesign CSS/Web Standards Links Holy CSS Zeldman! Position Is Everything 期刊出版物 A List Apart Digital Web Magazine Web Standards Project Buzz 图书 Eric Meyer on CSS: Mastering the Language of Web Design Web Standards Solutions: The Markup and Style Handbook Special Edition: Using XHTML and HTML 1date: 2021-04-20 Coding: Packaging by vertical slice The Clean Code Blog Package by feature, not layer 我们都知道，编写好的代码很重要，重构迫使我们考虑让方法变得更小、更可复用和自文档化。有人说注释是有害的，自注释的代码才应该是我们的追求。不管你怎么做，我们每个人都应该 追求易于阅读、理解和维护的好代码。但是代码不会讲述完整的故事。 让我们想象一下，你新加入一个正在进行中的软件项目。主要的结构单元都到位了，已经交付了一些功能。你启动了自己的开发机，从源代码控制系统下载了代码并加载到你的开发环境中。下一步要做什么，如何变得有效率？ 如果没人有时间带你过一遍代码库，你可以根据对这个项目有限的了解、业务领域、你对团队如何构建软件的期望以及你对所用技术的知识，做出自己的假设。 举个例子，你可以通过代码库如何被拆分为子项目、目录、包、命名空间等对软件系统的整体架构做出一些判断。说不定有一些正在使用的命名约定。我们甚至能够从前面的微软Visual Studio屏幕截图判断出软件的一些特征，在这种情况下它是一个（匿名）的网上银行系统。 进一步深入代码会帮助验证你最初的假设正确与否，但也可能留给你一大堆问题。也许你在较高层次明白系统做的事情，但不明白像下面这样的事。 软件系统如何融入已有的系统形态； 为什么会选择正在使用的技术； 软件系统的整体结构； 各个组件在运行时部署在哪里，如何相互沟通； Web层如何“知道”在哪里找到中间层； 日志/配置/错误的处理/其他采用了什么方法，在代码库中是否一致； 代码库中是否使用了通用的模式和原则； 如何添加新功能，在哪里添加； 栈的安全性是如何实现的； 如何实现可伸缩性； 与其他系统的接口如何工作； 其他。 当然可以从代码的角度评估大部分问题的答案，但这会很繁重。阅读代码的作用始终有限，但某些时候你可能需要向团队的其他人请教一些问题。如果没有问对问题，你就得不到正确的答案：你不知道你未知的。 任何软件系统，在代码之上都有另一个可以回答这些类型以及更多问题的信息层。 语境：这都是关于什么 功能概览 质量属性：是否有重要的非功能需求 约束：是否有重要的约束 原则：采用了哪些设计和开发原则 软件架构：大局看起来怎么样？系统的结构如何 外部接口：有哪些外部系统接口 代码：是否有你需要解释的实现细节 数据：数据模型看起来怎么样？存储在哪里 基础设施架构：目标部署环境看起来怎么样 部署：软件和基础设施之间的映射是什么样的 运营和支持：人们如何运营和支持系统 这类信息和代码是互补的，应该在某处被捕获，比如轻量级的辅助文档，它能描述代码自己无法描述的东西。代码会讲故事，但不会讲述完整的故事。 软件文档即指南 我们应该考虑把辅助文档作为一个不断变化的旅游指南，而不是一个综合的静态历史片断。但这样的指南应该写些什么？ 如果我打开一个复杂软件系统的代码库，随机突出一行代码，探索会很有趣，但要搞明白你在哪里以及代码如何融入软件系统这个整体，都要花一些时间。大多数集成开发环境都有办法通过命名空间、包或文件夹来浏览代码，但代码库的物理结构和逻辑结构往往是不同的。举个例子，你可以用很多个类组成一个组件，用那些组件再组成一个可部署单元。 图表可以作为地图来帮助人们浏览一个复杂的代码库，这是软件的辅助文档最重要的组成之一。理想情况下，应该有数张简单的图表，各自展示软件系统或抽象层次的不同部分。我的C4方法就总结了软件系统的静态结构，但也有包括应用UML在内的其他方法。 再次，代码库没有什么不同，一些历史、文化和理念的知识能够长期地帮助你理解为什么一个软件系统是那样设计的。这对那些新加入一个现有团队的人特别有用。 1date: 2021-04-21 旅游指南可能会包含的最后一件事就是实用信息。你知道，所有关于货币、电力供应、移民、地方法律、当地习俗、遇到困难如何解决等有用的小知识。 如果我们考虑一个软件系统，实用的信息可能包括在哪里找到源代码、如何构建、如何部署、团队遵循的原则，等等。所有这些都能帮助开发团队做好他们的工作。 探索十分有趣，但始终要花时间，而我们往往没有时间。既然代码不会讲述完整的故事，一些辅助文档就非常有用，特别是如果你把软件交接给其他人或者经常有人离开和加入的团队。我的建议是，把这个辅助文档当作一个指南，它应该给人们上手提供足够的信息，帮助他们加快探索的过程。不过要抵挡住深入太多技术细节的诱惑，因为理解那个层次细节的技术人员自然知道如何从代码库找到它。和任何事一样，其中有一个愉快的平衡点。 以下标题描述了你可能想要包含在软件指南中的事情： 1.语境； 2.功能性概览； 3.质量属性； 4.约束； 5.原则； 6.软件架构； 7.外部接口； 8.代码； 9.数据； 10.基础设施架构； 11.部署； 12.运营和支持； 13.决策日志。 不管你如何编写文档，只要明白你想传达的是什么，并相应地给各部分命名。解决术语问题的一个选项是确保团队中每个人对各种架构视图是什么都能找到清晰的定义。 软件如何为运营/支持团队提供监测和管理系统的能力是否清楚？ 在架构的各个分层中这是如何实现的？ 运营人员要如何诊断问题？ 错误和信息记录在哪里？（比如，日志文件、Windows事件日志、SNMP、JMX、WMI、自定义诊断等。） 更改配置是否需要重新启动？ 有需要定期执行的手动管理任务吗？ 旧数据需要定期归档吗？ 1.我们都应该努力写出自文档化的代码，但这样就够了吗？如果不够，还缺少什么？ 2.你会给你的软件系统写文档吗？如果会，为什么？如果不会，又是为什么？ 3.如果你有很多项目级的文档，但只有很少产品级的文档，新加入团队的人该如何理解你的软件系统？怎样可以让他们更轻松一点？ 4.在你所处环境中，你认为什么是最低水平的辅助软件文档？ 5.你的辅助文档保存在什么地方（比如：源码控制系统、网络文件共享、SharePoint、维基等）？对你的目标群体来说这是最好的方案吗？ 1date: 2021-04-22 测试驱动开发 行为驱动开发 领域驱动设计 责任驱动设计 你需要思考架构的驱动力 （影响最终软件架构的重要事情），包括下面这些。 功能需求 ：需求驱动架构。不管怎么捕捉和记录需求（比如，用户故事、用例、需求规格书、验收测试等），你都要大概知道你在构建什么。 质量属性 ：非功能需求（比如，性能、可扩展性、安全等）通常是技术方面的，也很难改造。理论上，这些都需要体现在初始的设计中，忽视这些属性会导致软件系统要么做得不够，要么做得太过。 约束 ：约束普遍存在于现实世界，包括批准的技术清单、规定的集成标准、目标部署环境、团队规模等。再说一次，不考虑这些会导致你交付的软件系统与环境不匹配，增加不必要的摩擦。 原则 ：是在试图为软件提供一致性和清晰度时你想要采用的东西。从设计的角度来看，这包括你的分解策略（比如，层、组件和微服务的对比）、关注点分离、架构模式等。明确概述一套初始的原则至关重要，这样构建软件的团队才会朝着同一方向出发。 风险可以是主观的，所以请团队中每个人（架构师、开发者、项目经理、业务人等）都站在架构图前，各自写下他们能够识别的风险，一个风险用一张便利贴。此外，请他们根据概率和影响量化每个风险。理想情况下，用不同颜色的便利贴来表示不同的风险优先级。你可以将这部分练习划分为5~10分钟的时间段，以免拖延，这一步应该保持沉默，每个人收好各自的便利贴。这里是一些要寻找的风险的例子： 第三方系统的数据格式意外变更； 外部系统不可用； 组件运行过慢； 组件无法伸缩； 关键组件崩溃； 单点故障； 数据被破坏； 基础设施故障； 磁盘填满； 新技术未按预期工作； 新技术使用过于复杂； 等等。 1date: 2021-04-23 多少预先设计是太少 不了解系统边界是什么，在哪里。 团队中对“大局”没有形成共识。 无法交流整体愿景。 团队成员对需要做的事情不清楚或感到不适。 没有考虑非功能需求/质量属性。 没有考虑（现实的）环境约束如何影响软件（比如部署环境）。 没有考虑主要的风险，比如非功能需求、外部接口等。 尚未确认重大问题及其答案。 没有考虑关注点分离、适当的抽象层次、分层、可修改性，拐点等。 对架构师要扮演的角色没有共识。 解决问题的方法不一致。 团队缺乏控制和指导。 项目生命周期中本应预先考虑到的重大架构变化。 过多的设计选择和选项，往往伴以团队成员对解决方案或前进方向的反对。 对于设计是否管用的不确定（比如，设计过程中没有执行原型的部分）。 缺乏技术选择（即不必要的延迟）。 多少预先设计是太多 太多信息（即很长的文档或信息超载）。 在太多抽象层次都过于详细。 太多图表。 在文档中编写代码或伪代码。 过于死板，缺乏灵活性的架构。 所有抽象层次的所有决策都已做出。 有着众多展示了所有可能交互的序列图的类层次设计。 详细的实体关系模型和数据库的设计（比如，表、视图、存储过程和索引）。 分析瘫痪和纠缠于次要细节的团队。 编码成了对团队来说无聊而消极的设计文物到代码的简单变换。 一个无节制的“设计阶段”（即时间和预算）。 还未进行任何编码就已到达最后期限。 Agile Modeling Site Map Ted Neward’s Blog 1.以非常清晰和简洁的方式陈述当前的状况，如果不做出改变，会有哪些问题、风险和后果。通常你会向主要决策者、项目资助人或管理层陈述这些内容。一旦他们了解了风险，就能够判断，是否值得为降低风险付出改变行为所需的精力。这要求很娴熟的技巧，有时候也未必被接受，特别是刚接触到一个你觉得不正常的团队。 2.以身作则，发现并解决问题，包括缺乏技术文档、解决问题的方法不一致、架构层过多、不一致的组件配置等。有时候，在所有人了解付出精力得到的回报之前，最初改变的种子就要到位，有点像大多数人第一次看到自动化单元测试时的反应。 很多软件团队都已经在使用敏捷和精益方法，更多的团队在朝这个方向走。因此，团队采用任何软件架构实践都应该产出真正的价值，否则就只是在浪费时间和精力。只有你能决定多少软件架构才合适，也只有你能决定如何最好地引导出你想在团队中看到的变化。祝你好运！ 1.不管敏捷方法被宣传成什么样，“敏捷”和“架构”真的水火不容吗？ 2.如果你正在一个敏捷软件团队中工作，你们考虑过架构吗？ 3.你是否认为自己在目前的软件开发团队中有足够的技术领导力？如果是，为什么？如果不是，又是为什么？ 4.多少预先设计才足够？该如何适可而止？整个团队是否都了解并理解这一观点？ 5.很多软件开发者参加编码培训班来磨练自己的技能。你将如何提升自己的软件架构技能？（比如，根据某些需求，在一张白纸上完成软件的方案设计） 6.什么是风险？所有的风险都等同吗？ 7.在你的团队里，由谁来识别技术风险？ 8.在你的团队中，由谁打理技术风险？如果让（通常是非技术的）项目经理或流程经理来，会是个好主意吗？ 9.当你忽视技术风险时，会发生什么？ 10.面对风险，你能主动做些什么？ 11.需要在你团队的工作方式中引入软件架构吗？如果是，你会怎么做？ 软件指南提供了“技术部落”网站的概览，包括对以下内容的总结： 1.网站背后的需求、约束和原则； 2.软件架构，包括高层次的技术选择和软件的结构； 3.基础设施架构以及软件如何部署； 4.网站的运营和支持方面。 1date: 2021-04-24 Linux文档项目 Usenet 是对程序员笔记的摘要，经过破译（要认清程序员的笔迹可并非易事）和编辑，并将它们有机地组织起来。 本书这一版经过了审阅和更新，反映了目前Linux开发的现状。 是一位程序员，希望利用Linux（或UNIX）提供给软件开发者的工具来加快程序开发的进度，尽量减少编程时间并让你的程序充分利用Linux系统所提供的功能.书中明确清晰的解释和分步骤的实验，将帮助你迅速提高编程能力和掌握所有的关键技术。 掌握标准Linux C语言函数库和由各种Linux或UNIX标准指定的其他工具的使用方法。 掌握如何使用大多数标准Linux开发工具。 学会通过DBM和MySQL数据库系统存储Linux中的数据。 理解如何为X视窗系统建立图形用户界面。我们将同时使用GTK（GNOME环境的基础）和Qt（KDE环境的基础）函数库。 拥有开发自己的实际应用程序的信心和能力。 Slashdot Distrowatch 王尔德认为，美是一种超越功利的存在，艺术除了自身以外没有其他的目的。对这句话的理解，我们必须放在美和艺术的范畴内来思考。美，实际就是不断去除功利与实用的一种存在，它是对生命自由的还原。也就是说，这一主张实际是对伪道德外衣的剥除。另外，艺术本身应该有其自足的一面，正如政治学、伦理学和经济学各有自己的关注对象，艺术也需要确立自己的地界，如果在艺术内部还有指向其他方向的目的，无疑会造成一定程度的混乱。这方面我们有过太多的教训，曾几何时，中国的文学和艺术就承担过不少非它们所能承受的重负。有鉴于此，我们不妨坚持一点“为艺术而艺术”。而凭借此点，读者或许也可以更深入地理解王尔德对艺术内部的思考及其实践的深刻性和前瞻性。 1date: 2021-04-24 结构简单、部件很少、易于维护、非常坚固. 时间—空间折中与双赢。编程文献和理论中充斥着时间—空间的折中：通过使用更多的时间，可以减少程序所需的空间。 Antoine de Saint-Exupéry是法国作家兼飞机设计师，他曾经说过：“设计者确定其设计已经达到了完美的标准不是不能再增加任何东西，而是不能再减少任何东西。”更多的程序员应该使用该标准来检验自己完成的程序。简单的程序通常比具有相同功能的复杂的程序更可靠、更安全、更健壮、更高效，而且易于实现和维护。 程序员的主要问题与其说是技术问题，还不如说是心理问题：他不能解决问题，是因为他企图解决错误的问题。问题的最终解决，是通过打破他的概念壁垒，进而去解决一个较简单的问题而实现的。 Adams将概念壁垒定义为“阻碍解题者正确理解问题或取得答案的心智壁垒”。 减少开发时间，同时使执行速度更快。 看起来很困难的问题也可以有一个简单的、意想不到的答案。 任何愿意在编程之前、之中和之后进行认真思考的程序员都有机会捕捉到这灵机一动。 二分搜索。初始条件是已知一个对象存在于一个给定的范围内，而一次探测操作可以告诉我们该对象是否低于、等于或高于给定的位置。二分搜索通过重复探测当前范围的中点来定位对象。如果一次探测没有找到该对象，那么我们将当前范围减半，然后继续下一次探测。当找到所需要的对象或范围为空时停止。 在程序设计中二分搜索最常见的应用是在有序数组中搜索元素。在查找项50时，算法进行如下探测。 我在许多系统中也遇到过相同的问题。程序员在开始的时候使用简单的顺序搜索数据结构，这在开始的时候通常都足够快。当搜索变得太慢的时候，对表进行排序并使用二分搜索通常可以消除瓶颈。 优秀程序员都有点懒：他们坐下来并等待灵机一动的出现而不急于使用最开始的想法编程。当然，这必须通过在适当的时候开始写代码来加以平衡。真正的技能就在于对这个适当时候的把握，这只能来源于解决问题和反思答案所获得的经验。 1date: 2021-04-25 每个故事的精髓都是一致的：“能用小程序实现的，就不要编写大程序”。 更一般性的问题也许更容易解决,对于程序设计来说，这意味着直接编写解决23种情况的问题很困难；而编写一个处理n种情况的通用程序，再令n=23来得到最终结果，却相对要容易一些。 数据结构对软件的一个贡献：将大程序缩减为小程序。数据结构设计还有许多其他正面影响，包括节省时间和空间、提高可移植性和可维护性。Fred Brooks [18] 在《人月神话》第 9 章中的评论就是针对节省空间的。而对于想要获得其他属性的程序员来说，下面的建议可谓金玉良言： 程序员在节省空间方面无计可施时，将自己从代码中解脱出来，退回起点并集中心力研究数据，常常能有奇效。（数据的）表示形式是程序设计的根本。 使用数组重新编写重复代码。冗长的相似代码常常可以使用最简单的数据结构——数组来更好地表述。 封装复杂结构。当需要非常复杂的数据结构时，使用抽象术语进行定义，并将操作表示为类。 尽可能使用高级工具。超文本、名字—值对、电子表格、数据库、编程语言等都是特定问题领域中的强大的工具。 从数据得出程序的结构。本章的主题就是：通过使用恰当的数据结构来替代复杂的代码，从数据可以得出程序的结构。万变不离其宗：在动手编写代码之前，优秀的程序员会彻底理解输入、输出和中间数据结构，并围绕这些结构创建程序。 问题定义、算法设计以及数据结构选择。如果这些步骤都完成得很好，那么编写正确的程序通常是很容易的。 虽然第一篇二分搜索论文在 1946 年就发表了，但是第一个没有错误的二分搜索程序却直到1962年才出现。 编程是一门艺术活，我有一个同事，能把类图画成一个小乌龟的形状，天才呀！作为一位技术人员，最基本的品质就是诚实，“知之为知之，不知为不知，是知也”，自己不懂没有关系，去学，学无止境， 1date: 2021-04-26 无趣，深深的感到无趣 怎么准确地实践接口隔离原则？实践、经验和领悟！ 软件设计最大的难题就是应对需求的变化，但是纷繁复杂的需求变化又是不可预料的。我们要为不可预料的事情做好准备，这本身就是一件非常痛苦的事情， 我们写程序重构的最终目的就是：简单、清晰。代码是让人看的，不是写完就完事了，现在的高级语言，要像写中文汉字一样，你写的，别人能看懂。这就是建造者模式。 软件工程的目的是控制复杂度，而不是增加复杂度。 “尽可能地‘盗用’已有的代码。”库函数很棒，尽可能地利用它们来解决问题。首先搜索系统库，然后再从其他库中寻找适当的函数。不过，在任何一种工程活动中，并非所有的工具都总能满足所有客户的需求。当库函数不能满足需求时，程序员就需要亲自动手编写函数， 到目前为止， shell脚本最常见的一个用途就是处理文本文件。检查日志文件、读取配置文件、处理数据元素，shell脚本可以帮助我们将文本文件中各种数据的日常处理任务自动化。但仅靠shell脚本命令来处理文本文件的内容有点勉为其难。如果想在shell脚本中处理任何类型的数据，你得熟悉Linux中的sed和gawk工具。这两个工具能够极大简化需要进行的数据处理任务。 1date: 2021-04-27 无论建造什么系统，不管如何复杂，都有其基本的目的，有其要处理的业务，有其所满足的基本需要。通过依次审视用户界面、硬件或系统的特殊细节、算法编码和效率问题，我们将最终找出它的核心，通常简单而又直接。就像来自好莱坞电影的所谓高层概念（high concept），我们能用一句或两句话表述。这种纯粹的表述是起点。 需求分析说的是“制定一系列指导方针，我们将利用它了解任务什么时候完成且用户什么时候满足”。系统规范说明指出，“这是程序将做什么（不是如何做）以满足需求的一个描述”。需求分析实际上是我们和用户之间的一个合同（即使用户在我们的公司工作或是另一些对象或系统）。系统规范说明是对问题的一个顶层探测，且在一定程度上要说明项目是否能做和将需多少时间。 我们的目标是寻找实现系统体系结构的核心，尽管这个系统在第一遍不太完整。我们正在创建一个框架，在将来的反复中可以完善它。我们正在完成第一遍多系统集成和测试，向客户（stakeholder）提出反馈意见，关于他们的系统看上去如何以及如何发展等。理想情况下，我们还可以暴露一些严重的问题。我们大概还可以发现对最初的体系结构能做哪些改变和改进—本来在没有实现这个系统之前，可能是无法了解这些内容的。 建立这个系统的一部分工作是实际检查，就是对照需求分析和系统规范说明与测试结果（无论需求分析和规范说明以何种形式存在）。确保我们的测试结果与需求和用例符合。当系统核心稳定后，我们就可以向下进行和增加更多的功能了。 一旦代码框架运行起来，我们增加的每一组特征本身就是一个小项目。在一次迭代（iteration）期间，我们增加一组特征，一次迭代是一个相当短的开发时期。 当我们对问题有了深入的学习和领会之后，可能需要做大量的修改。如果我们使软件不断进化，直到使软件正确，无论在短期内还是在长期内，将产生极为优雅的程序。进化是使程序从好到优秀，是使第一遍不理解的问题变清楚的过程。它也是我们的类能从只为一个项目使用进化为可重用资源的过程。 因为认识错误是学习的最快途径 C++学习时可能会比继续用C语言有更高的生产效率（即便考虑到程序员正在犯更多的错误和每天写更少的代码行）。 1date: 2021-04-28 David Flanagan on Programming Developer Survey Results 2019 Learn web development 无论你做什么，总会有一个限制因素决定你完成它的速度和程度。你的工作就是对任务进行研究，找出那个限制因素。然后集中你所有的力量，消除这个瓶颈。 1date: 2021-04-29 计算机思维可以分解为四个部分： ·问题分解 ·模式识别 ·抽象思维 ·算法设计 人们不再会为氯化钠开战了。在过去好几千年里，盐一直是世界上最重要的商品，但这种统治地位一去不复返了。 取代盐的不是某种更优越的离子化合物，而是一种更优越的系统。石油也面临着相同的状况。 石油业或许是迄今为止利润最丰厚的行业，尚属稀罕物的电动汽车也不可能在短期内对石油业构成严重威胁。石油业年产值高达数万亿美元。石油的生产、供应和分配事关地缘政治，是导致地缘政治动荡的重要原因，从中东、苏丹到南中国海，每一片大陆的冲突都以此为中心。石油所引发的纷争仍在延续，燃烧石油仍在以不可持续的方式导致大气变暖，但我们也必须承认，石油和盐一样都是现代社会不可或缺的活力之源。如果没有大量的汽油来为轿车和卡车提供燃料，让它为高度分散的乡镇、城市和农村建立连接，我们所熟悉的美国社会便难以维系。我们仍然要依靠石油来维持我们的生活品质、出行自由并连接全球各经济体。如果石油突然消失，许多人的生活很快就会变得非常凄惨。 然而，这并不意味着石油不会面临与快餐店免费盐包相同的遭遇。美国能源信息署数据显示，2014年，美国消费的石油制品中，汽油所占比例约为47%。石油虽然也用于生产航空燃油、塑料和洗涤剂等许多其他产品，但从根本上说，石油行业的财富依赖轿车、卡车和巴士。离开机动车油箱，今天那些石油巨头在全球经济中的地位便会大大削弱。 传统汽车生产商一年花费几十亿美元做广告，以鼓励人们购买它们的产品。2013年，仅通用一家公司就花了55亿美元广告费。而特斯拉几乎没怎么花钱为自己的汽车打广告。汽车生产商投资广告是因为广告越多，市场需求就越大。但如果特斯拉和其他电动汽车公司也开始做广告宣传电动汽车的好处，又会发生什么呢？","categories":[{"name":"Random Thoughts","slug":"Random-Thoughts","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/"},{"name":"2021","slug":"Random-Thoughts/2021","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/2021/"}],"tags":[{"name":"Essay","slug":"Essay","permalink":"http://muxueweiyu.github.io/tags/Essay/"}]},{"title":"读史明智","slug":"Random Thoughts/话题集/读史明智","date":"2021-03-31T14:33:04.000Z","updated":"2021-04-30T08:06:41.354Z","comments":true,"path":"2021/03/31/Random Thoughts/话题集/读史明智/","link":"","permalink":"http://muxueweiyu.github.io/2021/03/31/Random%20Thoughts/%E8%AF%9D%E9%A2%98%E9%9B%86/%E8%AF%BB%E5%8F%B2%E6%98%8E%E6%99%BA/","excerpt":"剑桥中国史 哈佛中国史 中国近代史","text":"剑桥中国史 哈佛中国史 中国近代史 剑桥中国秦汉史P46-P60","categories":[{"name":"Random Thoughts","slug":"Random-Thoughts","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/"},{"name":"话题集","slug":"Random-Thoughts/话题集","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/%E8%AF%9D%E9%A2%98%E9%9B%86/"}],"tags":[{"name":"thinking","slug":"thinking","permalink":"http://muxueweiyu.github.io/tags/thinking/"}]},{"title":"鲁迅","slug":"People that affect me/鲁迅","date":"2021-03-29T12:29:27.000Z","updated":"2021-03-29T12:32:18.697Z","comments":true,"path":"2021/03/29/People that affect me/鲁迅/","link":"","permalink":"http://muxueweiyu.github.io/2021/03/29/People%20that%20affect%20me/%E9%B2%81%E8%BF%85/","excerpt":"“高山仰止，景行行止。虽不能至，然心向往之。”","text":"“高山仰止，景行行止。虽不能至，然心向往之。” 序文“行山阴道上，千岩竞秀，万壑争流，令人应接不暇”；有这种环境，所以历代有著名的文学家美术家，其中如王逸少的书，陆放翁的诗，尤为永久流行的作品。最近时期，为旧文学殿军的，有李越缦先生，为新文学开山的，有周豫才先生，即鲁迅先生。 鲁迅先生本受清代学者的濡染，所以他杂集会稽郡故书，校嵇康集，辑谢承后汉书，编汉碑帖，六朝墓志目录，六朝造象目录等，完全用清儒家法。惟彼又深研科学，酷爱美术，故不为清儒所囿，而又有他方面的发展，例如科学小说的翻译，中国小说史略，小说旧闻钞，唐宋传奇集等，已打破清儒轻视小说之习惯；又金石学为自宋以来较发展之学，而未有注意于汉碑之图案者，鲁迅先生独注意于此项材料之搜罗；推而至于引玉集，木刻纪程，北平笺谱等等，均为旧时代的考据家赏鉴家所未曾著手。 先生阅世既深，有种种不忍见不忍闻的事实，而自己又有一种理想的世界，蕴积既久，非一吐不快。但彼既博览而又虚衷，对于世界文学家之作品，有所见略同者，尽量的迻译，理论的有卢那卡尔斯基，蒲力汗诺夫之艺术论等；写实的有阿尔志跋绥夫之工人绥惠略夫，果戈理之死魂灵等，描写理想的有爱罗先珂及其他作者之童话等，占全集之半，真是谦而勤了。 “借他人之酒杯，浇自己的块垒”，虽也痛快，但人心不同如其面，环境的触发，时间的经过，必有种种蕴积的思想，不能得到一种相当的译本，可以发舒的，于是有创作。鲁迅先生的创作，除坟，呐喊，野草数种外，均成于一九二五至一九三六年中，其文体除小说三种，散文诗一种，书信一种外，均为杂文与短评，以十二年光阴成此多许的作品，他的感想之丰富，观察之深刻，意境之隽永，字句之正确，他人所苦思力索而不易得当的，他就很自然的写出来，这是何等天才！又是何等学力！ 综观鲁迅先生全集，虽亦有几种工作，与越缦先生相类似的；但方面较多，蹊径独辟，为后学开示无数法门，所以鄙人敢以新文学开山目之。然欤否欤，质诸读者。 民国二十七年六月一日蔡元培","categories":[{"name":"People that affect me","slug":"People-that-affect-me","permalink":"http://muxueweiyu.github.io/categories/People-that-affect-me/"}],"tags":[{"name":"affect","slug":"affect","permalink":"http://muxueweiyu.github.io/tags/affect/"},{"name":"people","slug":"people","permalink":"http://muxueweiyu.github.io/tags/people/"}]},{"title":"一百天","slug":"Program/CF计划/项目启动","date":"2021-03-27T14:33:04.000Z","updated":"2021-03-31T15:02:53.945Z","comments":true,"path":"2021/03/27/Program/CF计划/项目启动/","link":"","permalink":"http://muxueweiyu.github.io/2021/03/27/Program/CF%E8%AE%A1%E5%88%92/%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8/","excerpt":"想知道到底能做到什么程度！","text":"想知道到底能做到什么程度！ 第一天2021-03-28C++ Tutorial Cplusplus linuxjourney linuxkernel head first C 第一章内容，C语言基础知识入门 C++中文版 第一章预备知识入门 C#深入理解 第一章基础知识 Django基础教程 第一章导言 1学无止境，学习新的内容，总结旧的知识。实践时必须输入自己输入代码已经过时了重复的劳动无意义，代码存在于一个web站点 第二天2021-03-2912345678910111213141516JavaScript 基础教程了解JavaScriptJava 8实战基础知识Python web开发React 快速上手开发SQL基础教程SVG深入理解 书中世界千变万化，基础上进度继续，Linux 命令基础，还是去阅读Qwerty-Learner的开发issue。 practice practice pracitce 反复练习，熟悉命令熟悉api编写 “为学日益,为道日损,损之又损,以至于无为,无为而无不为” the spoken word the writer word 语言与文字存在紧密联系。 第三天2021-03-30整理往期的内容，学习造轮子了 第四天2021-03-31继续整理，开始英文播客 每天读点历史，让思路清晰 剑桥中国史 哈佛中国史 中国近代史","categories":[{"name":"Program","slug":"Program","permalink":"http://muxueweiyu.github.io/categories/Program/"},{"name":"CF计划","slug":"Program/CF计划","permalink":"http://muxueweiyu.github.io/categories/Program/CF%E8%AE%A1%E5%88%92/"}],"tags":[{"name":"writing","slug":"writing","permalink":"http://muxueweiyu.github.io/tags/writing/"}]},{"title":"调控一体智能防误操作系统","slug":"professional/工作/调控一体智能防误操作系统","date":"2021-03-27T11:04:14.000Z","updated":"2021-03-28T02:32:55.959Z","comments":true,"path":"2021/03/27/professional/工作/调控一体智能防误操作系统/","link":"","permalink":"http://muxueweiyu.github.io/2021/03/27/professional/%E5%B7%A5%E4%BD%9C/%E8%B0%83%E6%8E%A7%E4%B8%80%E4%BD%93%E6%99%BA%E8%83%BD%E9%98%B2%E8%AF%AF%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/","excerpt":"调控一体智能防误操作系统demo调控一体智能防误操作系统的设计与实现_史思红 D5000系统在安阳电网调控一体化的应用研究_邵辰飞","text":"调控一体智能防误操作系统demo调控一体智能防误操作系统的设计与实现_史思红 D5000系统在安阳电网调控一体化的应用研究_邵辰飞 设计思想电气设备操作正确性是电网安全运行的一个重要指标，传统的人工编制操作票和人工审核，过度地依赖人员的工作经验、技能能力、责任态度和人为意识等不稳定因素，存在不易可控的隐患。本demo通过学习调控一体智能防误操作系统的设计与实现_史思红基本完成原操作功能 调度拟票 命令解析 到监控执行 全过程防误校核， 系统需求分析 系统设计 系统实现 系统测试 总结展望 系统需求分析随着“大运行、大检修”体系的建设，变电站无人值班大量推广，设备监控权限的上移和设备远方操作的普及，调度、监控运行操作安全管理的正确性越来越重要，调度、监控运行人员的日常工作量和安全压力日益剧增，现场值班人员越来越少，人员变动频繁，传统的以运行人员的技能水平为主的防误操作方式已不能满足现在的安全需求，以技术手段来减低运行人员的工作量、提高调度操作及防误管理的模式愈发凸显重要性，调度操作票智能推理和防误技术实用化亦愈发需要推广。 原系统功能 配网图形管理 配网资源管理 配网运行管理 综合查询 其他管理 新系统需求分析 系统配置管理 调度操作票管理 监控操作票管理 一体化防误管理 操作票全过程管理 系统设计 系统设计原则 软件架构设计 网络架构原理 智能客户端 系统网络性能 系统配置管理调度操作票管理 操作票全过程管理 数据库设计 系统实现 系统管理模块 调度操作票管理 监控操作票管理 设备信息校验 操作票全过程管理 系统测试测试目的和方法测试环境测试用例设计测试内容和结论","categories":[{"name":"professional","slug":"professional","permalink":"http://muxueweiyu.github.io/categories/professional/"},{"name":"工作","slug":"professional/工作","permalink":"http://muxueweiyu.github.io/categories/professional/%E5%B7%A5%E4%BD%9C/"}],"tags":[{"name":"skill","slug":"skill","permalink":"http://muxueweiyu.github.io/tags/skill/"},{"name":"demo","slug":"demo","permalink":"http://muxueweiyu.github.io/tags/demo/"}]},{"title":"Mathmatics","slug":"professional/math/Mathmatics","date":"2021-03-26T13:07:41.000Z","updated":"2021-03-26T13:08:42.754Z","comments":true,"path":"2021/03/26/professional/math/Mathmatics/","link":"","permalink":"http://muxueweiyu.github.io/2021/03/26/professional/math/Mathmatics/","excerpt":"Mathmatic","text":"Mathmatic","categories":[{"name":"professional","slug":"professional","permalink":"http://muxueweiyu.github.io/categories/professional/"},{"name":"math","slug":"professional/math","permalink":"http://muxueweiyu.github.io/categories/professional/math/"}],"tags":[{"name":"logic","slug":"logic","permalink":"http://muxueweiyu.github.io/tags/logic/"},{"name":"learn","slug":"learn","permalink":"http://muxueweiyu.github.io/tags/learn/"}]},{"title":"线性代数","slug":"professional/math/线性代数","date":"2021-03-26T13:06:32.000Z","updated":"2021-03-26T13:43:11.521Z","comments":true,"path":"2021/03/26/professional/math/线性代数/","link":"","permalink":"http://muxueweiyu.github.io/2021/03/26/professional/math/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/","excerpt":"Linear algebra","text":"Linear algebra 用途与应用几乎在所有数学领域中得到使用，因此几乎在所有使用数学的科学领域中都具有线性代数的意义。这些应用程序可以分为几大类。 周围空间的几何形状功能分析复杂系统研究科学计算","categories":[{"name":"professional","slug":"professional","permalink":"http://muxueweiyu.github.io/categories/professional/"},{"name":"math","slug":"professional/math","permalink":"http://muxueweiyu.github.io/categories/professional/math/"}],"tags":[{"name":"思维，逻辑","slug":"思维，逻辑","permalink":"http://muxueweiyu.github.io/tags/%E6%80%9D%E7%BB%B4%EF%BC%8C%E9%80%BB%E8%BE%91/"}]},{"title":"Learn-Linux","slug":"Program/Linux/Learn-Linux","date":"2021-03-26T12:27:46.000Z","updated":"2021-04-17T14:28:20.848Z","comments":true,"path":"2021/03/26/Program/Linux/Learn-Linux/","link":"","permalink":"http://muxueweiyu.github.io/2021/03/26/Program/Linux/Learn-Linux/","excerpt":"基础学习learning kernel","text":"基础学习learning kernel How To Install PHP 7, 7.2 ,&amp; 7.3 On Ubuntu 18.04 How To Install Linux, Apache, MySQL, PHP (LAMP) stack on Ubuntu 18.04","categories":[{"name":"Program","slug":"Program","permalink":"http://muxueweiyu.github.io/categories/Program/"},{"name":"Linux","slug":"Program/Linux","permalink":"http://muxueweiyu.github.io/categories/Program/Linux/"}],"tags":[{"name":"System","slug":"System","permalink":"http://muxueweiyu.github.io/tags/System/"}]},{"title":"硬件开发","slug":"Program/硬件编程/硬件开发","date":"2021-03-26T09:20:30.000Z","updated":"2021-03-26T12:27:45.013Z","comments":true,"path":"2021/03/26/Program/硬件编程/硬件开发/","link":"","permalink":"http://muxueweiyu.github.io/2021/03/26/Program/%E7%A1%AC%E4%BB%B6%E7%BC%96%E7%A8%8B/%E7%A1%AC%E4%BB%B6%E5%BC%80%E5%8F%91/","excerpt":"硬件编程源码开放学ARM","text":"硬件编程源码开放学ARM","categories":[{"name":"Program","slug":"Program","permalink":"http://muxueweiyu.github.io/categories/Program/"},{"name":"硬件编程","slug":"Program/硬件编程","permalink":"http://muxueweiyu.github.io/categories/Program/%E7%A1%AC%E4%BB%B6%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://muxueweiyu.github.io/tags/Linux/"},{"name":"Program","slug":"Program","permalink":"http://muxueweiyu.github.io/tags/Program/"}]},{"title":"JS学习工具","slug":"Program/JS/JS学习工具","date":"2021-03-26T08:46:02.000Z","updated":"2021-03-26T08:48:28.432Z","comments":true,"path":"2021/03/26/Program/JS/JS学习工具/","link":"","permalink":"http://muxueweiyu.github.io/2021/03/26/Program/JS/JS%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7/","excerpt":"node用这个来搭建博客JavaScript参考文档","text":"node用这个来搭建博客JavaScript参考文档","categories":[{"name":"Program","slug":"Program","permalink":"http://muxueweiyu.github.io/categories/Program/"},{"name":"JS","slug":"Program/JS","permalink":"http://muxueweiyu.github.io/categories/Program/JS/"}],"tags":[{"name":"program","slug":"program","permalink":"http://muxueweiyu.github.io/tags/program/"},{"name":"Tool","slug":"Tool","permalink":"http://muxueweiyu.github.io/tags/Tool/"}]},{"title":"Git tutorial","slug":"professional/effience/git tutorial","date":"2021-03-25T01:17:21.000Z","updated":"2021-04-30T08:06:54.604Z","comments":true,"path":"2021/03/25/professional/effience/git tutorial/","link":"","permalink":"http://muxueweiyu.github.io/2021/03/25/professional/effience/git%20tutorial/","excerpt":"提高效率","text":"提高效率 Working with RemotesShowing Your Remotes git remote git remote -v origin:https://github.com/schacon/ticgit (fetch) origin:https://github.com/schacon/ticgit (push) git push origin master # 查看项目的tag git tag git checkout v0.10.48","categories":[{"name":"professional","slug":"professional","permalink":"http://muxueweiyu.github.io/categories/professional/"},{"name":"effience","slug":"professional/effience","permalink":"http://muxueweiyu.github.io/categories/professional/effience/"}],"tags":[{"name":"efficiency","slug":"efficiency","permalink":"http://muxueweiyu.github.io/tags/efficiency/"}]},{"title":"FQA","slug":"Program/Python/FQA","date":"2021-03-25T00:06:23.000Z","updated":"2021-05-03T03:07:13.961Z","comments":true,"path":"2021/03/25/Program/Python/FQA/","link":"","permalink":"http://muxueweiyu.github.io/2021/03/25/Program/Python/FQA/","excerpt":"列出在使用Pythonh中解决的问题","text":"列出在使用Pythonh中解决的问题 Python 设立虚拟环境1python3 -m venv tutorial-env python -m http.server 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465App Engine 可以写一本书了（实际上已经有人写了），但是，这一章不能面面俱到。但如果读者想深入研究，下面的一些资源和特性可能有所帮助。Blogstore，让用户处理对Datastore来说太大的数据对象（blob）（如媒体文件） http://code.google.com/appengine/docs/python/blobstore/overview.html功能http://www.slideshare.net/jasonacooper/strategies-for-maintaining-app-engine-availability-during-read-only-periodshttp://code.google.com/appengine/docs/python/howto/maintenance.htmlChannel：让应用直接向浏览器发送数据的服务，即Reverse Ajax、browser push、Comet。http://googleappengine.blogspot.com/2010/12/happy-holidays-from-app-engine-team-140.htmlhttp://blog.myblive.com/2010/12/multiuser-chatroom-with-app-engine.htmlhttp://code.google.com/p/channel-tac-toe/http://arstechnica.com/web/news/2010/12/app-engine-gets-streaming-api-and-longer-back ground-tasks.ars高复制Datastore。http://googleappengine.blogspot.com/2011/01/announcing-high-replication-datastore.htmlhttp://code.google.com/appengine/docs/python/datastore/hr/overview.html•Mapper：MapReduce的第一个步骤，让用户遍历用户持久数据。http://googleappengine.blogspot.com/2010/07/introducing-mapper-api.htmlhttp://code.google.com/p/appengine-mapreduce/Matcher：高可扩展实时匹配架构：注册查询来匹配对象流。http://www.onebigfluke.com/2010/10/magical-api-from-future-app-engines.htmlhttp://groups.google.com/group/google-appengine/browse_thread/thread/5462e14c31f44befhttp://code.google.com/p/google-app-engine-samples/wiki/AppEngineMatcherService命名空间：通过划分Google App Engine数据，创建多租户的应用程序。http://googleappengine.blogspot.com/2010/08/multi-tenancy-support-high-performance_17.htmlhttp://code.google.com/appengine/docs/python/multitenancy/overview.htmlhttp://code.google.com/appengine/docs/python/multitenancy/multitenancy.htmlOAuth：联合验证服务，无须交换凭证信息就可让第三方访问应用和数据。http://code.google.com/appengine/docs/python/oauth/overview.htmlhttp://oauth.net流水线：管理多个长时间运行的任务/工作流，整理其结果（参见 Fantasm，第三方编写的另一个更简单的工作流管理器）。http://code.google.com/p/appengine-pipeline/wiki/GettingStartedhttp://code.google.com/p/appengine-pipeline/http://news.ycombinator.com/item?id=2013133http://googleappengine.blogspot.com/2011/03/implementing-workflows-on-app-engine.html Django和Google App Engine是今日Python社区中两个最强大和灵活的Web框架。 根据对任务的契合程度全能的程序员，甚至会过一段时间就换一个框架。社区能拥有这么多大而且著名的框架非常不错。尽管本章开头的引用有点口是心非，但背后依然有一些道理，如果每个人都需要自己编写Web框架，世界会变得很糟。 Matz（Ruby的作者）有一个伟大的论证，即“开源要么不断演变，要么消失。” 我们使语言一直进化……[我们]要么前进，要么死亡。 而大幅度提高生产效率的惟一办法就是使用其他人的代码，即是去使用库。","categories":[{"name":"Program","slug":"Program","permalink":"http://muxueweiyu.github.io/categories/Program/"},{"name":"Python","slug":"Program/Python","permalink":"http://muxueweiyu.github.io/categories/Program/Python/"}],"tags":[{"name":"program","slug":"program","permalink":"http://muxueweiyu.github.io/tags/program/"},{"name":"FQA","slug":"FQA","permalink":"http://muxueweiyu.github.io/tags/FQA/"}]},{"title":"职业规划","slug":"Random Thoughts/话题集/职业规划","date":"2021-03-24T15:03:28.000Z","updated":"2021-03-27T10:52:55.605Z","comments":true,"path":"2021/03/24/Random Thoughts/话题集/职业规划/","link":"","permalink":"http://muxueweiyu.github.io/2021/03/24/Random%20Thoughts/%E8%AF%9D%E9%A2%98%E9%9B%86/%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/","excerpt":"知行合一-热爱工作，享受生活。 对软件开发者这行有浓厚的兴趣，想成为一名出色的软件开发者，想每天充满激情地工作，想要把开发软件视为一项事业而不仅仅是一份工作。有效的方法、经验和态度，要尊重并热爱你的职业。","text":"知行合一-热爱工作，享受生活。 对软件开发者这行有浓厚的兴趣，想成为一名出色的软件开发者，想每天充满激情地工作，想要把开发软件视为一项事业而不仅仅是一份工作。有效的方法、经验和态度，要尊重并热爱你的职业。 前言做到一点，燃烧吧，燃烧你的热情，效率提高 现在能做什么，明天要做什么，以及我未来的职业道路应该怎样规划。 每个人都有卓越之处，不过需要找到自己真正喜欢的事情把它激发出来。如果不喜欢周围的环境，不喜欢使用的工具，不喜欢工作的领域，那又怎么可能激发呢？ 虚度光阴，一天算一天，最后一事无成。世界不会因我没有完成工作而停滞不前，我讨厌这种感觉，存在毫无意义呀，我希望所做的事情在推动世界的发展。工作只是其中的一部分。 快乐和满足并不总源自机遇。需要思考，确定目标，然后行动，犯错误，去思考怎么去改变它。 终极目标就是追求快乐，一旦满足生存的基本需求，人们就会转而去追求快乐，当行动与目标相悖，往往是因为人们纠缠做某事的方法，而忘记了最终的目的。 想和能让我进步的人在一起，就得成为他们中的一员，而在某个公司工作或者在大学进修是无法走向卓越的，弄明白成为他们中的一员意味着什么，努力去做，我希望可以在有关软件的会议上做重要演讲。 成为一名专业开发人员不够资格，至少从招聘广告的要求来说，不符合传统意义上对一名普通软件工程师的要求。 重要的一步跨过普通软件开发人员，(不过谁会满足做一名普通的软件开发人员呢？) 渴望成功的人肯定比单纯完成工作的人更有可能成功，即使不能成为martin flower、Linus Torvalds那样的大神，但至少可以让我们不再平凡。 制定自己的计划长期雇佣对公司来说是一笔很大的开销。职业当作正在制作的产品的生命周期，我的技术成就了这个产品。 选择市场 供需关系 投资 知识和技术是这件商品的基础，需要合理投资，市场化的重要前提。 执行 技术出色还不过呀 市场 在公司和行业中得到认可。 选择市场示例程序只需稍加改动——但根本就不知道自己在做什么。可问题是，就像是用纸盘搭建房子，每增添一张纸牌，就增加一份坍塌的危险，根部不知道这个程序如何工作，没一点儿改动，都有可能导致程序完全失败。 产品的消费者是谁？我的”产品”就是提供的服务构成的，服务是什么？又出售给谁？接下来一年，对这商品的需求是会增加还是减少？在选择上又愿意投下多少赌注？ 12345678910111213141516171819202122232425262728293031323334353637383940414243不要在价格上竞争，承受不起呀。You can&#x27;t compete on price. In fact, you can&#x27;t afford to compete on price.发现市场上的不平衡。Explaint market imbalances.仔细思考在哪个商业领域投入时间。Now is the time to think about business domains you invest your time in.做求职中最差的乐手。Be the worst guy in every band you&#x27;re in.你身边的人会对你产生很大的影响，明智的选择你的圈子。The people around you affect your own performance. Choose your crowd wisely.没人给过我机会……？ 要学会抓住机遇！I haven&#x27;t been given the opportunity……？ Serize the opportunity!通才很少，所以很珍贵。Generalists are rare……and, therefore,precious.你的技术水平应该超越技术平台。Your skills should transcend technology platforms.很多人认为专攻某种技术就简单地意味着不知道其他技术。Too many of us seem believe taht specializing in something simply means not knowing about other things.以待定技术厂商为中心的观点，缺乏远见。Vendor-centric views are typically myopic.工作，因为你无法停止工作。Work because you couldn&#x27;t not work. 研究技术市场需求，招聘广告和招聘网站，高需求or低需求。登陆外包公司的网站,比较记录，思考需要多长时间才能为相应的市场提供服务。这个时间差是市场不平衡的阶段。 只会编程是不够的，深入了解所处领域。行业经历成为重要才能。客户所处行业的专业语言与他们交流，那这就是一项非常重要的技能，换位思考，相互了解工作起来更容易。 公司行业有关的杂志，列出问题 行业网站，大事件和专题文章。介绍并思考如何影响。 在思维上投资。 编程是思维不只是语言。 单纯因为兴趣学习新东西，把职业视为动力。接触边缘技术和方法让自己更有深度、更加优秀、更具智慧，以及更具创造力。 我想看到以前从来没有见过的领域，需要一些有目的性的冒险，如果在工作中没有感到乐趣，那就不可能出色地工作。 职业道路上，最担心什么？ 做一名通才 需求是灵活的，精简团队的时候，一个只会测试或者只会编码的人肯定会被裁掉的，所以需要掌握全局 职业阶梯的各层 平台和操作系统 代码和数据 系统和应用 业务和IT 成为一名专家 缺乏技术深度呀 工作环境大部分在虚拟机上编译并执行编程语言，所以可以花点时间学习虚拟机内部是如何工作地，花点时间学习源文件，外部函数库，从哪来的，输入一个外部函数库到底意味着什么？ 编译程序、操作系统或者虚拟机如何将多个代码段连接起来，形成一个连贯系统？工作之余，找份教课地兼职，不为别的就是单纯的练习 不要孤注一掷 下载一个开源的JBoss或者Geronimo服务器，留出时间来学习这些服务器内部是如何运作的，而不只是学习如何操作。视野被拓宽了，思想开放了，大脑解析的概念和模式更易于扩展及广泛应用， 热爱它，不然就离开它 在产品上投资学习钓鱼学习行业是如何运转的寻找良师做一名良师练习，练习，再练习做事的方法站在巨人的肩膀上在工作中，将自己自动化123456789101112131415161718192021222324252627282930313233343536要主动问，不要等着别人来告诉你！Don&#x27;t wait to be told,Ask!只有了解了一个行业后，你才能创造性地有所建树。You can&#x27;t creatively help a business until you know how it works.可以依赖别人，但需要这个人是靠得住的。It&#x27;s OK to depend on someone. Just make sure it&#x27;s the right person.想要弄明白自己是不是真的懂得某一知识，那就把它讲给其他人听。To find out whether you really know something, try teaching it to some else.做导师不会下岗。Mentors tend not to get laid off.在极限处练习。Practice at your limits.想要拥有自己得步骤，那就执行它。If you want to feel own a process, help implement it.从现有程序中得到领悟。Mine existing code for insights.用现有程序来反思自己得程序。Use existing code to reflect on your own capabilities. 执行就是现在读心术每日成绩别忘了你在为谁工作安分守己今天我能把工作做到多好？你的价值是多少一桶水中的鹅卵石爱上维护8小时激情燃烧学习如何失败说“不“不要恐慌说出来、行动、展示1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859就现在，我们能做些什么？What can we do？ Right Now?读心术用的好，人们就会信任你。The mind-reading trick, if done well, leads to people depending on you.每天都有可汇报得成绩Have an accomplishment to report every day.经理得成功，就是你们得成功。Your managers&#x27; successes are your successes.需有雄心，但不必路人皆知。Be ambitious,but don&#x27;t wear it on your sleeve.你能为工作增添多少乐趣？How muuch more fun could you make your job?问自己 ”今天实现自己得价值了么？“Ask， ”Was I worth it today?“小心！别让成功冲昏了头脑。Beware of being blinded by your own succes.维护也可以成为自由和创造的沃土。Maintenance can be a place of freedom and creativity.做项目像是马拉松，而不是全速短跑。Projects are marathons, not sprints.每个错误的音调离正确的音调不过一步之遥。Every wrong nots is but one step away form a right one.充满压力的时候是赢得忠诚的最好时机。Stressful times offer the best opportunities to build loyalty.为了避免失望而说”是“，就是再说谎。Saying &quot;yes&quot; to avoid disappointment is just lying.英雄从不恐慌。Heroes never panic.状态报告可以帮助你推销自己。Status reports can help you market yourself. 推销……不仅仅是迎合不要忽视感觉探险向导学会沟通，善于写作到场适当的言语改变世界让人们听到你的声音创建自己的商标发布你编写的程序变为卓越的能力建立关系12345678910111213141516171819202122232425262728293031323334353637383940414243绩效考核永远都不会是主观的。Performance appraisals are never objective.客户害怕你。Your customers are afraid of you.你自己就是你需要解释的内容。You are what you can explain.了解你的同事。Learn about your colleagues.请用行业术语推销你的成就。Market your accomplishments in the language of your business.带着任务去上班，并确保别人知道你的任务。Have a misson. Make sure people know it.你的名字就是你的商标。Your name is your brand.Google永远不会忘记。Google never forgets.人人都能使用Rails，但很少有人能开发出Rails。Anyone can use Rails. Few can say Rails contributer.展示或者让它死亡！Demo or die!恐惧感使我们无法接近专业人士。Fear gets between us and the pros. 保持技术领先已经过时的技术你已经失去工作了没有终点的道路给自己做一份蓝图要注意观察市场变化镜子里的胖子南印度捉猴陷阱避免瀑布型职业计划每天都有进步独立1234567891011121314151617181920212223你引以为傲的新技术已经过时了。Your shing new skills are already obsolete.你不是你的工作。You are not your job.不要关注结果，要关注做事情的过程。Focus on doing, not on being done .留意那些技术达人。Watch the alpha geeks.开发员们，需自我反省。Developer, review thyself.价值僵困使你变弱。Rigid values make you fragile.","categories":[{"name":"Random Thoughts","slug":"Random-Thoughts","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/"},{"name":"话题集","slug":"Random-Thoughts/话题集","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/%E8%AF%9D%E9%A2%98%E9%9B%86/"}],"tags":[{"name":"想法","slug":"想法","permalink":"http://muxueweiyu.github.io/tags/%E6%83%B3%E6%B3%95/"},{"name":"一切可能","slug":"一切可能","permalink":"http://muxueweiyu.github.io/tags/%E4%B8%80%E5%88%87%E5%8F%AF%E8%83%BD/"}]},{"title":"Qwerty Learner推荐及想法","slug":"Random Thoughts/话题集/Qwerty Learner推荐及想法","date":"2021-03-24T09:24:55.000Z","updated":"2021-03-24T14:27:14.321Z","comments":true,"path":"2021/03/24/Random Thoughts/话题集/Qwerty Learner推荐及想法/","link":"","permalink":"http://muxueweiyu.github.io/2021/03/24/Random%20Thoughts/%E8%AF%9D%E9%A2%98%E9%9B%86/Qwerty%20Learner%E6%8E%A8%E8%8D%90%E5%8F%8A%E6%83%B3%E6%B3%95/","excerpt":"Qwerty Learner一个非常值得使用的打字项目","text":"Qwerty Learner一个非常值得使用的打字项目 想法一直都找一款可以练习打字的，有很多但都不太满意，在telegram频道看到了推荐的这个项目，在体验了一个小时，使用体验非常赞，我现在的想法是依这个项目为准，搞懂整个原理，增加航空词典，古诗词典。是否可以在网站上实现功能先不考虑，先在本地运行。 项目安排时间（一周完成）： 阅读项目查找资料第一天 分析部署第二天 调试第三天 测试第四天 文档报告第五天 文档报告第六天 文档报告第七天 阅读项目查找资料一个个人项目的启动是需要学习很多参考更多借鉴美的作品，看来很多类似的实现，越能感觉到一个好的项目需要持久的更新，更需要详细的文档，否则无法形成良性循环。 需要一个美的图标，访问地址 设计思想软件设计的目标群体以英语作为主要工作语言的键盘工作者。部分人会出现输入母语时的打字速度快于英语的情况，因为多年的母语输入练成了肌肉记忆，而英语输入的肌肉记忆相对较弱，容易出现输入英语时“提笔忘字”的现象。 同时为了巩固英语技能，也需要持续的背诵单词，本软件将英语单词的记忆与英语键盘输入的肌肉记忆的锻炼相结合，可以在背诵单词的同时巩固肌肉记忆。 为了避免造成错误的肌肉记忆，设计上如果用户单词输入错误则需要重新输入单词，尽可能确保用户维护正确的肌肉记忆。 软件也对需要机考英语的人群有一定的帮助。 For Coder: 内置了程序员工作常用单词的词库，方便联系工作中常用的单词、提高输入速度。也内置了JS API 的练习，帮助以JS为主要工作语言的程序员练习常用的API，其它语言的API正在添加中… 功能列表 词库 内置常用CET-4、CET-6、GMAT、GRE、IEITS、SAT、TOEFL、考研英语、专业四级英语、专业八级英语。也有程序员常见英语单词以及JS APT等词库。 音标显示、发音功能 方便用户在记忆单词时，同时记忆读音与音标。 默写模式 完成一个章节练习后，是否默写本章，方便用户巩固本章学习的单词。 速度、正确率显示 量化用户输入的速度和输入的正确率，让用户感知了解自己技能的提升 词库列表 CET-4 CET-6 GMAT GRE IELTS SAT TOEFL 考研英语 专业四级英语 专业八级英语 Coder Dict 程序员常用词 高考 中考 商务英语 BEC 人教版英语 3-9 年级 API词库 JavaScript API. @sdu-gyf Node.js API. @chrysalis1215 Java API. @darkSheep 功能与建议目前在开发初期 共享指南鸣谢灵感来源 Keybr 算法著称，功能完善的打字网站，根据用户输入正确率与速度生成“伪代码”帮助用户集中锻炼，还能生成分析报告。 这个项目的核心灵感来源，Keybr更多针对英语为母语的用户，虽然可以练习字母，但不能提升对单词的掌握，本项目出现了。 Typing Academy 一个非常优秀的打字练习网站。优秀的UI风格，对速度、正确率的展示极大的影响本项目的UI设计 react-code-game 一个非常酷的开源项目，使用ts实现，可以在练习打字的同时练习js内置api,项目中添加代码api的想法来源此项目。 开源项目 React&amp;CRA 有完整和详细的文档对初学者非常友好，React系得文档目前自学过程中的最棒的文档，几乎解决使用中的发部分问题。在此感谢React对开源世界的贡献，为我们搭建了很好的基础，让初学者也能构建非常棒的软件。 Tailwindcss tailwind的设计思路解决了css入门选手对写复杂css的恐惧，让新手以一个非常舒适的方式去设计UI。 数据来源字典数据来自于kajweb,项目爬取了常见的字典，也是这个项目使得这个想法得以实现。 语音数据来源于有道词典开放API，感谢有道的贡献让小项目可以使用非常专业的发音资源，感谢有道团队以及考神团队为中国教育与中外交流做出的重要贡献。 JS API来自于react-code-game,感谢项目对JS API的爬取与预处理。 项目Icon感谢libregd提供图标设计，贡献多个图标设计方案，同时对项目提供设计、建议、未来规划等。 感谢支持都是大佬啊，有人支持才有动力写下去。","categories":[{"name":"Random Thoughts","slug":"Random-Thoughts","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/"},{"name":"话题集","slug":"Random-Thoughts/话题集","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/%E8%AF%9D%E9%A2%98%E9%9B%86/"}],"tags":[{"name":"想法，实践","slug":"想法，实践","permalink":"http://muxueweiyu.github.io/tags/%E6%83%B3%E6%B3%95%EF%BC%8C%E5%AE%9E%E8%B7%B5/"}]},{"title":"话题","slug":"Random Thoughts/话题集/话题","date":"2021-03-24T04:07:19.000Z","updated":"2021-04-11T15:06:59.903Z","comments":true,"path":"2021/03/24/Random Thoughts/话题集/话题/","link":"","permalink":"http://muxueweiyu.github.io/2021/03/24/Random%20Thoughts/%E8%AF%9D%E9%A2%98%E9%9B%86/%E8%AF%9D%E9%A2%98/","excerpt":"列出一切可能，不需要过多思考，就是写一遍关于这个观点的文章。每日更新。","text":"列出一切可能，不需要过多思考，就是写一遍关于这个观点的文章。每日更新。 Contents刑法 物权法 劳动法 辩论 航空电子 无限大可能 Qwerty Learner 职业规划之道 linux github学习 README 每天抽出时间看看数学相关的wiki 微软日本 GRE 英语博客 家庭计划 要有一块24小时不间断屏幕滑动播放nasa space astronomy, 再加上NAS群晖","categories":[{"name":"Random Thoughts","slug":"Random-Thoughts","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/"},{"name":"话题集","slug":"Random-Thoughts/话题集","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/%E8%AF%9D%E9%A2%98%E9%9B%86/"}],"tags":[{"name":"想法","slug":"想法","permalink":"http://muxueweiyu.github.io/tags/%E6%83%B3%E6%B3%95/"},{"name":"一切可能","slug":"一切可能","permalink":"http://muxueweiyu.github.io/tags/%E4%B8%80%E5%88%87%E5%8F%AF%E8%83%BD/"}]},{"title":"工作环境的备份","slug":"professional/工作环境备份","date":"2021-03-23T13:11:30.000Z","updated":"2021-04-12T13:31:52.604Z","comments":true,"path":"2021/03/23/professional/工作环境备份/","link":"","permalink":"http://muxueweiyu.github.io/2021/03/23/professional/%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%A4%87%E4%BB%BD/","excerpt":"一切以提高效率为基准 永久背景","text":"一切以提高效率为基准 永久背景 Table of Contents 电脑办公软件备份 休闲娱乐集合 技术文档汇总 环境备份及配置 电脑办公软件从效率提升的角度来考虑事情。 浏览器 Microsoft edge最新版下载地址 Firefox Google Chrome 自用的浏览器就是这些了，浏览器内的配置网络之间都可以账号同步，就没必要多说了。 主要插件及脚本及脚本使用 Dark Reader uBlock Origin 沙拉查词 Tampermonkey 效率工具 Quicker Everything netspeedmonitor ditto kaying_tools calibre DISM++ CCleaner 7-zip sumatrapdf teamviewer 百度云盘 mpv IDM 火绒 Potplayer Qwerty-Learner ATOM 小狼毫 办公软件 office 微信 tim 钉钉 坚果云 编程工具 VS code VS 2019 Andriod Studio Unity3D eclipse Typora Mongo WSL-Ubuntu git mingw-w64 Python nodejs Moo0 国内使用 镜像站 华为开源镜像站 阿里巴巴开源镜像站 清华大学开源软件镜像站 网易开源镜像站 中国科学技术大学开源镜像站 浙江大学开源镜像站 休闲娱乐集合 bilibili Minecraft Steam Epic Ubisoft 爱思助手 第三方网盘重备份 mpv baa baaw 小狼毫 小狼毫配置用户文件夹","categories":[{"name":"professional","slug":"professional","permalink":"http://muxueweiyu.github.io/categories/professional/"}],"tags":[{"name":"Efficiency","slug":"Efficiency","permalink":"http://muxueweiyu.github.io/tags/Efficiency/"},{"name":"Summary","slug":"Summary","permalink":"http://muxueweiyu.github.io/tags/Summary/"}]},{"title":"TDD","slug":"professional/design-document/TDD","date":"2021-03-21T11:04:10.000Z","updated":"2021-03-21T16:00:37.678Z","comments":true,"path":"2021/03/21/professional/design-document/TDD/","link":"","permalink":"http://muxueweiyu.github.io/2021/03/21/professional/design-document/TDD/","excerpt":"学习Introduction to Test Driven Development (TDD)文档结构。 学习文档结构Unit Testing with JUnit 5 - Tutorial Agile/Lean Documentation: Strategies for Agile Software Development","text":"学习Introduction to Test Driven Development (TDD)文档结构。 学习文档结构Unit Testing with JUnit 5 - Tutorial Agile/Lean Documentation: Strategies for Agile Software Development Table of Contents What is TDD? TDD and traditional testing TDD and documentation Test-driven database development Scaling TDD via Agile Model-Driven Development (AMDD) Why TDD? Myths and misconceptions Who is actually doing this? Summary Tools What is TDD?","categories":[{"name":"professional","slug":"professional","permalink":"http://muxueweiyu.github.io/categories/professional/"},{"name":"design-document","slug":"professional/design-document","permalink":"http://muxueweiyu.github.io/categories/professional/design-document/"}],"tags":[{"name":"writing","slug":"writing","permalink":"http://muxueweiyu.github.io/tags/writing/"}]},{"title":"Java实战01","slug":"Program/Java/Java","date":"2021-03-18T13:14:49.000Z","updated":"2021-03-21T16:00:05.674Z","comments":true,"path":"2021/03/18/Program/Java/Java/","link":"","permalink":"http://muxueweiyu.github.io/2021/03/18/Program/Java/Java/","excerpt":"程序设计由编程语言来表现，Java可能会是借此所找到的第一份工作","text":"程序设计由编程语言来表现，Java可能会是借此所找到的第一份工作","categories":[{"name":"Program","slug":"Program","permalink":"http://muxueweiyu.github.io/categories/Program/"},{"name":"Java","slug":"Program/Java","permalink":"http://muxueweiyu.github.io/categories/Program/Java/"}],"tags":[{"name":"program","slug":"program","permalink":"http://muxueweiyu.github.io/tags/program/"}]},{"title":"Random-Thoughts","slug":"Random Thoughts/2021/2021-03","date":"2021-03-01T03:48:15.000Z","updated":"2021-04-01T00:30:34.703Z","comments":true,"path":"2021/03/01/Random Thoughts/2021/2021-03/","link":"","permalink":"http://muxueweiyu.github.io/2021/03/01/Random%20Thoughts/2021/2021-03/","excerpt":"计划长期记录，在这个拥有可以充分个人想法技术的时期，不做点什么，真是太说不过去了。","text":"计划长期记录，在这个拥有可以充分个人想法技术的时期，不做点什么，真是太说不过去了。 头有点大呀……1date: 2021-03-01 可以在家再多呆一周，即有点高兴，也意味着最后一个学期，将步入hard模式。各个方面的压力随之而来。需要做的事情也非常之多，共勉之。 1date: 2021-03-10 《快公司》科技/硅谷合集：科技带动创新-快公司编辑部 消费领域的数字革命已经成熟到可以入侵其他领域。并且程度比任何人想象的还要深。现在技术有了，问题是如何应用于工业领域。工业互联网对技术的要求比消费领域要严格得多。安全严格，持久性创建寿命极长的软件 圣拉蒙实验室生活变得美好了些。”帮助资深员工了解社交媒体”，了解他们的思维方式、、消费模式，还有他们的潮流非常重要。 YogaGlo “说出内心真实的话。” “如果没有让你热爱的事情，你很难保持清醒。” 光有技术能力是不够的，事实胜于雄辩。”传统意义上认为专家就是在越来越少的领域里研究得越来越精得人，直到他们看似无所不知，却实际上什么都不知道，”“什么都知道一点得通才。” 谷歌处于一个历史性得新阶段，前无古人，后无来者。这家公司得财富不可估量，还拥有满坑满谷得人才，谷歌得影响力即将达到顶峰。它联合了网络、计算机和人工智能得力量，许多技术人员认为它开创了”第二次机器时代” 解放双手使用谷歌，无线网络带来十亿新用户，从头思考汽车到底是什么。 *任何需要依靠材料科学来实现突破的谷歌X计划都无以为继。电子领域就不会遇到这样的问题，因为摩尔定律，计算机技术一直呈现几何级增长，依靠短期内即可实现的计算机技术来解决电子问题。这也是为什么会相信谷歌眼镜会越来越完善。*但没有人可以预测新材料的诞生或新生产过程的问世。突破可能发生在明年，也有可能发生在100年后。手机永远都开着Wikipedia “腾讯从来不做第一个吃螃蟹的人，却总能在成熟市场中找到空间，横插一杠子” 1date: 2021-03-12 信息之美 Info Graphics 地图，插图，数据分析 流行 网络 思想 自然 科学 健康 食物 权力 生命 影视 媒体 音乐 主要问题是程序设计的风格：具有说明性的名字、清晰的表达式、直截了当的控制流、刻度的代码和注释。以及在追求这些内容时一致地使用某些规则和惯用法地重要性。没有人会争辩说这些是不好的。 为了风格煞费苦心，书写良好的代码更容易阅读和理解，错误更少，这是为了后期查看可以少受点罪。不然代价是昂贵的，就如平时所写地东西一样，越是草率，不仅难看、难读、而且经常使人崩溃。 好风格应该成为一种习惯。在开始写代码时就关系风格问题，如果你花时间去审视和改造它，你将会逐渐养成一种好的编程习惯，一旦这种习惯变成自动的东西，你的潜意识就会帮你照料许多细节问题，甚至你在工作压力下写出的代码也会更好。 写出好的代码与书写好的英文有许多共同之处。(The Elements of Style, Allyn &amp; Bacon)仍然是关于如何写好英文的最好的简短的书。 1date: 2021-03-14 总而言之，只有熟悉了这个领域的工具和技术才能对特殊的问题提供正确解答，只有丰富的经验才能提供坚实的专业性结果——《特殊效果立体电影得到技术》 算法和数据结构是研究计算机科学的重要基石，一个好的算法或数据结构可能会将一个成年累月的问题在分秒之中得到解决。 特殊领域 图形学、数据库、语法分析、数值分析和模拟等等，解决问题的能力几乎完全依赖于最新的算法和数据结构。新领域开发程序，首先需要弄清这里已经有了些什么，以免无所谓的把时间浪费在别人早已做好的东西上。对于大部分程序员而言，所需要知道有哪些合适的、可用的算法和数据结构，知道如何在各种可以互相替代的东西之中做出选择。 实际上基本算法只有屈指可数的几个，他们几乎出现在每个程序中，可能已经被包含在程序库里，基本检索和排序。与此类似，几乎所有的数据结构都是从几个基本东西中产生出来的。对于每一个程序员来说，什么是基本功啊， 今天我买的SSD到了装机装了一下午，也算是终于升级电脑了，这下可总算可以再战三年了。 1date: 2021-03-16 给我看你的流程图而藏起你的表，我将仍然是莫名其妙。如果给我你的表，那么我将不在要你的流程图，因为他们太明显了。 ——《神秘的人月》 一旦数据结构安排好了，算法就像是瓜熟蒂落，编码也比较容易。组合，程序设计语言的选择在整个设计过程中，相对而言，并不是那么重要。抽象设计整个程序，用C，C++，Awk和Perl 把它写出来。由不同实现之间比较，并不重要的各种情况，程序的设计当然可以通过语言来装饰，但是通常不会为语言所左右。 基本形式非常典型：一些数据进去，另一些数据出来，处理过程并不依赖于多少独创性。所做的就是产生一些随机的可以读的英语文本。如果随便扔出来一些随机数字或是随机的词，结构当然是毫无意义的。 1date: 2021-03-18 设计的真谛，就是在一些互相冲突的需求和约束条件之间寻找平衡点。如果要写的是一个自给自足的小程序，那么常常可以找到许多折衷方式，所作的特定选择将产生一些后果，遗留在系统里，其影响只限于写程序的个人，如果写出的代码是为了别人使用，这些选择决定就会产生更广泛的影响。 考虑问题： 界面 信息隐藏n 资源管理 错误处理 设计原则，无意识产生的结果可能非常随意 逗号分隔的值CSV 一个原型库 为别人用的库 界面原则 资源管理 终止、重试或失败 用户界面 1date: 2021-03-19 bug 表示解决一个困难, 软件相互作用的可能途径真是数不胜数。排错时间和写程序一样多，努力从错误中学习，任何错误都能教导你如何防止类似错误再次发生，以及发生这种问题时及早识别它 排错系统 好线索，简单错误 大部分程序错误是非常简单的，很容易通过简单技术找出来。检查错误输出中的线索，设法推断它可能如何被产生。看看程序垮台前已经有了什么样的输出，如果可能的话，排错系统得到堆栈轨迹，排错是一种逆向推理，就像侦破一个杀人迷案。 无线索，难办的错误 最后的手段 不可重现的错误 排错工具 其他人的程序错误 小结 努力思考是最好的开始 1date: 2021-03-20 检查计算的每个步骤，如果发现错误 测试和排错常常被说成是一个阶段，实际上根本不是同一件事。简单地说，排错是在你已经知道程序有问题时要做的事情，而测试则是在你认为程序能工作的情况下，为设法打败他而进行的一整套确定的系统化试验。测试只是一个理想，目前只是为了发现程序错误，效率更高 在编码过程中测试 系统化测试 测试自动化 测试台 应力测试 测试秘诀 谁来测试 测试马尔科夫程序 优化的第一要义是不做。为大学课程作业而写的程序不会再去使用，对于大部分个人程序、偶尔用用的工具、测试框架、各种试验和原型程序而言，通常也没有速度问题。另一方面，商业产品或者其中的核心部件，例如图形库，性能非常关键，加速程序。 如果算法选择是明智的，程序也写得很仔细，那么你就可能发现完全没有进一步加速的必要性。写得很好的代码，很小的改变就能解决性能问题，设计拙劣的代码，需要大范围的重写。 瓶颈 计时和轮廓 加速策略 代码调整 空间效率 估计 小结 建立基准测试和问题 可移植性：应该设法写这样的软件，他能工作在他必须活动于其中的各种标准、界面和环境的交集里。 语言 紧盯标准 头文件和库 程序组织 隔离 数据交换 字节序 可移植性和升级 国际化 生活在美国的人很容易忘记英语并不是唯一的语言，ASCII不是唯一的字符集，￥也不是仅有的钱币符号，写日期可以把日子写在前面，时间可以采用24小时的钟点，如此等等。跨越语言和文化边界时的可移植性问题 小结 可移植代码是一个非常值得去追求的理想， 在人的所有造物中，语言或许是最奇妙的东西了。——《词和诗》 数据格式 正则表达式 可编程工具 解释器、编译器和虚拟机 写程序的程序 用宏生成代码 运行中编译 VMware Workstation 15 Pro 永久激活密钥：YG5H2-ANZ0H-M8ERY-TXZZZ-YKRV8 UG5J2-0ME12-M89WY-NPWXX-WQH88 UA5DR-2ZD4H-089FY-6YQ5T-YPRX6 GA590-86Y05-4806Y-X4PEE-ZV8E0 ZF582-0NW5N-H8D2P-0XZEE-Z22VA 1date: 2021-03-21 Google cloud platform学习文档 尝试编写技术文档 Java学习，基本上就是测试，Google GitHub 等等。Test-Driving a Java Application大概了解了一些，然后就是Test-driven development中看到 Introduction to Test Driven Development (TDD) 啊自由的畅游在软件代码的世界，真的很美好。这是最好时代，这是最坏的时代，愿每一个人都能找到自己所热爱的事情。 1date: 2021-03-22 Github仓库master分支到main分支迁移指南 使用git分支保存hexo博客源码到github 心情复杂今天我的个人网站(博客)上线了，那一刻真的是非常激动，快乐呀！明天要面试了，预祝成功，English在网络中的用处越来越重要了，接下啦就是继续来编写文档了。 1date: 2021-03-23 WSL2 和 VMWare 不兼容的解决方案虚拟机的使用 重大なエラー「Kernel-Power 41」の原因と対処法 – Windows10 规划之道确实大开眼界，技术绝对不是全部内容，更重要的是我们需要动力，燃烧不停的动力，我们从不挑战自己，记录下我想要学习的技巧。大佬就是做自己喜欢的事情并长期做下去了。分析恐慌最终消失。 做出成功的原创，失败和抄写可能是最佳途径。 不管是什么目的，隐藏你的能力都是非常愚蠢的事情，如果一个人完成了一件非常漂亮的工作，却没有人知道，那在这个经理的眼中，这事情就等同于从未发生过。这听起来有些残酷，但从公司的角度来看，这是有道理的。 1date: 2021-03-24 人们会通过你的写作能力对你做出初步评价，也可以依次深刻理解你的思维活动。如果你无法用自己的母语清楚地表达出自己的想法，让别人明白，又怎么可能用编程语言来清楚的表达出来呢？组织观点，带领读者思考并最终做出合乎逻辑的推断这种能力与创作出清晰的设计和系统实施，并让功能维护者理解的能力是一样的。 写作能力不仅仅是判断的依据。如果你的团队成员和你处在不同的时区内，那么写作可能就是你汇报工作进度的唯一方法，比如你是如何设计某种东西或者你的团队成员需要做的工作是什么。 需要沟通，特别是以文字方式进行沟通，是你所有绝妙的想法必须要通过的瓶颈。你自己就是你要解释的内容。 开发日记，记录做了什么工作，解释设计决定，检查棘手的技术和专业决策。我是自己写作的唯一读者，写作质量要好一点。可以清楚地表达想法。回头阅读之前的日记，评论。通过之前的喜好，来调整你的新纪录。这样做，不仅可以提高你的写作能力，还可以加强你对说做决定的理解，当需要知道如何或者为什么之前要做某事的时候，就可以在日记里找到答案了。 还有一点挺重要，学习打字，在习惯了输入技巧之后，在写作的时候就会更舒服和自然了。如果打字速度快，在写作的时候也会节省很多时间。 知行合一，热爱工作，享受生活 1date: 2021-03-25 练习使用git C++练习 Qwerty-Learner 一小时 整理记录 Unity3D练手 练习文档格式 python 虚拟环境 1python3 -m venv tutorial-env 1date: 2021-03-26 面试 Qwerty Learner 打字练习 午休 开始研究项目功能 C++练习 Unity3D 开发 README是最重要的内容，他快速地介绍了这个项目，并决定了它能不能吸引用户： 这个项目做什么？ 它解决了什么问题 他有什么特性 hello，world 示例 这个项目做什么——一句话文案一句话，必须简单明了地介绍，它是干什么的。 Angular：One framework,Mobile &amp; desktop. React: A declarative,efficient,and fiexible JavaScript library for building user interfaces. Vue: A progressive,incrementally-adoptable JavaScript framework for building UI on the web. 他解决了什么问题一句话描述，不能很好地说明，它能解决什么问题。 它有什么特性多个不同框架时，需要对比他们的特性 简单示例需要简化步骤，如果过于复杂的安装步骤可能会劝退 技术文档对于一个复杂的开源项目来说，文档上需要写明安装、编译、配置等等过程。 写不少代码用的都是框架，最后不知道收获什么了，当自己做了一些项目后，发现最后什么也没有收获到。于是，就想着做一个框架。 需求呀一个库，可能只需要使用20%的代码 阅读开源软件代码查看项目的release列表，找一个看得懂的版本，去读懂，最好可以自己造轮子实现一遍。 编程的基础能力算法很重要，但编码才是基础能力，想出能work的代码一件简单的事，学会对其重构，使之变得更易读就是一件有意义的事。 可读性高的代码，写好测试挺难的， 编码的过程 有一个可衡量、可实现、过程可测的目标 Tasking（即对要实现的目标过程进行分解） 一步步实现（如TDD） 实现目标 享受创造的过程，使用不同框架，并且让他们能工作，不断地Re-Practise。 技术的提高可以在后期解决收入的问题，而不需要靠加班来解决这个问题，人总是要活着的，钱是必需的，但是程序员收入都不低。 情绪是有周期起伏的，可以在一些时间造一些轮子、创建文档。 有意图的练习编程的提高需要很长的学习时间，也需要很长的练习时间，每个程序员或多或少在突破上一个门槛需要花费不等的时间呀，当然重要的原因是没有找对一个合适的方向，在这期间也没有好好练习，需要有意识的练习。 花两年时间去提高这方面的能力呢？ 想做的事情，已经有人走过了。 1date: 2021-03-27 c++练习 Microsoft 文档学习 Linux 学习 Google cloud 学习 unity3D 临时更改，目标调控一体智能防误操作系统 啊学习压力好大呀，今天阅读了一个完成的项目文档，我的天哪，瞬间就低谷了，人生太难了，没什么可说的，肝干就完事了。 1date: 2021-03-28 求职意向不是特别大，大概就是三种层次。 第一种找了一份不喜欢的工作，边做边提高自己到自己所想到达的境界。 第二种找了一份没感觉的工作，边做边去提高自己。 第三种找到一份充满热情的工作，去努力的提升自己。 想去写东西，喜欢敲代码的感觉，享受写文档的提升，沉浸于书中的世界。 What are you want to be? To learn Head First Programming, Load important coding concepts straight into your brain. A learner’s guide to programming,using teh Python language. Add methods, functions and objects to your toolbox Process your data like a pro Build a functional and attractive graphical application Learn how to automate repetitive tasks Avoid embarrassing mishaps with input/output. “Head First Programming does a great job teaching programming using an interative process, Add a little, explain a little ,make the program a little better. This is how programming works in the real world and head First Programming amkes use of taht in a teaching forum. I recommend this book to anyone who want to satrt dabbling in programming but doesn’t know where to start, I’d also recommend this book to anyone not nececssarily 1date: 2021-03-29 摸鱼插件 qwerty-learner 希波克拉底誓言 1date: 2021-03-30 整理往期的内容。 1date: 2021-03-31 改变可能只需要一个念头就够了。 不可思议我竟然做到了。 《B&amp;A 设计杂志》 Canva InDesign mcwade.com/TheGrid CreativeMarket.com MyFonts.com Font Squirrel.com CreateSpace.com CafePress.com PrintPlace.com","categories":[{"name":"Random Thoughts","slug":"Random-Thoughts","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/"},{"name":"2021","slug":"Random-Thoughts/2021","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/2021/"}],"tags":[{"name":"Essay","slug":"Essay","permalink":"http://muxueweiyu.github.io/tags/Essay/"}]},{"title":"飞机环境控制系统","slug":"professional/本专业吧/飞机环境控制系统","date":"2020-10-15T14:03:20.000Z","updated":"2021-03-26T14:16:30.540Z","comments":true,"path":"2020/10/15/professional/本专业吧/飞机环境控制系统/","link":"","permalink":"http://muxueweiyu.github.io/2020/10/15/professional/%E6%9C%AC%E4%B8%93%E4%B8%9A%E5%90%A7/%E9%A3%9E%E6%9C%BA%E7%8E%AF%E5%A2%83%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/","excerpt":"Environmental control system","text":"Environmental control system 专业课内容也不要拉下，计划制作相关模型。","categories":[{"name":"professional","slug":"professional","permalink":"http://muxueweiyu.github.io/categories/professional/"},{"name":"本专业吧","slug":"professional/本专业吧","permalink":"http://muxueweiyu.github.io/categories/professional/%E6%9C%AC%E4%B8%93%E4%B8%9A%E5%90%A7/"}],"tags":[{"name":"skill","slug":"skill","permalink":"http://muxueweiyu.github.io/tags/skill/"}]},{"title":"Random-Thoughts","slug":"Random Thoughts/2020/2020-10","date":"2020-10-01T03:03:18.000Z","updated":"2021-04-17T13:21:57.817Z","comments":true,"path":"2020/10/01/Random Thoughts/2020/2020-10/","link":"","permalink":"http://muxueweiyu.github.io/2020/10/01/Random%20Thoughts/2020/2020-10/","excerpt":"a software engineer’s job isn’t to write code but to solve problems.","text":"a software engineer’s job isn’t to write code but to solve problems. 1date: 2020-10-01","categories":[{"name":"Random Thoughts","slug":"Random-Thoughts","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/"},{"name":"2020","slug":"Random-Thoughts/2020","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/2020/"}],"tags":[{"name":"Essay","slug":"Essay","permalink":"http://muxueweiyu.github.io/tags/Essay/"}]},{"title":"机型电气系统","slug":"professional/本专业吧/机型电气系统","date":"2020-09-15T14:03:20.000Z","updated":"2021-03-26T14:34:35.142Z","comments":true,"path":"2020/09/15/professional/本专业吧/机型电气系统/","link":"","permalink":"http://muxueweiyu.github.io/2020/09/15/professional/%E6%9C%AC%E4%B8%93%E4%B8%9A%E5%90%A7/%E6%9C%BA%E5%9E%8B%E7%94%B5%E6%B0%94%E7%B3%BB%E7%BB%9F/","excerpt":"","text":"","categories":[{"name":"professional","slug":"professional","permalink":"http://muxueweiyu.github.io/categories/professional/"},{"name":"本专业吧","slug":"professional/本专业吧","permalink":"http://muxueweiyu.github.io/categories/professional/%E6%9C%AC%E4%B8%93%E4%B8%9A%E5%90%A7/"}],"tags":[{"name":"skill","slug":"skill","permalink":"http://muxueweiyu.github.io/tags/skill/"}]},{"title":"电传操纵系统","slug":"professional/本专业吧/飞机电传操纵系统","date":"2020-09-15T14:03:20.000Z","updated":"2021-03-26T14:10:01.740Z","comments":true,"path":"2020/09/15/professional/本专业吧/飞机电传操纵系统/","link":"","permalink":"http://muxueweiyu.github.io/2020/09/15/professional/%E6%9C%AC%E4%B8%93%E4%B8%9A%E5%90%A7/%E9%A3%9E%E6%9C%BA%E7%94%B5%E4%BC%A0%E6%93%8D%E7%BA%B5%E7%B3%BB%E7%BB%9F/","excerpt":"飞机电操纵系统Fly-by-wire (FBW)","text":"飞机电操纵系统Fly-by-wire (FBW)","categories":[{"name":"professional","slug":"professional","permalink":"http://muxueweiyu.github.io/categories/professional/"},{"name":"本专业吧","slug":"professional/本专业吧","permalink":"http://muxueweiyu.github.io/categories/professional/%E6%9C%AC%E4%B8%93%E4%B8%9A%E5%90%A7/"}],"tags":[{"name":"skill","slug":"skill","permalink":"http://muxueweiyu.github.io/tags/skill/"}]},{"title":"Random-Thoughts","slug":"Random Thoughts/2020/2020-09","date":"2020-09-01T03:03:18.000Z","updated":"2021-04-25T14:52:43.007Z","comments":true,"path":"2020/09/01/Random Thoughts/2020/2020-09/","link":"","permalink":"http://muxueweiyu.github.io/2020/09/01/Random%20Thoughts/2020/2020-09/","excerpt":"If you can’t explain it simply, you don’t understand it well enough","text":"If you can’t explain it simply, you don’t understand it well enough 1date: 2020-09-01 Lisp很值得学习。你掌握它以后，会感到它给你带来的极大启发。这会大大提高你的编程水平，使你成为一个更好的程序员。尽管在实际工作中极少会用到Lisp。 我们得先承认，确实有一个外部因素会影响到语言的流行。一种语言必须是某一个流行的计算机系统的脚本语言（scripting language），才会变得流行。Fortran和Cobol是早期IBM大型机的脚本语言。C是Unix的脚本语言，后来的Perl和Python也是如此。Tel是Tk的脚本语言，Visual Basic是Windows的脚本语言，（某种形式的）Lisp是Emacs的脚本语言，PHP是网络服务器的脚本语言，Java和JavaScript是浏览器的脚本语言。 著名散文家E.B.怀特说过，“最好的文字来自不停的修改”。所有优秀作家都知道这一点，它对软件开发也适用。设计一样东西，最重要的一点就是要经常“再设计”，编程尤其如此，再多的修改都不过分。 为了写出优秀软件，你必须同时具备两种互相冲突的信念。一方面，你要像初生牛犊一样，对自己的能力信心万丈；另一方面，你又要像历经沧桑的老人一样，对自己的能力抱着怀疑态度。在你的大脑中，有一个声音说“千难万险只等闲”，还有一个声音却说“早岁哪知世事艰”。 “呜呼先生，十载恩情，毕生知遇，提携体贴，抚盲督注。有如慈母，或肖严父，师长丈夫，融而为一。呜呼先生，谁谓荼苦，或甘如饴，唯我寸心，先生庶知。”吐尽辛酸血泪，相爱相知，生死情谊！亦是鲁、许当年情书的延续！ 1date: 2020-09-07 因为朱湘平时各科成绩优异，后来在一些同学的努力下，校方决定撤销处分，但遭到了朱湘的拒绝。几年后，他在给罗念生的信里解释了他的这一决定： 你问我为何要离开清华，我可以简单回答一句：清华的生活是非人的，人生是奋斗的，而清华只钻分数；人生是变换的，而清华只有单调；人生是热辣辣的，而清华只有隔靴搔痒。至于清华中最高尚的生活，都逃不脱一个假，矫揉！ 我如今凭了最深的良心告诉你，你有爱情，你对我有最深最厚的爱情，这爱情就是无价之宝。 父母之命的包办婚姻朱湘是绝不接受的，但爱情打动了他，在人潮如织的繁华上海滩，孤独的朱湘在刘采云那里感受到了温暖，他急急地向这份温暖靠近。他向刘采云表示，愿意接受这份由旧式婚约演变而来的爱情，并决定与她结婚。从最初的厌恶，到同情，再到后来的相爱，朱湘的情感世界发生了彻底的逆转，以至于爱到至深。 1929年9月，留学的第三年，因为经济拮据等原因，朱湘决定提前回国，未能完成学业。回国后，他在安徽大学担任英文文学系主任，月薪300元，但常常被拖欠。不久后，朱湘跟学校大吵一架，因为学校把“英文文学系”改成了“英文学系”，朱湘对此异常恼怒，他愤然辞职，大骂道：“教师出卖智力，小工子出卖力气，妓女出卖肉体，其实都是一回事：出卖自己！” 编码标准和规范 自动化单元测试 静态分析工具","categories":[{"name":"Random Thoughts","slug":"Random-Thoughts","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/"},{"name":"2020","slug":"Random-Thoughts/2020","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/2020/"}],"tags":[{"name":"Essay","slug":"Essay","permalink":"http://muxueweiyu.github.io/tags/Essay/"}]},{"title":"Random-Thoughts","slug":"Random Thoughts/2020/2020-08","date":"2020-08-01T03:03:18.000Z","updated":"2021-04-20T10:48:27.585Z","comments":true,"path":"2020/08/01/Random Thoughts/2020/2020-08/","link":"","permalink":"http://muxueweiyu.github.io/2020/08/01/Random%20Thoughts/2020/2020-08/","excerpt":"发现更大的世界","text":"发现更大的世界 1date: 2020-08-01 Experiments with Google 1date: 2020-08-05 如果你是一个黑客，并且梦想自己创业，可能会有两件事情令你望而却步，不敢真正开始采取行动。一件是你不懂得管理企业，另一件是你害怕竞争。可是实际上，这两件事都是没有通电的电篱笆。 首先，管理企业其实很简单，只要记住两点就可以了：做出用户喜欢的产品，保证开支小于收入。只要做到这两点，你就会超过大多数创业公司。随着事业的发展，你自己就能琢磨出来其他的诀窍。 如今，开发一个互联网软件的费用比购买一把高级办公椅还要便宜。至于如何做出用户喜欢的产品，下面是一些通用规则。从制造简洁的产品开始着手，首先要保证你自己愿意使用。然后，迅速地做出1.0版，并且不断以改进，整个过程中密切倾听用户的反馈。用户总是对的，但是不同的用户要求不一样。低端的用户要求简化操作和清晰易懂，高端的用户要求你增加新功能。软件最大的好处就是让一切变得简单。但是，做到这一点的方法是正确设置默认值，而不是限制用户的选择。如果竞争对手的产品很糟糕，你也不要自鸣得意。比较软件的标准应该是看对手的软件将来会有什么功能，而不是现在有什么功能。无论何时，你都要使用自己的软件。 只有懂得设计的黑客，才能设计软件，不能交给对软件一知半解的设计师。如果你不打算自己动手设计和开发，那就不要创业。 微软公司的恐怖之处在于，它大到可以开发任何软件，就像一座能够行走的大山。 不要被微软吓到。你能做到它做不到的事情，正如它能做到你做不到的事情一样。开发互联网软件不需要得到任何人的许可，没有人能够阻止你。你不需要去申请许可证，不需要在零售店的货架上谋得一席之地，也不需要卑躬屈膝地求人家，将你的软件与操作系统捆绑在一起。你能够通过浏览器发布软件，没有人能在你和浏览网站的用户之间插上一脚。 这里有一个守恒定律：如果你想赚100万美元，就不得不忍受相当于100万美元的痛苦。比如，你终生为邮政局工作，省下每一分工资，那也是赚到100万美元的一种方法。可是，不难想象为邮政局工作50年是何等漫长的压力。创业公司将你所有的压力压缩到三四年。承受较大的压力通常会为你带来额外的报酬，但是你还是无法逃避基本的守恒定律。如果创业那么轻松，那么所有人就都去创业了。 近代历史上，政府有时都搞不清楚金钱和财富的区别。亚当·斯密在《国富论》中提到，许多国家政府为了保住“财富”，禁止出口白银或者黄金。但是，黄金和白银实际上只是一种交换媒介，留住它们并不会让一个国家变得更富有。如果物质财富保持不变，金钱越多，导致的唯一结果就是物价越高。 金钱是专业化的副产品。在一个高度分工的社会，你需要的大部分产品无法自己制造。你需要土豆、铅笔、住房以及别的东西，你不得不让别人来提供。 对于自己感兴趣的东西，你会觉得它们很有价值，伹是它们恰恰最不可能与他人眼中有价值的东西发生重合。」 一个优秀程序员连续工作几个星期可能可以创造价值100万美元的财富。同样的时间内，一个平庸的程序员不仅无法创造财富，甚至还可能减少财富（比如引入了bug）。 这就是为什么如此之多的最优秀程序员都是自由主义者的原因。我们这个世界，你向下沉沦或者向上奋进都取决于你自己，不能把原因推给外界。许许多多不创造任何财富的人——比如本科生、记者和政客——一听到最富有的5%人口占有全社会一半以上的财富，往往会认定这是不公平的。一个有经验的程序员很可能也认为这是不公平的。因为最顶尖的5%的程序员写出了全世界99%的优秀软件。 公司一切行为的目的都是盈利，从而生存下去。创造财富是大多数公司盈利的手段。公司的业务高度专业化，掩盖了它们都是在创造财富的这种相似性，你不要觉得只有制造业公司在创造财富。财富的一个重要元素就是地理位置。 更直接的表达方式应该是“你需要去做一些人们需要的东西”。即使不加入公司，你也能做到。公司不过是一群人在一起工作，共同做出某种人们需要的东西。真正重要的是做出人们需要的东西，而不是加入某个公司^。 工作就是在一个组织中，与许多人共同合作，做出某种人们需要的东西。 在大公司中，你只要一般性地努力工作，就能得到意料之中的薪水。你不能明显无能或懒惰，但是谁也没觉得你会把全部精力投入工作。 现实是你在工作上投入的精力越多，就越能产生规模效应。在某些行业，那些真正拼命工作的员工能够创造出比普通员工多十倍甚至百倍的财富。比如，程序员全力开发一个崭新的软件，要比让他常规地维护和更新一个现有的软件能创造更多价值，这等于开辟了一个新的收入来源。 小团队天生就适合解决技术难题。技术的发展是非常快的，今天很有价值的技术，几年后可能就会丧失价值。小团队在如今这个时代可谓如鱼得水，因为他们不受官僚主义和繁琐管理制度的拖累。而且，技术的突破往往来自非常规的方法，小团队就较少受到常规方法的约束。 俗话说得好，最好的防御就是进攻。如果你开发出来的技术是竞争对手难于复制的，那就够了，你不需要依靠其他防御手段了。一开始就选择较难的问题，此后的各种决策都选择较难的那个选项。 1date: 2020-08-15 如果你有两个选择，就选较难的那个。如果你要选择是坐在家里看电视，还是外出跑步，那就出去跑步吧。这个方法有效的原因可能是遇到两个一难一易的选择时，往往出于懒惰的缘故，你会选择较易的那个选项。在意识深处，你其实知道不懒惰的做法会带来更好的结果，这个方法只是迫使你接受这一点。 创造人们需要的东西，也就是创造财富。如果你想通过创造财富使得自己致富，那么你必须知道人们需要什么。很少有公司真的关注如何使顾客更满意。 你开发的新技术是供所有人使用的，一旦你的技术与使用者的需要有差距，影响就会被成倍放大。你要么令大量顾客满意，要么令大量顾客不满。你越能满足他们的需要，你创造的财富也就越多。 创造财富的人能够心安理得地享用自己的财富，这确实是工业革命的一个必要条件 没有财富的激励，技术革新就会逐渐停顿。 为什么欧洲在历史上变得如此强大？是因为欧洲优越的地理位置，还是因为欧洲人天生就比较优秀，或者是宗教原因？答案（或者至少是近因）可能就是欧洲人接受了一个威力巨大的新观点：允许赚到大钱的人保住自己的财富。 一旦自己的财产有了保证，那些想致富的人就会愿意去创造财富，而不是去偷窃。由此导致的新技术不仅被转化成财富，还被转化成军事力量。隐形飞机的理论是由前苏联数学家提出的，但是因为前苏联没有计算机工业，它就只能是一个理论，无法变成产品。前苏联没有足够快的硬件来完成设计飞机所需要的大量计算。 冷战、第二次世界大战、近代的大多数战争都说明了这个道理。要鼓励大家去创业。只要懂得藏富于民，国家就会变得强大。让书呆子保住他们的血汗钱，你就会无敌于天下。 1date: 2020-08-25 赚钱看上去与其他技能没有本质不同，为什么人们的反应如此强烈？ 第一，我们从小被误导的对财富的看法；第二，历史上积累财富的方式大多名声不好；第三，担心收入差距拉大将对社会产生不利影响。 第一点是错的，第二点已经过时了，第三点通不过现实的检验。 我们大多数人都在为其他人创造财富，然后用创造出来的财富交换金钱，再用金钱交换我们需要的另一种财富. 为什么财富的分配问题引起这么多争论？部分原因是反对声最大的人当中，很多人都少有创造财富的经验：大学生、继承人、教授、政客、新闻记者。（如果你在酒吧里听过大家议论体育赛事，你一定很熟悉这种现象。 大学生往往依靠父母的资助，还没有想过父母的钱是从哪里来的；继承人靠着他人遗产过活；教授与政客距离创造财富最远，不管是否努力工作，得到的报酬都差不多，新闻记者部分由于他们的专业守则，必须与本行业产生收入的那部分——广告销售部——保持隔离。所有这些人中，有许多人从来没有直面过这个事实，那就是他们拿到手的金钱，都来自别人先前创造出来的财富（新闻记者除外，他们的工作是创造财富的，但是不直接用财富交换金钱）。在这些人的世界中，收入是由某个外部权威根据某种看似公平的抽象原则（对于继承人来说则是随机原则）进行分配，不是来自与他人交换别人需要的东西。所以，在这些人看来，真实世界的其他部分不采用同样的分配方式就是不公平的事情。 由于每个人创造财富的能力和欲望强烈程度都不一样，所以每个人创造财富的数量很不平等。 一个人的工作具有多少价值不是由政府决定的，而是由市场决定的。 当我们说一些工作报酬过高，另一些工作报酬过低，我们的真实想法到底是什么？在自由竞争的市场经济中，价格由买家的需求决定。如果人们喜欢棒球甚于喜欢诗歌，那么棒球运动员的收入就是要比诗人的收入高。如果说某种工作的报酬过低，那就相当于说人们的需求不正确。当然，人们确实会需求不正确的东西。这有什么好奇怪的呢？你不觉得声称某种工作报酬过低的说法更奇怪吗^？如果你觉得由于人们的需求不正确，导致某些工作的报酬过低而且不公平，那么这个世界一定会让你感到非常遗憾，人们就是喜欢看电视真人秀，而不是莎士比亚作品，人们就是喜欢吃玉米热狗，而不是水煮蔬菜，这是不是很不公平呀？要是你觉得不公平的话，那你就同把蓝颜色说成最漂亮的颜色、把方的说成圆的那样蛮不讲理。 但是在现实中，财富是用工作成果衡量的，而不是用它花费的成本衡量的。 1900年，只要你有一辆马车，你就是富人，根本没人问你马车的牌子。没有马车的人就是穷人，只能挤公共交通或者步行。今天，即使最穷的美国人也有自己的汽车，那么厂商只好通过广告训练我们识别品牌，以便我们能够识别哪些汽车特别昂贵^。 提出一种相反的观点：现代社会的收入差距扩大是一种健康的信号。技术使得生产率的差异加速扩大，如果这种扩大没有反映在收入上面，只有三种可能的解释：（a）技术革新停顿了；（b）那些创造大部分财富的人停止工作了；（c）创造财富的人没有获得报酬。 在一个剥夺个人财产的社会，财富创造活动中所有那些没有乐趣的事情都会急剧地放慢，乃至停顿。对历史进行实证检验，我们就可以得出这个结论。 1date: 2020-08-30 心理学家亚伯拉罕·马斯洛（Abraham Maslow）说过一句名言：“了解自己想要什么并非常态，它是罕见而艰巨的心理成就。”但今天最优秀的游戏为我们提供了强大的工具，帮助我们获得这一罕见的自我认知。 游戏向我们展示了在生活里真正想要的东西：更满足的工作、更大的成功希望、更强的社会联系以及有机会参与超越自我的宏伟事业。有了产生这4种情绪奖励的游戏，我们就拥有了提升生活质量的无限潜力。每当我们和朋友、家人、邻居一起玩这些游戏，也就是在帮助自己关心的人丰富他们的生活。 慧极必伤，情深不寿。 就是在1943年这一年里，他译出了18部莎剧，包括莎士比亚最脍炙人口的四大悲剧。这是何等的天才，何等的毅力，壮哉！ 数学家会把出色的工作称赞为“优美的”。无论古今，科学家、工程师、音乐家、建筑师、设计师、作家、画家都是这样做的，他们都使用同一个词。这仅仅是巧合吗，还是他们之间有共识？如果真的有共识，那么我们能不能将某一个领域发现的“美”的规律运用于另一个领域呢？ 好设计是看似容易的设计。优秀运动员比赛时，让人觉得他轻轻松松就获胜了，优秀设计师也是如此，他们的工作看上去很容易。大多数时候，这是一种错觉。作家的文章读起来流畅自如，但是背后其实经过了反复修改。 科学和工程学的一些最重大的发现在形式上往往很简单，会使得你觉得自己也想到过。可是，如果它真的那么简单，为什么发现人不是你呢？ 达·芬奇的有些肖像画只是几根线条。看着它们，你会想只要把这十根八根线条放对位置，你也能画出如此优美的肖像画。说的没错，可是难就难在找出正确的位置。只要位置偏移一点点，整幅作品就会一溃千里。 在大多数领域，看上去容易的事情，背后都需要大量的练习。练习的作用也许是训练你把刻意为之的事情变成一种自觉的行为。有时，我们的训练只是为了让身体养成下意识的反应。优秀钢琴家弹奏名曲可以不经过大脑直接完成，艺术家也是这样，熟练以后，脑海中的艺术形象会自动从手上流淌出来，仿佛有人在一旁为他打节奏一样。 人们有时会说自己有了“状态”，我的理解是，他们这时可以控制自己的脊髓。脊髓是更本能的反应，面对难题时，它能释放你的直觉。 essay（论文）这个词来自法语的动词essayer，意思是“试试看”。从这个原始意义来说，论文就是你写一篇文章，试着搞清楚某件事。软件也是如此。我觉得一些最好的软件就像论文一样，也就是说，当作者真正开始动手写这些软件的时候，他们其实不知道最后会写出什么结果。 当你设计语言的时候，心里牢牢记住这个目标是有好处的。学习开车的时候，一个需要记住的原则就是要把车开直，不是通过将车身对齐画在地上的分隔线，而是通过瞄准远处的某个点。即使你的目标只在几米开外，这样做也是正确的。我认为，设计编程语言时，我们也应该这样做。","categories":[{"name":"Random Thoughts","slug":"Random-Thoughts","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/"},{"name":"2020","slug":"Random-Thoughts/2020","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/2020/"}],"tags":[{"name":"Essay","slug":"Essay","permalink":"http://muxueweiyu.github.io/tags/Essay/"}]},{"title":"Random-Thoughts","slug":"Random Thoughts/2020/2020-07","date":"2020-07-01T03:03:18.000Z","updated":"2021-04-19T11:46:30.513Z","comments":true,"path":"2020/07/01/Random Thoughts/2020/2020-07/","link":"","permalink":"http://muxueweiyu.github.io/2020/07/01/Random%20Thoughts/2020/2020-07/","excerpt":"学习国文该认定两个目标：培养阅读能力，培养写作能力。培养能力的事必须继续不断地做去，又必须随时改善学习方法，提高学习效率，才会成功。所以学习国文必须多多阅读，多多写作，并且随时要求阅读得精审，写作得适当。","text":"学习国文该认定两个目标：培养阅读能力，培养写作能力。培养能力的事必须继续不断地做去，又必须随时改善学习方法，提高学习效率，才会成功。所以学习国文必须多多阅读，多多写作，并且随时要求阅读得精审，写作得适当。 1date: 2020-07-01 阅读书籍的习惯不能凭空养成，欣赏文学的能力不能凭空培植，写作文章的技能不能凭空训练。国文教学所以要用课本或选文，就在将课本或选文作为凭借，然后种种工作得以着手。课本里收的，选文入选的，都是单篇短什，没有长篇巨著。这并不是说学生读一些单篇短什就够了，只因单篇短什分量不多，要做细琢细磨的研读功夫正宜从此入手。一篇读毕，又来一篇，涉及的方面既不嫌偏颇，阅读的兴趣也不致单调，所以取作精读的教材。学生从精读方面得到种种经验，应用这些经验，自己去读长篇巨著以及其他的单篇短什，不再需要教师的详细指导（不是说不需要指导），这就是略读。就教学而言，精读是主体，略读只是补充；但就效果而言，精读是准备，略读才是应用。精读与略读的关系如此，试看，只做逐句讲解的工作，是不是就尽了精读方面的指导责任？ 所谓阅读书籍的习惯，并不是什么难能的事，只是能够按照读物的性质作适当的处理而已。需要翻查的，能够翻查；需要参考的，能够参考；应当条分缕析的，能够条分缕析；应当综观大意的，能够综观大意；意在言外的，能够辨得出它的言外之意；义有疏漏的，能够指得出它的疏漏之处：到此地步，阅读书籍的习惯也就差不多了。一个人有了这样的习惯，一辈子读书，一辈子受用。学生起初当然没有这样的习惯，所以要他们养成；而养成的方法，唯有让他们自己去尝试。按照读物的性质，作适当的处理，教学上的用语称为“预习”。一篇精读教材放在面前，只要想到这是一个凭借，要用来养成学生阅读书籍的习惯，自然就会知道非教他们预习不可。预习的事项无非翻查、分析、综合、体会、审度之类，应该取什么方法，认定哪一些着眼点，教师自当测知他们所不及，给他们指点，可是实际下手得让他们自己动天君，因为他们将来读书必须自己动天君。 1date: 2020-07-09 阅读方面——（一）能读日报和各种并非专门性质的杂志；（二）能看适于中学程度的各科参考书；（三）能读国人创作的以及翻译过来的各体文艺作品的一部分；（四）能读如教本里所选的欧阳修、苏轼、归有光等人所作散文那样的文言；（五）能适应需要，自己查看如《论语》《孟子》《史记》《通鉴》一类的书；（六）能查看《国语辞典》《辞源》《辞海》一类的工具书。这里所说的“能”表示了解得到家，体会得透彻，至少要不发生错误。眼睛在纸面上跑一回马，心里不起什么作用，那是算不得“能”的。 1date: 2020-07-15 读书忌死读，死读钻牛角； 矻矻复孜孜，书我不相属。 活读运心智，不为书奴仆； 泥沙悉淘汰，所取唯珠玉； 其精既在我，化为血与肉。 斯得读之用，书可束高阁。 外此复有说，读书岂云足？ 尚有若干书，犹未经写录， 或由理未明，或由见未熟； 此虽不名书，并宜萦心目。 庄云知无涯，无涯宁退缩？ 伟哉唯人类，探索永相续。 善读未写书，不守图书馆； 天地阅览室，万物皆书卷。 知常与察变，齐下操双管， 心之官则思，至理终必阐。 缅怀达尔文，早岁抱宏愿， 航海历诸洲，动植兼究探； 同中乃有异，其异何由判？ 又复考化石，于焉察古远； 从知简趋繁，生命实一贯。 煌煌进化论，厥功达翁冠； 教宗神异说，一一如冰涣。 裨益于人类，其量宁可算？ 1date: 2020-07-25 这本书所说经典，不专指经籍，是用的“经典”二字的广义，包括群经、先秦诸子、几种史书、一些集部，共十三篇。把目录抄在这儿：《说文解字》第一；《周易》第二；《尚书》第三；《诗经》第四；“三礼”第五；“《春秋》三传”第六（国语附）；“四书”第七；《战国策》第八；《史记》《汉书》第九；诸子第十；辞赋第十一；诗第十二；文第十三。前头十一篇都就书讲；末了“诗”“文”两篇却只叙述源流，不就书讲，“因为书太多了，没法子一一详论，而集部书的问题也不像经、史、子那样重要，在这儿也无需详论”（序文中语）。 阅读和写作都是人生的一种行为，凡是行为必须养成了习惯才行。譬如坐得正、站得直，从生理学的见地看，是有益于健康的。但是绝不能每当要坐要站的时候，才想到坐和站的姿势该怎么样。必须养成了坐得正、站得直的习惯，连“生理学”和“健康”都不想到，这才可以终身受用。阅读和写作也是这样。临时搬出些知识来，阅读应该怎么样，写作应该怎么样，岂不要把饱满的整段兴致割裂得支离破碎？所以阅读和写作的知识必须化为习惯，在不知不觉之间受用它，那才是真正的受用。读者看这本小书，请不要忘了这一句：养成习惯。 1date: 2020-07-30 The hacker ethics Sharing Openness Decentralization Free access to computers World Improvement (foremost, upholding democracy and the fundamental laws we all live by, as a society) “Access to computers—and anything which might teach you something about the way the world works—should be unlimited and total. Always yield to the Hands-On Imperative!” “All information should be free” “Mistrust authority—promote decentralization” “Hackers should be judged by their hacking, not bogus criteria such as degrees, age, race, sex, or position” “You can create art and beauty on a computer” “Computers can change your life for the better” Slashdot Plane &amp; Pilot cliffsnotes 找一份养家糊口的“白天工作”（day job）。这个词是从音乐家身上来的，他们晚上表演音乐，所以白天可以找一份其他工作。更一般地说，“白天工作”的意思是，你有一份为了赚钱的工作，还有一份为了爱好的工作。 幵源软件的这种工作模式可能就是正确的模式，因为它已经被其他领域的创作者都验证过了。 画家学习绘画的方法主要是动手去画，黑客学习编程的方法也理应如此。大多数黑客不是通过大学课程学会编程的，他们从实践中学习，13岁时就自己动手写程序了。即使上了大学，黑客学习编程依然主要通过自己写程序。 画家的作品都会保留下来，你观察这些作品，就能看出他们是怎么一步步通过实践学习绘画的。如果你把一个画家的作品按照时间顺序排列，就会发现每幅画所用的技巧，都是建立在上一幅作品学到的东西之上。某幅作品如果有特别出色之处，你往往能够在更早的作品上发现一个小规模的初期版本。 我想大多数创作者都是这样学习和工作的，作家和建筑师似乎都是如此。也许对于黑客来说，采取像画家这样的做法很有好处：应该定期地从头开始，而不要长年累月地在一个项目上不断工作，并且试图把所有的最新想法都以修订版的形式包括进去。 黑客通过实践学习编程，这又是一个标志，说明黑客与科学家的区别有多大。科学家就不会通过干活来学习科学，而是通过做实验和解题来学习。科学家研究的基础都是现有的很完美的成果，在这个意义上，他们的第一步只是在复制别人已经做过的工作。最后，他们才会从某一个点开始，进行自己的原创性工作。但是，黑客就不一样，从一幵始做的就是原创性工作，根本没有他人完美的成果可以依靠。所以，黑客的出发点是原创，最终得到一个优美的结果；而科学家的出发点是别人优美的结果，最终得到原创性。 创作者另一个学习的途径是通过范例。对画家来说，博物馆就是美术技巧的图书馆。几百年来，临蓽大师的作品一直是传统美术教育的一部分，因为临摹迫使你仔细观察一幅画是如何完成的。 作家也是这样学习写作的。富兰克林（Benjamin Franklin）通过总结和模仿艾迪生和斯梯尔的文章^，学会了写作。雷蒙·钱德勒（Raymond Chandler）^^也是如此学会了写作侦探小说。 同样地，黑客可以通过观看优秀的程序学会编程，不是看它们的执行结果，而是看它们的源代码。开源运动最鲜为人知的优点之一，就是使得学习编程变得更容易了。我学编程的时候，不得不主要依靠教材上的范例。那时可以搞到的源码，主要来自于Unix，但是就连Unix也不是开源的。大部分阅读Unix源码的人都是通过约翰·莱昂斯^那本书的非法影印本。该书虽然是1977年写的，但是在1996年之前都不被允许公开出版。 Lions’ Commentary on UNIX 6th Edition, with Source Code 还有一个可以借鉴绘画的地方：一幅画是逐步完成的。通常一开始是一张草图，然后再逐步填入细节。但是，它又不单纯是一个填入细节的过程。有时，原先的构想看来是错的，你就必须动手修改。无数古代油画放在X光下检视，就能看出修改痕迹，四肢的位置被移动过，或者脸部的表情经过了调整。 一般来说，在理论上，你需要知道如何计算“时间复杂度”和“空间复杂度”（time and space complexity）；如果你要写一个解析器，可能还需要知道状态机（state machine）的概念；除此以外，并不需要知道特别多的理论。这些可比画家必须记住的颜料成分少很多。 黑客新想法的最佳来源，并非那些名字里有“计算机”三个字的理论领域，而是来自于其他创作领域。与其到“计算理论”领域寻找创意，你还不如在绘画中寻找创意。 编程语言首要的特性应该是允许动态扩展（malleable）。编程语言是用来帮助思考程序的，而不是用来表达你已经想好的程序。它应该是一支铅笔，而不是一支钢笔。 practice 我们需要的是一种可以随意涂抹、擦擦改改的语言，我们不想正襟危坐，把一个盛满各种变量类型的茶杯，小心翼翼放在自己的膝盖上，为了与一丝不苟的编译器大婶交谈，努力地挑选词语，确保变量类型匹配，好让自己显得礼貌又周到。 去解决那些能够用数学公式处理的问题，而不是去解决真正重要的问题。 如果黑客认识到自己与其他创作者——比如作家和画家——是一类人，这种诱惑对他就不起作用。作家和画家没有“对数学家的妒忌”，他们认为自己在从事与数学完全不相关的事情。我认为，黑客也是如此。 大学和实验室强迫黑客成为科学家，企业强迫黑客成为工程师。 所有创作者都面临这个问题。价格是由供给和需求共同决定的。好玩的软件的需求量，比不上解决客户麻烦问题的软件的需求量。在小剧场里演出的酬劳，比不上穿着卡通大猩猩服装、在展览会上为厂商站台的酬劳。写小说的回报比不上写广告文案的回报。开发编程语言的收入，比不上把某些公司老掉牙的数据库连上服务器的收入。 如果黑客是一个创作者，他从事的就不是机械性的工作，他必须具备灵感。 黑客就像画家，工作起来是有心理周期的。有时候，你有了一个令人兴奋的新项目，你会愿意为它一天工作16个小时。等过了这一阵，你又会觉得百无聊赖，对所有事情都提不起兴趣。 消灭bug的过程就像解一道数学题，已知许许多多的约束条件，你只要根据条件对方程求解就可以了。你的程序应该能产生x结果，但是却产生了y结果。哪里出错了？你知道自己最后肯定能解决这个问题，所以做起来就很轻松，就好像刷墙一样，接近于休闲了 历史上许多伟大的艺术品都是多人一起合作的结果 正确的合作方法是将项目分割成严格定义的模块，每一个模块由一个人明确负责。模块与模块之间的接口经过精心设计，如果可能的话，最好把文档说明写得像编程语言规范那样清晰。 但是，我完全错了。事实表明，从他人的角度思考问题正是成功的奥秘所在。“换位思考”并不就意味着你要做自我牺牲。实际上，这是完全不同的两回事。了解别人对于事情的看法，并不代表你为他的利益服务。某些情况下，比如打仗的时候，了解对手正是为了打击对手。 判断一个人是否具备“换位思考”的能力有一个好方法，那就是看他怎样向没有技术背景的人解释技术问题。 软件的部分功能就是解释自身。为了写出优秀软件，你必须假定用户对你的软件基本上一无所知。你要明白，用户第一次使用你的软件的时候，不会预先做好功课，他们没有任何准备就开始用了，所以软件的使用方式最好能符合用户的直觉，别指望用户去读使用手册。 源代码也应该可以自己解释自己。如果我只能让别人记住一句关于编程的名言，那么这句名言就是《计算机程序的结构与解释》^一书的卷首语： 程序写出来是给人看的，附带能在机器上运行。 dayjob","categories":[{"name":"Random Thoughts","slug":"Random-Thoughts","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/"},{"name":"2020","slug":"Random-Thoughts/2020","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/2020/"}],"tags":[{"name":"Essay","slug":"Essay","permalink":"http://muxueweiyu.github.io/tags/Essay/"}]},{"title":"Random-Thoughts","slug":"Random Thoughts/2020/2020-06","date":"2020-06-01T03:03:18.000Z","updated":"2021-04-16T02:39:06.101Z","comments":true,"path":"2020/06/01/Random Thoughts/2020/2020-06/","link":"","permalink":"http://muxueweiyu.github.io/2020/06/01/Random%20Thoughts/2020/2020-06/","excerpt":"君子之交，其淡如水。 执象而求，咫尺千里。 问余何适？廓尔忘言。 华枝春满，天心月圆。","text":"君子之交，其淡如水。 执象而求，咫尺千里。 问余何适？廓尔忘言。 华枝春满，天心月圆。 1date: 2020-06-01 专业型人才本身就是被其他社会成员当成工具的存在，这社会学里就已经低一等了。孔子才说”君子不器“，杰出的人不可能被人当成工具，而不是独立的人。这就和大学培养的目的相抵触了。最最原始的大学，就是全人教育博雅教育。 靠专业就业就是死胡同，只能靠扎实的基础数理化知识和强烈的人文传统提升自己的内在 数学，英语，计算机，肝一把，试试看极限在哪 数学决定了一个策划能设计出的系统有多精妙以及有多少乐趣。 英语决定了一个策划的视野，以及他身处环境的有效信息密度，中文互联网信息密度实在太低了。 计算机决定了这个策划对于他的生产力工具的了解程度，程度越高越容易设计出更优秀的产品。 当然，可以没有核心竞争力，光靠吹牛皮 官富洋绅—婆罗门，师医公金码—刹帝利，跳舞直播福利小姐姐—吠舍，宫酱—首陀罗，老财—达特利 传统文学作品 1date: 2020-06-07 对泰勒斯来说……首要问题不是我们知道什么,而是如何知道。 几何学有两件伟大的瑰宝:第一件是毕达哥拉斯定理,第二件是黄金分割。前者我们可以把它比作黄金,后者则可以命名为宝石。 一切可知的事物都有数字;因为,如果没有数字,任何事物都既不可能被构想,也不可能被理解。 算术(静止的数)、几何(静止的量)、音乐(运动的数)和天文学(运动的量)。这些学科，再加上由语法、修辞和逻辑组成的三学科，后来组成了文科七艺；数学在教育总扮演突出角色，很大程度上要归功于阿契塔。 算术、几何、音乐和天文——作为文科教育的核心。四学科加上三学科(语法、修辞和芝诺的逻辑)所组成的。传下来的传统，决定了西方教育传统的方向。 1date: 2020-06-11 使用Docker部署Nginx + Gogs快速搭建在线Git服务 还有一个项目没搞呀， 在线社区的良性发展关键在于摆脱人治 社区程序的功能不完善, 技术人员的缺失导致程序出现问题不能及时修复, 对不便利之处无法改良. 管理层不严格按照规章制度对社区进行管理, 甚至缺乏作为管理层的自觉, 以玩笑态度处理问题. 受社区蒸发效应影响, 老成员不断离去, 新成员无法生产有价值的内容, 构成恶性循环, 逐渐降低社区形象. 现有的社区程序大多都是由人治为基础实现的, 要想管理一个在线社区, 需要很多人手, 拿论坛来说, 需要站长、管理员、大区版主、板块版主, 随着论坛规模的增大, 需要的管理人员只会越来越多, 人越多变数也就越多, 管理层就越容易出问题, 尤其是一些大的论坛, 管理层甚至会有内部斗争, 管理层一乱, 论坛也会跟着乱, 恐怕这是每个站长都不愿意看到的局面, 再之后就会发展成管理层的人事变动, 论坛成员不得不去适应新的管理层, 一些成员甚至会因此离开论坛. 不知不觉间, 现在的我与过去的我, 或者说是现在写博客的我与过去写博客的我, 已经有了很大不同, 无论是写的文章和代码, 还是对待留言的态度, 都发生了翻天覆地的变化. 我过去所留下的文字, 如今看来显得幼稚、不成熟, 但那时的我, 似乎比现在的我, 更自由、没有拘束, 我开始自省, 为什么会发生这些变化, 这四年来, 我经历了什么, 改变了什么, 是什么令我的思想、言行、三观发生了变化. 1date: 2020-06-16 影响我的因素太多了, 我理不清, 这四年来, 慢慢的, 我也度过了自己最为轻狂的年纪, 当你年纪轻轻就掌握了很多高级技能的时候, 你会觉得自己是个天才, 你很聪明, 但当你了解到了更大的世界, 当你的岁数到了你本就应掌握这些技能的时候, 又会觉得, 过去自己的所有, 都是那么的虚无缥缈, 你夸耀的, 你自豪的, 对社会、对世界, 都不过只是一张小小的纯白的纸片, 脆弱、单纯, 你什么也没有, 因为你没有达到你自己想要的境界, 这样, 就成了一个失败的人. 写博客就像是记录自己短暂脆弱的人生, 如果是为了留下印记而留下印记, 回头看, 发现自己留下的不是印记, 是悔恨. 写得越多, 越害怕, 越担心, 因为总有一天, 当你回顾过去, 又发现过去的自己, 那么糟糕, 那么不如你所愿. 但是, 却也不能停止写博客, 每一个写博客的人, 都从写博客这件事中, 或多或少有所收获, 一些人长期没有去写长文章, 慢慢会失去写长文章的能力, 最后写出的博文, 都像微博, 我觉得这种并不能算是真正的写了博客. 写博客, 重要的还是记录自己的思想, 把思想倾注在文字里面, 每一个读你文字的人, 包括你自己, 都能感受到你写博文时的心情, 这样写出的博客才是有用的, 而我为什么认为微博不能算是写博客呢? 因为那短短的百来字是不能储存你的思想的, 如果是自曝, 或是写一些没用的流水账去记录自己的生活, 那么写微博是没问题的. 如果你要记录你的思想, 记录那些你理性判断出有价值的东西, 一定要写下来, 写在你的笔记上, 写在博客上, 这是很重要的. 曾经错误的把博客作为自媒体去写、或是公布信息的网站去写, 后来才发现这是错误的。 写博客, 真正的是去记录自己的东西, 写教程是为了巩固自己的知识储备, 写笔记是为了巩固自己刚刚所学的知识, 写随笔是为了记录自己的心情和思想, 这才是重要的, 必须将博客展现给自己看, 自己是第一个读者, 如果自己都不满意, 那么写出来的东西又有什么用呢? 写博客这一过程, 对写博客的人而言是有益处的. 当你成长, 有了比过去更多的阅历, 品味提升了, 境界变高了, 思想更有深度, 自省时, 想起自己的曾经, 在有文字作为载体的情况下, 你会更加清楚的认识到过去的自己, 也更加明白自己发生了什么变化, 然后下定决心, 未来所写的文章, 必须比过去的自己写得要好. 如果没有做到这一点, 那么过去自己的所作所为, 都没有价值, 都仅仅是自娱自乐, 仅仅是为了博取他人的目光, 去获得短暂廉价的他人施舍的赞美. 沉溺于此时此刻又或是沉溺于过去的光辉, 我想那并不是一个合格的博主所应有的境界, 至少我是不承认的. 有一颗绝不满足的心, 我想这才是此时此刻真正的我, 只有在承认自己的贪婪、嫉妒、愤怒、色欲、傲慢、懒惰、浪费之后, 才有可能能在思想上超人, 才有可能成为”强者”. 往更高处发展的自我, 首先要有强过周围的人的自信, 再有强过同龄人的自信, 再有超越上位者的自信, 这一步步台阶, 每踏出一步, 都必须碾压很多人, 要有抛弃其他人的觉悟, 要有非常强烈的维护自身形象和地位的愿望, 要有对知识和能力的渴望, 否则, 是不能成长到更强大的阶段的, 此时此刻, 我对于强者的强大, 是这样理解的. 我深刻的知道, 未来的我会看到这篇文章, 看到这篇文章时, “我”会怎么想呢? 是嘲笑我此时的无知和无畏, 还是在这个思想的基础上, 发展出更多的想法, 我不知道, 但我坚信着, 这一切是有意义的, 我想, 这就是我写博客的作风, 是我的博客之道. 这个社会给人的印象就是, 对创作的不尊重, 对创意价值的随意践踏, 人们只关心能满足自己利益的东西, 只有少数人会对一个东西背后的事情, 有所关心, 在乌合之众引领的浩荡大潮之中, 这份关心渺小不堪. 那些不会去了解事情背后的人, 自然也有可能不会知道这篇博客文章标题里的捏他, 也有可能不知道村上春树, 更加可能不知道雷蒙德·卡佛. 1date: 2020-06-26 程序员从成长经历里大致分成两种, 一种是由编程爱好者成长而来, 另一种是学院和培训班培训而来, 除了基础性的理论知识以外, 大部分旧的技术都将很快被淘汰, 未来永远是属于先行者的. 在这个行业里去学新的东西而抛弃旧的, 是一条不成文的规矩. 通常情况下, 基础理论不会有大的改变, 但实现的方式总是会变的, 而新的方式既然能流行, 就说明它确实比旧的方式有过人之处, 那么就应该去学新的, 这种情况下, 起步早的选手并不会有多少优势, 而起步晚的选手, 很可能不用花太多功夫就能实现一些以前实现起来稍显困难的功能. 当然, 我并不是说基础理论不重要, 我没有任何这个意思, 但事实确实是新的技术先进太多, 在一些很基本的功能实现上, 完全吊打旧技术, 不过再往上高一级, 涉及到更专业的领域, 那么差距还是会拉开, 所以无论新技术多么好用, 学好基础的理论知识还是很有必要的. 在学习途中要多做实践, 纯理论的理解永远不如真正做上几个项目得到的收获多, 如果有时间, 应该多做你真正觉得需要做的项目, 并且应用上那些你还不太熟悉的技术, 这是个人认为的最快学习方法. 如果你暂时无法抽出时间做项目或者太懒, 那么至少保证自己能够在下次使用不熟悉的技术时能快速查找到帮助文件和相关的文档资料. 随着认识的提升, 你将不可避免的接触到UNIX哲学和开源精神两大教条, 它们在整个程序员界确实有着不可撼动的地位, 以致于一个个大有作为的程序员前赴后继, 刚入行的菜鸟们也跟着各路大牛往那软件自由的世界奔去, 一副发现新大陆的情景. 而世界并不会真如UNIX哲学和开源精神中的一样美好: UNIX哲学诞生了一批又一批的教条主义者, 它们固执的坚持UNIX伟大先驱们留下的一句又一句过时的话语, 并将其视为圣经, 并用精神胜利法驳倒一个又一个他们眼中的异教徒. 开源精神留下的则是大量的代码残渣, 这些残渣是为了开源而开源的产物, 每天都有无数的这样的代码被提交到Github上, 垃圾越堆越多, 甚至很多开源精神的奉行者, 至今以为开源只是”开放源代码”的简称, 怎么能不令我们汗颜. 我想说的是, 不要成为一个教条主义者, 也绝对不要成为什么传教士, 程序员应该做的, 就是实现这个世界还没有被实现的需求, 其他的, 都是精神鸦片, 是为真正脆弱的人准备的. 提醒一下, 英语在这个行业里很重要, 而且是作为一个瓶颈存在的, 如果你的英语水平不够, 是没法在短时间内阅读英文资料和文献的, 这就会影响你学习的效率, 在学习编程的初期, 中文资料基本都可以满足你的学习需求, 但到了稍微高一点的领域, 中文资料的翻译速度是跟不上你的学习速度的, 所以必须要有自己阅读英文文章的能力. 另外有一点我看着很奇怪的现象就是一些新人不务正业去主攻翻译而不是技术, 这种做法我是不认同的, 在你没有得到技术之前, 最好不要去搞翻译, 如果你不能传播知识, 至少不要用自己没有把握的知识去误人子弟. 在处理合作关系时, 除非你是设计师出身, 否则请不要觉得自己做的设计比专业设计师厉害, 至少我接触过的大部分程序员, 他们的审美是不可靠的. 同样的, 也不要越权去做数据库管理员、运营维护人员和测试人员的工作, 如果你是后端开发人员, 不要想着正面肛前端, 前端开发人员也不要想着正面肛后端, 所谓术业有专攻, 除非对方真的菜得抠脚, 或者你本身有全栈工程师级别的能力, 否则请不要轻易越权. 最后讲一下死线和设限这两个对程序员影响严重的东西, 死线是程序员完成开发目标的唯一动力, 而设限是程序员拖延症发作的基本表现, 对这两个问题, 没有好的解决方法, 唯有早死心才能早解脱, 如此而已. 1date: 2020-06-30 可以知道读书顶要紧的事情，是把书中的经验化为自身的经验。随时能够“化”，那才做到“开卷有益”的极致。 学生读课外书要注意养成好习惯。先看序文或作者、编者的前言，知道全书的梗概，是好习惯。把全书估计一下，预定分若干日看完，而且果真能按期看完，是好习惯。有不了解处，不怕查工具书，不怕请教老师或朋友，是好习惯。自觉有所得，随手写简要的笔记，是好习惯。其次说不好的习惯。半途而废，以及眼睛在书上，脑子开小差，都非常不好。 国文教学的目标，在养成阅读书籍的习惯，培植欣赏文学的能力，训练写作文字的技能。这些事不能凭空着手，都得有所凭借。凭借什么？就是课本或选文。有了课本或选文，然后养成、培植、训练的工作得以着手。课本里所收的，选文中入选的，都是单篇短什，没有长篇巨著。这并不是说学生读了一些单篇短什就足够了。只因单篇短什分量不多，要做细磨细琢的研读功夫，正宜从此入手，一篇读毕，又读一篇，涉及的方面既不嫌偏颇，阅读的兴趣也不致单调；所以取作“精读”的教材。学生从精读方面得到种种经验，应用这些经验，自己去读长篇巨著以及其他的单篇短什，不再需要教师的详细指导，这就是“略读”。 就教学而言，精读是主体，略读只是补充；但是就效果而言，精读是准备，略读才是应用。学生在校的时候，为了需要与兴趣，须在课本或选文以外阅读旁的书籍文章；他日出校之后，为了需要与兴趣，一辈子须阅读各种书籍文章；这种阅读都是所谓应用。使学生在这方面打定根基，养成习惯，全在国文课的略读。如果只注意于精读，而忽略了略读，功夫便只做得一半，其弊害是想象得到的。学生遇到需要阅读的书籍文章，也许会因没有教师在旁作精读那样的详细指导，而致无所措手。 精读的时候，教师给学生纤屑不遗的指导，略读的时候，更给学生提纲挈领的指导，其目的唯在学生习惯养成，能够自由阅读。","categories":[{"name":"Random Thoughts","slug":"Random-Thoughts","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/"},{"name":"2020","slug":"Random-Thoughts/2020","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/2020/"}],"tags":[{"name":"Essay","slug":"Essay","permalink":"http://muxueweiyu.github.io/tags/Essay/"}]},{"title":"Random-Thoughts","slug":"Random Thoughts/2020/2020-05","date":"2020-05-01T03:03:18.000Z","updated":"2021-04-16T02:39:17.021Z","comments":true,"path":"2020/05/01/Random Thoughts/2020/2020-05/","link":"","permalink":"http://muxueweiyu.github.io/2020/05/01/Random%20Thoughts/2020/2020-05/","excerpt":"杨绛先生说过这么一句话，“年轻的时候以为不读书不足以了解人生，直到后来才发现如果不了解人生，是读不懂书的。读书的意义大概就是用生活所感去读书，用读书所得去生活吧。”","text":"杨绛先生说过这么一句话，“年轻的时候以为不读书不足以了解人生，直到后来才发现如果不了解人生，是读不懂书的。读书的意义大概就是用生活所感去读书，用读书所得去生活吧。” 1date: 2020-05-01 平庸，就是你失去追求卓越信念的那个瞬间。(Your internal mediocrity is the moment when you lost the faith of being excellent.) 经典阅读是一个沉静与沉思的过程，在这种沉静、沉思中，我们不仅使书中文字活起来，充实我们，还使它因我们的理解得到延展与增值。 语言习惯是本来要锻炼的。一个人生活在人群中间，随时随地都有说话的必要，如果语言习惯上有了缺点，也就是生活技能上有了缺点，那是非常吃亏的。把语言习惯锻炼得良好，至少就有了一种极关重要的生活技能。对于作文，这又是一种最可靠的根源。我们怎能不努力锻炼呢？ 锻炼语言习惯要有恒心，随时随地当一件事做，正像矫正坐立的姿势一样，要随时随地坐得正立得正才可以养成坐得正立得正的习惯。我们要要求自己，无论何时不说一句不完整的话，说一句话一定要表达出一个意思，使人家听了都能够明白；无论何时不把一个不很了解的词硬用在语言里，也不把一个不很适当的词强凑在语言里。我们还要要求自己，无论何时不乱用一个连词，不多用或者少用一个助词。说一句话，一定要在应当“然而”的地方才“然而”，应当“那么”的地方才“那么”，需要“吗”的地方不缺少“吗”，不需要“了”的地方不无谓地“了”。这样锻炼好像很浅近、很可笑，实在是基本的，不可少的。 要写通顺的文章，最要紧的是锻炼语言习惯。因为文章就是语言的记录，二者本是同一的东西。可是还得进一步，还不能不知道文章和语言两样的地方。前面说过，说话有面部的表情和身体的姿势作为帮助，但是文章没有这样的帮助，这就是两样的地方。写文章得特别留意，怎样适当地写才可以不靠这种帮助而同样可以使人家明白。两样的地方还有一些。如两个人闲谈，往往天南地北，结尾和开头竟可以毫不相关。就是正式讨论一个问题，商量一件事情，有时也会在中间加入一段插话，像藤蔓一样爬开去，完全离开了本题。直到一个人省悟了，说：“我们还是谈正经话吧。”这才一刀截断，重又回到本题。作文章不能这样。文章大部分是预备给人家看的，小部分是留给自己将来查考的，每一篇都有一个中心，没有中心就没有写作的必要。 怎样写作呢？最要紧的是锻炼我们的语言习惯。语言习惯好，写的文章就通顺了。其次要辨明白文章和语言两样的地方，辨得明白，能知能行，写的文章就不但通顺，而且是完整而无可指摘的了。 1date: 2020-05-11 木炭习作不只使你落笔画得像，更能够教你渐渐明白，画一件东西，哪一些繁琐的线条可以省掉，哪一些主要的线条一丝一毫随便不得。不但教你明白，又教你的手腕渐渐熟练起来，可以省掉的坚决不画，随便不得的决不随便。这对于你极有益处，将来你能画出不同于照相可是也像的画来，基础就在乎此。 修改文章不是什么雕虫小技，其实就是修改思想，要它想得更正确，更完美。想对了，写对了，才可以一字不易。光是个一字不易，那不值得夸耀。 思想不能空无依傍，思想依傍语言。思想是脑子里在说话——说那不出声的话，如果说出来，就是语言，如果写出来，就是文字。朦胧的思想是零零碎碎不成片段的语言，清明的思想是有条有理组织完密的语言。常有人说，心中有个很好的思想，只是说不出来，写不出来。又有人说，起初觉得那思想很好，待说了出来，写了出来，却变了样儿，完全不是那回事了。其实他们所谓很好的思想还只是朦胧的思想，就语言方面说，还只是零零碎碎不成片段的语言，怎么说得出来，写得出来？勉强说了写了，又怎么能使自己满意？那些说出来写出来有条有理组织完密的文章，原来在脑子里已经是有条有理组织完密的语言——也就是清明的思想了。说他说得好写得好，不如说他想得好尤其贴切。 因为思想依傍语言，一个人的语言习惯不能不求其好。坏的语言习惯会牵累了思想，同时牵累了说出来的语言，写出来的文字。举个最浅显的例子。有些人把“的时候”用在一切提冒的场合，如谈到物价，就说“物价的时候，目前恐怕难以平抑”，谈到马歇尔，就说“马歇尔的时候，他未必真个能成功吧”。试问这成什么思想，什么语言，什么文字？那毛病就在于沾染了坏的语言习惯，滥用了“的时候”三字。语言习惯好，思想就有了好的依傍，好到极点，写出来的文字就可以一字不易。我们普通人难免有些坏的语言习惯，只是不自觉察，在文章中带了出来。修改的时候加一番检查，如有发现就可以改掉。这又是主张修改的一个理由。 1date: 2020-05-22 写任何门类的东西，写得好不好，妥当不妥当，当然决定于构思、动笔、修改那一连串的工夫。但是再往根上想，就知道那一连串的工夫之前还有许多工夫，所起的决定作用更大。那许多工夫都是在平时做的，并不是为写东西作准备的，一到写东西的时候却成了极关重要的基础。基础结实，构思、动笔、修改总不至于太差，基础薄弱，构思、动笔、修改就没有着落，成绩怎样就难说了。 平时的积累怎样，写作时候的努力怎样，两项相加，决定写成的东西怎样。 写东西靠平时的积累，不但著作家、文学家是这样，练习作文的小学生也是这样。小学生今天作某一篇文，其实就是综合地表现他今天以前知识、思想、语言等等方面的积累。咱们不是著作家、文学家，也不是小学生，咱们为了种种需要，经常写些东西，情形当然也是这样。为要写东西而注意平时的积累，那是本末倒置。但是知识、思想、语言等等方面本来需要积累，不写东西也需要积累，但是所有的积累，正是写东西的极重要的基础。 1date: 2020-05-30 譬如写总结，是有所为，为的是指出过去工作的经验教训和今后工作的正确途径，借此推进今后的工作，提高今后的工作。譬如写通信报道，是有所为，为的是使广大群众知道各方面的实况，或者是思想战线方面的，或者是生产战线方面的，借此提高大家的觉悟，鼓动大家的干劲。譬如写文艺作品，诗歌也好，小说故事也好，戏剧曲艺也好，都是有所为，为的是通过形象把一些值得表现的人和事表现出来，不仅使人家知道而已，还能使人家受到感染，不知不觉中增添了前进的活力。要说下去还可以说许多。","categories":[{"name":"Random Thoughts","slug":"Random-Thoughts","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/"},{"name":"2020","slug":"Random-Thoughts/2020","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/2020/"}],"tags":[{"name":"Essay","slug":"Essay","permalink":"http://muxueweiyu.github.io/tags/Essay/"}]},{"title":"Random-Thoughts","slug":"Random Thoughts/2020/2020-04","date":"2020-04-01T03:03:18.000Z","updated":"2021-04-16T02:39:21.991Z","comments":true,"path":"2020/04/01/Random Thoughts/2020/2020-04/","link":"","permalink":"http://muxueweiyu.github.io/2020/04/01/Random%20Thoughts/2020/2020-04/","excerpt":"美好的回忆本身就是无价的。","text":"美好的回忆本身就是无价的。 1date: 2020-04-01 练习和成功，实际上是划不清界限的。某年某月以前是练习的时期，某年某月以后是成功的时期，在任何作家的生活史里都难这样地指说。不断地写作就是不断地练习，其间写作得到了家的一篇或是几篇就是成功的作品。所以在写作的当儿，成功与否尽可以不问，所要问的是，是否尽了可能的力量，是否运用了最能干最坚强的手腕。 总之，写作是‘行”的事情，不是“知”的事情。要动脚，才会走；要举手，才会摘取；要执笔，才会写作。看看文章作法之类只是“知”的事情，虽然不一定有什么害处，但是无益于写作的‘行”是显然的。 写文章跟说话是一回事儿。要有意思才有话说。没有意思硬要说，就是瞎说。意思没有想清楚随便说，就是乱说。瞎说乱说都算不得好好的说话。用笔说话，情形也一个样。嘴里该怎么说的，笔下就该怎么写。嘴里不那么说，笔下就不该那么写。写文章决不是找一些稀奇古怪的话来写在纸上，只不过把要说的话用文字写出来罢了。 认定了写文章跟说话是一回事儿，就不必另外花什么工夫，只要把话说好就是了。话是本该要说好的，不写文章也得说好。咱们天天说话，时时说话，说不好怎么行？说好了的时候，文章也能写好了。咱们平常说谁的文章好，谁的不好，意思也是指的说好说不好。 说话又老实又明确才算说好。以外当然还有可以说的，可是老实跟明确是最根本的两点。做到这两点，才可以谈旁的。这两点也做不到，旁的就不用谈了。 1date: 2020-04-10 一部《创业史》没读好，问题不算大。养成了马马虎虎的读书习惯，可要吃一辈子的亏。阅读必须认真，先求认真，次求迅速，这是极重要的基本训练。要在阅读课中训练好。 阅读习惯不良，一定会影响到表达，就是说，写作能力不容易提高。因此，必须好好教阅读课。譬如讲文章须有中心思想。学生听了，知道文章须有中心思想，但是他说：“我作文就是抓不住中心思想。”如果教好阅读课，引导学生逐课逐课地体会，作者怎样用心思，怎样有条有理地表达出中心思想，他们就仿佛跟作者一块儿想过考虑过，到他们自己作文的时候，所谓熟门熟路，也比较容易抓住中心思想了。 总而言之，阅读是写作的基础。 据多数人的经验，写东西一次成功的例子并不多。除非完了篇硬是不再看，你再看它一两遍，总会看出这样那样的毛病，对于向读者“交心”有些妨碍。这就不能马上交出去了，还得重新想想，仔细改改，或者请朋友看看，商量商量，直到自己或者朋友再找不出什么毛病了，然后交出去。认真的作者都是这样做的。 1date: 2020-04-20 写话是要用现代的活的语言写文章，不用古代的书面的语言写文章——是要用一套更好使的，更有效的语言。用现代的活的语言，只要会写字，能说就能写。写出来又最亲切。 写话是要写成的文章句句上口，在纸面上是一篇文章，照着念出来就是一番话。上口，这是个必要的条件。上不得口，还能算话吗？通篇上口的文章不但可以念，而且可以听，听起来跟看起来念起来一样的清楚明白，不发生误会。 写作什么呢？要写出自己的经验。经验又必须深切，必须正确，这要从整个生活里去下工夫。有了深切的正确的经验，写作就不愁没有很好的材料了。 所以我们只须自问有没有话要说，不用问这话是不是人家说过。果真确有要说的话，用以作文，就是写出自己的东西了。 更进一步说，人间的思想、情感诚然不甚相悬，但也决不会全然一致。先天的遗传，后天的教育，师友的熏染，时代的影响，都是酿成大同中的小异的原因。原因这么繁复，又是参伍错综地来的，这就形成了各人小异的思想、情感。那么，所写的东西只要是自己的，实在很难得遇到与人家雷同的情形。试看许多文家一样地吟咏风月，描绘山水，会有不相雷同而各极其妙的文字，就是很显明的例了。原来他们不去依傍别的，只把自己的心去对着风月山水；他们又绝对不肯勉强，必须有所写才写；主观的情思与客观的景物糅合，组织的方式千变万殊，自然每有所作都成独创了。虽然他们所用的大部分也只是通用的言词，也只是古今人这样那样运用过了的，而这些文字的生命是由作者给与的，终竟是唯一的独创的东西。 自己有了意思情感便能动手写出来，这是生活上必要的习惯，迟至中学时代须得养成。假若专等教师出了题目才动手，纵使教师如何贤明，所出题目如何适切，结果总不免本末倒置，会觉得作文的事情单为应付教师的练习功课，而与自己的意思情感是没有关涉的。到这样觉得的时候，这人身上便已负着人生的缺陷，缺陷的深度比哑巴不能开口还要厉害。 1date: 2020-04-30 要练习的回数多，不用说，还须课外作文。要养成抒写意思情感的习惯，那只须反问自己，内部有什么样的意思情感，便作什么样的文。两句话的意思合拢来，就是说除了教师出的题目以外，自己还要作文，作自己要作的题目。 想清楚其实并不难，只要抓住关键，那就是为什么要写。如果写信，为什么要写这封信？如果写报告，为什么要写这篇报告？如果写总结，为什么要写这篇总结？此外可以类推。 教学生练习作文，要他们先写提纲，就是要他们想清楚后写，不要随便一想就算，以有点儿朦胧的印象为满足。先写提纲的习惯养成了，一辈子受用不尽，而且受用不仅在写作方面。我们自己写东西，当然也要先想清楚，写下提纲，然后按照提纲顺次地写。提纲即使不写在纸上，也得先写在心头，那就是所谓腹稿。叫腹稿，岂不是已经成篇，不再是什么提纲了吗？不错，详细的提纲就跟成篇的东西相差不远。提纲越详细，也就是想得越清楚，写成整篇越容易，只要把扼要的一句化为充畅的几句，在需要接榫的地方适当地接上榫头就是了。 已成之局的“局”基础好，大体上总不会错到哪里去。如果需要改动，也是把它改得更好些，更妥当些，而不是原稿简直要不得。 这些就叫做习惯 所以，要文章写得像个样儿，不该在拿起笔来的时候才问该怎么样，应该在拿起笔来之前多做准备功夫。准备功夫不仅是写作方面纯技术的准备，更重要的是实际生活的准备，不从这儿出发就没有根。急躁是不成的，秘诀是没有的。实际生活充实了，种种习惯养成了，写文章就会像活水那样自然地流了。","categories":[{"name":"Random Thoughts","slug":"Random-Thoughts","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/"},{"name":"2020","slug":"Random-Thoughts/2020","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/2020/"}],"tags":[{"name":"Essay","slug":"Essay","permalink":"http://muxueweiyu.github.io/tags/Essay/"}]},{"title":"Random-Thoughts","slug":"Random Thoughts/2020/2020-03","date":"2020-03-01T03:03:18.000Z","updated":"2021-04-16T02:39:27.754Z","comments":true,"path":"2020/03/01/Random Thoughts/2020/2020-03/","link":"","permalink":"http://muxueweiyu.github.io/2020/03/01/Random%20Thoughts/2020/2020-03/","excerpt":"有什么，比我们头顶的星空和心中的道德律，更崇高呢？","text":"有什么，比我们头顶的星空和心中的道德律，更崇高呢？ 1date: 2020-03-01 能始终让我敬畏的，除了头顶灿烂的星空，就是内心的道德法则（这里很有趣，不是外部的道德，而是内心的。社会化会带来不少约束，然而大道就在那里，亘古不变）。 1date: 2020-03-05 C语言学习主要是以语法入门，然后到函数库。再具体一些来说，包括以下阶段： 学习基础语法 学习简单的少数几个C语言自带的函数 学习一些程序设计的基础知识（数据结构，算法） 学习更多更强大的C语言自带的函数 学习一些特定应用领域的基本理论知识（操作系统，数据库，网络，图像……） 应用上一阶段学习的到知识进一步学习其他人提供的函数库（网络处理、操作系统管理、图像、密码学等等） 对于本科阶段的同学来说，着重学好1-4，有选择的学习一下5-6，做一些小作品出来，就已经非常非常不错了。这就是一般的学习规律。说得很简短，但是要做到真的很不容易。 1date: 2020-03-10 乐观面对一切，是迪迦的光。孤身永不后退，是雷欧的狮魂。逆境咬紧牙关，是奈克瑟斯的羁绊。哥们们，别忘了，我们，都曾坚定过自己的奥特英雄梦。别让浮华瓦解了初心，别让黑暗冲淡了热血。让梦继续，让光延续。 焚我残躯，熊熊烈火。生亦何欢，死亦何苦。为善除恶，惟光明故。喜乐悲愁，皆归尘土。怜我世人，忧患实多。怜我世人，忧患实多。 1date: 2020-03-10 学好专业课基础课 锻炼强大的自学能力 编程经验？搞起来！ 讲诚信会沟通 数据结构数据库，徒手二叉树查找元素，来个sqql多表查询语句，正则表达式写一个基本版，全功能代码要写呀！ 编程这东西还是要项目逼一逼的，来一个实际项目，为了达到目标，普通教科书上的招数都不够用了，最难的一直都是下一个。 愿意躺平，一切都不是问题。 技能没有内化的表现，又称看人挑担不吃力。事件处理，实现接口、重写方法和判断事件源，编程这种东西不会，不是智商问题，就是缺练习。 其实在一定的条件下，只要能做到解决问题，及时按质交付，其他就都不是问题了 计算机编程，要逻辑严密，把各种可能性考虑进去。 输入百分制0-100的学生成绩，只是在C语言里，用一句scanf一个整数吗？只是Java里的Scanner用一下么？只是cin一下吗？ 哪里那么简单。 用户输入各种怪符号，程序就死了，是不是要输入字符串后转换处理？ 用户脑袋压在键盘上卡死，输入缓冲溢出机器警报怎么办。用户输入负分，或超出上限怎么办，要不要提示。 用户输入良好优秀怎么办，要不要提示后转化85分。 用户输入前，要不要提示一下。 万一用户输入一半，把程序杀掉了，数据会不会有问题。 多个用户并发输入怎么处理。 就需要各种轮子，遇到类似场景，拿过来改一改，需要服用最多的就是用户权限组建和工作流组件。 最重要的心情要好。 1date: 2020-03-10 时移事去，乐尽悲来。每至春之日，冬之夜，池莲夏开，宫槐秋落，梨园弟子，玉琯发音，闻《霓裳羽衣》一声，则天颜不怡，左右歔欷。三载一意，其念不衰。求之梦魂，杳不能得。 ——陈鸿《长恨传》 1date: 2020-03-20 第一册从“文章面面观”开始，这是这部教材的导论，重在阐释中学国文科的目的最重要的只有两个，“就是阅读的学习和写作的学习”，“这两种学习，彼此的关系很密切，都非从形式的探究着手不可”。接着讲“文言体和语体”，因为“一到中学校，就要兼读文言体的文章了”。讲完文章的分类后，讲应用文、书信和记叙文，着重讲“记述和叙述”、记述的顺序、叙述的顺序、记叙的题材、材料的判别和取舍、叙述的快慢、叙述的倒错、过去的现在化、观点的一致与移动，紧扣的都是应用文和记叙文的“形式”。 第二册侧重讲日记、游记、随笔、记叙文。讲得最深入的是直接经验和间接经验，第一人称、第二人称、第三人称的立足点，以及记叙文中的感情抒发、景物描写和人物描写等。 第三册侧重讲小说、诗歌、散文、报告书、说明文，其中对“说明文”的剖析最为周致。既讲单纯的说明文以及说明和记述、叙述、议论的异同分合，又讲“说明”的方法、对象及抽象的事理、动物的运动、事物的异同、事物间的关系、事物的处理法、说明文的“体式”等。这一册十八篇文话中，有十三篇是讲说明文的。 第四册侧重讲学术文、诗歌、仪式文、宣言、议论文。其中“议论文”分列六课，内容涉及议论文的主旨、立论和驳论、议论文的变装，以及“议论文”的三种推理方式，即演绎、归纳和辩证。 1date: 2020-03-30 预备写作，大概要训练一副明澈的眼光。种种的事物在我们周围排列着、发生着，对它们怎样看法，要眼光，怎样把它们支配运用，要眼光。说得学术气点儿，眼光就是所谓人生观和世界观。一个人尽可以不理会人生观和世界观那些名词，但是决不能没有一副应付事物的眼光，如果没有，他就生活不下去。眼光又须求其明澈。假定看法是错误的，支配运用是失当的，这就由于眼光不明澈的缘故，这样的生活就是糊涂无聊的生活。根据了这个着手写作，写成的就是糊涂无聊的作品，从认真的严肃的态度着想，这种作品很可以不用写。 一个作家本来应该训练一副明澈的眼光，因为他是一个人，必须好好地生活，同时为着写作，尤其应该训练一副明澈的眼光，因为唯有这样，写成功的东西才不至于糊涂无聊。 预备写作，又要训练一副熟练的手腕。什么事情都一样，要求熟练，唯有常常去做，规规矩矩去做。要把写作的手腕训练到熟练，必须常常去写，规规矩矩去写。练习绘画先画木炭画，练习雕像先雕一手一足，称为基本练习，基本弄好了，推广开去才有把握。写作也需要基本练习，写信、写日记、写随笔，此外凡遇见可以写作的材料都不放过，随时把它写下来，这些都是基本练习。“出门不认货”的态度是要不得的，必须尽可能的力量，制造一件货色让它像一件货色。莫说全段、全篇都得斟酌，就是一个句子、一个字眼，也要经过推敲。写成功的虽然不一定是杰作，可是写作时候要像大作家制作他的杰作那样认真。这种习惯养成了是终身受用的，这样训练过来的手腕才是最能干最坚强的手腕。","categories":[{"name":"Random Thoughts","slug":"Random-Thoughts","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/"},{"name":"2020","slug":"Random-Thoughts/2020","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/2020/"}],"tags":[{"name":"Essay","slug":"Essay","permalink":"http://muxueweiyu.github.io/tags/Essay/"}]},{"title":"Random-Thoughts","slug":"Random Thoughts/2020/2020-02","date":"2020-02-01T03:03:18.000Z","updated":"2021-04-16T02:39:32.712Z","comments":true,"path":"2020/02/01/Random Thoughts/2020/2020-02/","link":"","permalink":"http://muxueweiyu.github.io/2020/02/01/Random%20Thoughts/2020/2020-02/","excerpt":"上士闻道，勤能行之，中士闻道，若存若亡。下士闻道，大笑之，不笑不足以为道。","text":"上士闻道，勤能行之，中士闻道，若存若亡。下士闻道，大笑之，不笑不足以为道。 1date: 2020-02-01 能够决定一个人性格和发展的不过是基因和环境，有些东西是可以克服的，而有些东西却很难克服，比如一个集体图书馆学习到深夜的宿舍团体，一个可以跟你分享探讨个人经验价值观理念的团体，一个愿意与你去做一些大胆尝试，实践创业的团体。 读书这个行为意味着你没有完全认同于这个现世和现实，你还有追求，还在奋斗，你还有不满，你还在寻找另一种可能性，另一种生活方式。 设计出可以维护，可测试，可优化，可多人并行开发，可快速迭代的软件架构，能在平衡好需求，效率和成本的同时为团队规划技术路线，在外部环境变化需求变化的时候，提前预知，带领团队做技术转型。 人类绝大多数的物质与精神的生产，都建立在前人的经验与基础上。 只是，由于人类历史太长，思想者过多，所以绝大多数你以为自己独出机杼的思路，都已被其他人思考过争辩过了。 终日苦思vs须臾所学，是以个人努力，对抗世界历史上其他精英累进堆积的思维成果。荀子很早就明白这点了。 杨绛先生说世上大多数人的问题是读得太少想得太多，我觉得归根结底，相信苦思胜过学习的，大概是因为： 觉得自己足够独特，独特到可以不把人类历史上其他的精神成果当回事——人类历史上确实有这类人，但是，这其中极少数是超天才，而更大多数，只是自大狂罢了。 1date: 2020-02-10 不登高山，不知天之高也。不临深溪，不知地之厚也。不闻先王之遗言，不知学问之大也。 君子性非异也，善假于物也！ 孔子：学而不思则罔，思而不学则殆 孟子：思则得之，不思则不得 荀子：吾尝终日而思矣，不如须臾之所学也 鲁迅说：“假如上半年混的不好，千万不要气馁。 因为：七一建党，八一建军，十一建国，伟大的事业都是在下半年完成的。上半年不是三八就是清明，不是五四就是六一，都还不太成熟。过完6.1、撸起袖子加油干！ 工程师文化，是一种内心的欲望与恐惧的表达。对创造的欲望，对世界的恐惧。因为欲望而创造，因为恐惧而改造。创造世界，改造世界。 真正好的教育是将复杂的东西简化，强化基础概念和实际应用，弱化具体计算和逻辑证明，最终让普通学生也可掌握相对深奥的理论知识，并迅速转入实际应用。国内的教育正好相反：强化具体计算和逻辑证明，却弱化了基础概念和实际应用，最终生产了许多解题高手，但他们不具备游刃有余的操作能力。 其实呢，大学数学，在毕业后的工作里，并没有太多实际的用途。几乎所有的计算和设计，都交给了计算机处理。但是在学习数学的过程中所得到的“严密的推理”和“精确的结构”和“顽强的意志”，这三样东西将会在你们的职业生涯发挥巨大的无形价值，无论你的职业，专业，性别，年纪，当你以后遇到困难和压力，静下来想一想：“遥想当年，数学都可以掌握，难道还会惧怕眼前的苟且吗？” 1date: 2020-02-16 “拜君所赐，相思成疾；自君别矣，无药可医…若有一日，与君相逢，我能于人海之中一眼识君。那时候，可否带我一起走…” “…荒古山的朝月，十年才能一圆…逆尘海的海潮，百年才能一涨…苍茫道的迷雾，千年才能一退…古天庭的碧桃，万年才能一结…天荒古境的铃兰，十万年才能一放…而我，数亿次回眸，也没能等到一更！(感谢执魔陪伴我们的每个日日夜夜) 风飘飘，雪遥遥。梦中不知岁已老，朦胧人间谁登高。夜渺渺，烟袅袅。是非真假一座桥，轮回几多，一人少。 求是一种方式，它注定曲折而苍凉。魔是一种态度，他注定冰冷却执着，求魔，一场黑夜中的人生。 你要记得，紫檀未灭，我亦未去。苍天不覆，我必不死。 你要记得，明月潭边，乌云之下，白衣黑雪，笑若流年。 1date: 2020-02-25 美国人哈格写的《鲍林》 英国传记作家克拉克写的《罗素传》 讲解之丰富，少了大师啊！ 他讲世界文学史，其实是他的文学的回忆。 1date: 2020-02-29 希腊神话，开始了解，其实很多东西有趣在什么人来讲，而并非是去研读，就目前情况来看值得一读的作品，内容实在是太多了。记录本身就是一件值得做的事情，或许或者说绝大多数情况下，写下记过的内容是不会再去翻看的，不过万一呢，要知道很久以后或许再次翻看到这些真就是满满的回忆了。大学最重要的不是学到了啥，而是养成强大的自学能力与有效信息筛选能力，顶级秘籍库在手边，慢慢提升呗","categories":[{"name":"Random Thoughts","slug":"Random-Thoughts","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/"},{"name":"2020","slug":"Random-Thoughts/2020","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/2020/"}],"tags":[{"name":"Essay","slug":"Essay","permalink":"http://muxueweiyu.github.io/tags/Essay/"}]},{"title":"Random-Thoughts","slug":"Random Thoughts/2020/2020-01","date":"2020-01-01T03:48:15.000Z","updated":"2021-04-16T02:39:47.317Z","comments":true,"path":"2020/01/01/Random Thoughts/2020/2020-01/","link":"","permalink":"http://muxueweiyu.github.io/2020/01/01/Random%20Thoughts/2020/2020-01/","excerpt":"遇事不绝，量子力学。风格跳跃，虚拟世界。解释不通，穿越时空。不懂配色，赛博朋克 。逻辑不够，平行宇宙 。画面老土，追求复古。","text":"遇事不绝，量子力学。风格跳跃，虚拟世界。解释不通，穿越时空。不懂配色，赛博朋克 。逻辑不够，平行宇宙 。画面老土，追求复古。 1date: 2020-01-01 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553554555556557558559560561562563564565566567568569570571572573574575576577578579580581582583584585586587588589590591592593594595596597598599600601602603604605606607608609610611612613614615616617618619620621622623624625626627628629630631632633634635636637638639640641642643644645646647648649650651652653654655656657658659660661662663664665666667668669670671672673674675676677凡读我诗者，心中须护净。悭贪继日廉，谄曲登时正。 驱遣除恶业，归依受真性。今日得佛身，急急如律令。 重岩我卜居，鸟道绝人迹。庭际何所有，白云抱幽石。 住兹凡几年，屡见春冬易。寄语钟鼎家，虚名定无益。 可笑寒山道，而无车马踪。联谿难记曲，叠嶂不知重。 泣露千般草，吟风一样松。此时迷径处，形问影何从。 吾家好隐沦，居处绝嚣尘。践草成三径，瞻云作四邻。 助歌声有鸟，问法语无人。今日娑婆树，几年为一春。 琴书须自随，禄位用何为。投辇从贤妇，巾车有孝儿。 风吹曝麦地，水溢沃鱼池。常念鹪鹩鸟，安身在一枝。 弟兄同五郡，父子本三州。欲验飞凫集，须征白兔游。 灵瓜梦里受，神橘座中收。乡国何迢递，同鱼寄水流。 一为书剑客，二遇圣明君。东守文不赏，西征武不勋。 学文兼学武，学武兼学文。今日既老矣，馀生不足云。 庄子说送终，天地为棺椁。吾归此有时，唯须一番箔。 死将喂青蝇，吊不劳白鹤。饿著首阳山，生廉死亦乐。 人问寒山道，寒山路不通。夏天冰未释，日出雾朦胧。 似我何由届，与君心不同。君心若似我，还得到其中。 天生百尺树，剪作长条木。可惜栋梁材，抛之在幽谷。 年多心尚劲，日久皮渐秃。识者取将来，犹堪柱马屋。 驱马度荒城，荒城动客情。高低旧雉堞，大小古坟茔。 自振孤蓬影，长凝拱木声。所嗟皆俗骨，仙史更无名。 鹦鹉宅西国，虞罗捕得归。美人朝夕弄，出入在庭帏。 赐以金笼贮，扃哉损羽衣。不如鸿与鹤，飖飏入云飞。 玉堂挂珠帘，中有婵娟子。其貌胜神仙，容华若桃李。 东家春雾合，西舍秋风起。更过三十年，还成苷蔗滓。 城中娥眉女，珠珮珂珊珊。鹦鹉花前弄，琵琶月下弹。 长歌三月响，短舞万人看。未必长如此，芙蓉不耐寒。 父母续经多，田园不羡他。妇摇机轧轧，儿弄口喎喎。 拍手摧花舞，支颐听鸟歌。谁当来叹赏，樵客屡经过。 家住绿岩下，庭芜更不芟。新藤垂缭绕，古石竖巉岩。 山果猕猴摘，池鱼白鹭衔。仙书一两卷，树下读喃喃。 四时无止息，年去又年来。万物有代谢，九天无朽摧。 东明又西暗，花落复花开。唯有黄泉客，冥冥去不回。 岁去换愁年，春来物色鲜。山花笑渌水，岩岫舞青烟。 蜂蝶自云乐，禽鱼更可怜。朋游情未已，彻晓不能眠。 手笔太纵横，身材极瑰玮。生为有限身，死作无名鬼。 自古如此多，君今争奈何。可来白云里，教尔紫芝歌。 欲得安身处，寒山可长保。微风吹幽松，近听声逾好。 下有斑白人，喃喃读黄老。十年归不得，忘却来时道。 俊杰马上郎，挥鞭指绿杨。谓言无死日，终不作梯航。 四运花自好，一朝成萎黄。醍醐与石蜜，至死不能尝。 有一餐霞子，其居讳俗游。论时实萧爽，在夏亦如秋。 幽涧常沥沥，高松风飕飕。其中半日坐，忘却百年愁。 妾在邯郸住，歌声亦抑扬。赖我安居处，此曲旧来长。 既醉莫言归，留连日未央。儿家寝宿处，绣被满银床。 快搒三翼舟，善乘千里马。莫能造我家，谓言最幽野。 岩岫深嶂中，云雷竟日下。自非孔丘公，无能相救者。 智者君抛我，愚者我抛君。非愚亦非智，从此断相闻。 入夜歌明月，侵晨舞白云。焉能拱口手，端坐鬓纷纷。 有鸟五色彣，栖桐食竹实。徐动合礼仪，和鸣中音律。 昨来何以至，为吾暂时出。傥闻弦歌声，作舞欣今日。 茅栋野人居，门前车马疏。林幽偏聚鸟，溪阔本藏鱼。 山果携儿摘，皋田共妇锄。家中何所有，唯有一床书。 登陟寒山道，寒山路不穷。谿长石磊磊，涧阔草濛濛。 苔滑非关雨，松鸣不假风。谁能超世累，共坐白云中。 六极常婴困，九维徒自论。有才遗草泽，无艺闭蓬门。 日上岩犹暗，烟消谷尚昏。其中长者子，个个总无裈. 白云高嵯峨，渌水荡潭波。此处闻渔父，时时鼓棹歌。 声声不可听，令我愁思多。谁谓雀无角，其如穿屋何。 杳杳寒山道，落落冷涧滨。啾啾常有鸟，寂寂更无人。 碛碛风吹面，纷纷雪积身。朝朝不见日，岁岁不知春。 少年何所愁，愁见鬓毛白。白更何所愁，愁见日逼迫。 移向东岱居，配守北邙宅。何忍出此言，此言伤老客。 闻道愁难遣，斯言谓不真。昨朝曾趁却，今日又缠身。 月尽愁难尽，年新愁更新。谁知席帽下，元是昔愁人。 两龟乘犊车，蓦出路头戏。一蛊从傍来，苦死欲求寄。 不载爽人情，始载被沈累。弹指不可论，行恩却遭刺。 三月蚕犹小，女人来采花。隈墙弄蝴蝶，临水掷虾蟆。 罗袖盛梅子，金鎞挑笋芽。斗论多物色，此地胜余家。 东家一老婆，富来三五年。昔日贫于我，今笑我无钱。 渠笑我在后，我笑渠在前。相笑傥不止，东边复西边。 富儿多鞅掌，触事难祇承。仓米已赫赤，不贷人斗升。 转怀钩距意，买绢先拣绫。若至临终日，吊客有苍蝇。 余曾昔睹聪明士，博达英灵无比伦。一选嘉名喧宇宙， 五言诗句越诸人。为官治化超先辈，直为无能继后尘。 忽然富贵贪财色，瓦解冰消不可陈。 白鹤衔苦桃，千里作一息。欲往蓬莱山，将此充粮食。 未达毛摧落，离群心惨恻。却归旧来巢，妻子不相识。 惯居幽隐处，乍向国清中。时访丰干道，仍来看拾公。 独回上寒岩，无人话合同。寻究无源水，源穷水不穷。 生前大愚痴，不为今日悟。今日如许贫，总是前生作。 今生又不修，来生还如故。两岸各无船，渺渺难济渡。 璨璨卢家女，旧来名莫愁。贪乘摘花马，乐搒采莲舟。 膝坐绿熊席，身披青凤裘。哀伤百年内，不免归山丘。 低眼邹公妻，邯郸杜生母。二人同老少，一种好面首。 昨日会客场，恶衣排在后。只为著破裙，吃他残czwW. 独卧重岩下，蒸云昼不消。室中虽暡叆，心里绝喧嚣。 梦去游金阙，魂归度石桥。抛除闹我者，历历树间瓢。 夫物有所用，用之各有宜。用之若失所，一缺复一亏。 圆凿而方枘，悲哉空尔为。骅骝将捕鼠，不及跛猫儿。 谁家长不死，死事旧来均。始忆八尺汉，俄成一聚尘。 黄泉无晓日，青草有时春。行到伤心处，松风愁杀人。 骝马珊瑚鞭，驱驰洛阳道。自矜美少年，不信有衰老。 白发会应生，红颜岂长保。但看北邙山，个是蓬莱岛。 竟日常如醉，流年不暂停。埋著蓬蒿下，晓月何冥冥。 骨肉消散尽，魂魄几凋零。遮莫咬铁口，无因读老经。 一向寒山坐，淹留三十年。昨来访亲友，太半入黄泉。 渐减如残烛，长流似逝川。今朝对孤影，不觉泪双悬。 相唤采芙蓉，可怜清江里。游戏不觉暮，屡见狂风起。 浪捧鸳鸯儿，波摇鸂鶒子。此时居舟楫，浩荡情无已。 吾心似秋月，碧潭清皎洁。无物堪比伦，教我如何说。 垂柳暗如烟，飞花飘似霰。夫居离妇州，妇住思夫县。 各在天一涯，何时得相见。寄语明月楼，莫贮双飞燕。 有酒相招饮，有肉相呼吃。黄泉前后人，少壮须努力。 玉带暂时华，金钗非久饰。张翁与郑婆，一去无消息。 可怜好丈夫，身体极棱棱。春秋未三十，才艺百般能。 金羁逐侠客，玉馔集良朋。唯有一般恶，不传无尽灯。 桃花欲经夏，风月催不待。访觅汉时人，能无一个在。 朝朝花迁落，岁岁人移改。今日扬尘处，昔时为大海。 我见东家女，年可有十八。西舍竞来问，愿姻夫妻活。 烹羊煮众命，聚头作淫杀。含笑乐呵呵，啼哭受殃抉。 田舍多桑园，牛犊满厩辙。肯信有因果，顽皮早晚裂。 眼看消磨尽，当头各自活。纸袴瓦作裈，到头冻饿杀。 我见百十狗，个个毛狰狞。卧者渠自卧，行者渠自行。 投之一块骨，相与啀喍争。良由为骨少，狗多分不平。 极目兮长望，白云四茫茫。鸱鸦饱腲腇，鸾凤饥彷徨。 骏马放石碛，蹇驴能至堂。天高不可问，鹪鵊在沧浪。 洛阳多女儿，春日逞华丽。共折路边花，各持插高髻。 髻高花匼匝，人见皆睥睨。别求醦醦怜，将归见夫婿。 春女衒容仪，相将南陌陲。看花愁日晚，隐树怕风吹。 年少从傍来，白马黄金羁。何须久相弄，儿家夫婿知。 群女戏夕阳，风来满路香。缀裙金蛱蝶，插髻玉鸳鸯。 角婢红罗缜，阉奴紫锦裳。为观失道者，鬓白心惶惶。 若人逢鬼魅，第一莫惊懅。捺硬莫采渠，呼名自当去。 烧香请佛力，礼拜求僧助。蚊子叮铁牛，无渠下觜处。 浩浩黄河水，东流长不息。悠悠不见清，人人寿有极。 苟欲乘白云，曷由生羽翼。唯当鬒发时，行住须努力。 乘兹朽木船，采彼纴婆子。行至大海中，波涛复不止。 唯赍一宿粮，去岸三千里。烦恼从何生，愁哉缘苦起。 默默永无言，后生何所述。隐居在林薮，智日何由出。 枯槁非坚卫，风霜成夭疾。土牛耕石田，未有得稻日。 山中何太冷，自古非今年。沓嶂恒凝雪，幽林每吐烟。 草生芒种后，叶落立秋前。此有沈迷客，窥窥不见天。 山客心悄悄，常嗟岁序迁。辛勤采芝朮，搜斥讵成仙。 庭廓云初卷，林明月正圆。不归何所为，桂树相留连。 有人兮山楹，云卷兮霞缨。秉芳兮欲寄，路漫漫兮难征。 心惆怅兮狐疑，年老已无成。众喔咿斯，蹇独立兮忠贞。 猪吃死人肉，人吃死猪肠。猪不嫌人臭，人反道猪香。 猪死抛水内，人死掘土藏。彼此莫相啖，莲花生沸汤。 快哉混沌身，不饭复不尿。遭得谁钻凿，因兹立九窍。 朝朝为衣食，岁岁愁租调。千个争一钱，聚头亡命叫。 啼哭缘何事，泪如珠子颗。应当有别离，复是遭丧祸。 所为在贫穷，未能了因果。冢间瞻死尸，六道不干我。 妇女慵经织，男夫懒耨田。轻浮耽挟弹，跕躧拈抹弦。 冻骨衣应急，充肠食在先。今谁念于汝，苦痛哭苍天。 不行真正道，随邪号行婆。口惭神佛少，心怀嫉妒多。 背后噇鱼肉，人前念佛陀。如此修身处，难应避奈何。 世有一等愚，茫茫恰似驴。还解人言语，贪淫状若猪。 险巇难可测，实语却成虚。谁能共伊语，令教莫此居。 有汉姓傲慢，名贪字不廉。一身无所解，百事被他嫌。 死恶黄连苦，生怜白蜜甜。吃鱼犹未止，食肉更无厌。 纵你居犀角，饶君带虎睛。桃枝将辟秽，蒜壳取为璎。 暖腹茱萸酒，空心枸杞羹。终归不免死，浪自觅长生。 卜择幽居地，天台更莫言。猿啼谿雾冷，岳色草门连。 折叶覆松室，开池引涧泉。已甘休万事，采蕨度残年。 益者益其精，可名为有益。易者易其形，是名之有易。 能益复能易，当得上仙籍。无益复无易，终不免死厄。 徒劳说三史，浪自看五经。洎老检黄籍，依前住白丁。 筮遭连蹇卦，生主虚危星。不及河边树，年年一度青。 碧涧泉水清，寒山月华白。默知神自明，观空境逾寂。 我今有一襦，非罗复非绮。借问作何色，不红亦不紫。 夏天将作衫，冬天将作被。冬夏递互用，长年只这是。 白拂栴檀柄，馨香竟日闻。柔和如卷雾，摇拽似行云。 礼奉宜当暑，高提复去尘。时时方丈内，将用指迷人。 贪爱有人求快活，不知祸在百年身。但看阳焰浮沤水， 便觉无常败坏人。丈夫志气直如铁，无曲心中道自真。 行密节高霜下竹，方知不枉用心神。 多少般数人，百计求名利。心贪觅荣华，经营图富贵。 心未片时歇，奔突如烟气。家眷实团圆，一呼百诺至。 不过七十年，冰消瓦解置。死了万事休，谁人承后嗣。 水浸泥弹丸，方知无意智。 贪人好聚财，恰如枭爱子。子大而食母，财多还害己。 散之即福生，聚之即祸起。无财亦无祸，鼓翼青云里。 去家一万里，提剑击匈奴。得利渠即死，失利汝即殂。 渠命既不惜，汝命亦何辜。教汝百胜术，不贪为上谟。 瞋是心中火，能烧功德林。欲行菩萨道，忍辱护真心。 汝为埋头痴兀兀，爱向无明罗刹窟。再三劝你早修行， 是你顽痴心恍惚。不肯信受寒山语，转转倍加业汩汩。 直待斩首作两段，方知自身奴贼物。 恶趣甚茫茫，冥冥无日光。人间八百岁，未抵半宵长。 此等诸痴子，论情甚可伤。劝君求出离，认取法中王。 世有多解人，愚痴徒苦辛。不求当来善，唯知造恶因。 五逆十恶辈，三毒以为亲。一死入地狱，长如镇库银。 天高高不穷，地厚厚无极。动物在其中，凭兹造化力。 争头觅饱暖，作计相啖食。因果都未详，盲儿问乳色。 天下几种人，论时色数有。贾婆如许夫，黄老元无妇。 卫氏儿可怜，钟家女极丑。渠若向西行，我便东边走。 贤士不贪婪，痴人好炉冶。麦地占他家，竹园皆我者。 努膊觅钱财，切齿驱奴马。须看郭门外，垒垒松柏下。 唝唝买鱼肉，担归喂妻子。何须杀他命，将来活汝己。 此非天堂缘，纯是地狱滓。徐六语破堆，始知没道理。 有人把椿树，唤作白栴檀。学道多沙数，几个得泥丸。 弃金却担草，谩他亦自谩。似聚砂一处，成团也大难。 蒸砂拟作饭，临渴始掘井。用力磨碌砖，那堪将作镜。 佛说元平等，总有真如性。但自审思量，不用闲争竞。 推寻世间事，子细总皆知。凡事莫容易，尽爱讨便宜。 护即弊成好，毁即是成非。故知杂滥口，背面总由伊。 冷暖我自量，不信奴唇皮。 蹭蹬诸贫士，饥寒成至极。闲居好作诗，札札用心力。 贱他言孰采，劝君休叹息。题安糊饼上，乞狗也不吃。 欲识生死譬，且将冰水比。水结即成冰，冰消返成水。 已死必应生，出生还复死。冰水不相伤，生死还双美。 寻思少年日，游猎向平陵。国使职非愿，神仙未足称。 联翩骑白马，喝兔放苍鹰。不觉大流落，皤皤谁见矜。 偃息深林下，从生是农夫。立身既质直，出语无谄谀。 保我不鉴璧，信君方得珠。焉能同泛滟，极目波上凫。 不须攻人恶，何用伐己善。行之则可行，卷之则可卷。 禄厚忧积大，言深虑交浅。闻兹若念兹，小子当自见。 富儿会高堂，华灯何炜煌。此时无烛者，心愿处其傍。 不意遭排遣，还归暗处藏。益人明讵损，顿讶惜馀光。 世有聪明士，勤苦探幽文。三端自孤立，六艺越诸君。 神气卓然异，精彩超众群。不识个中意，逐境乱纷纷。 层层山水秀，烟霞锁翠微。岚拂纱巾湿，露沾蓑草衣。 足蹑游方履，手执古藤枝。更观尘世外，梦境复何为。 满卷才子诗，溢壶圣人酒。行爱观牛犊，坐不离左右。 霜露入茅檐，月华明瓮牖。此时吸两瓯，吟诗五百首。 施家有两儿，以艺干齐楚。文武各自备，托身为得所。 孟公问其术，我子亲教汝。秦卫两不成，失时成龃龉。 止宿鸳鸯鸟，一雄兼一雌。衔花相共食，刷羽每相随。 戏入烟霄里，宿归沙岸湄。自怜生处乐，不夺凤凰池。 或有衒行人，才艺过周孔。见罢头兀兀，看时身侗侗。 绳牵未肯行，锥刺犹不动。恰似羊公鹤，可怜生氃氋。 少小带经锄，本将兄共居。缘遭他辈责，剩被自妻疏。 抛绝红尘境，常游好阅书。谁能借斗水，活取辙中鱼。 变化计无穷，生死竟不止。三途鸟雀身，五岳龙鱼已。 世浊作fh羺时清为騄耳。前回是富儿，今度成贫士。 书判全非弱，嫌身不得官。铨曹被拗折，洗垢觅疮瘢。 必也关天命，今冬更试看。盲儿射雀目，偶中亦非难。 贫驴欠一尺，富狗剩三寸。若分贫不平，中半富与困。 始取驴饱足，却令狗饥顿。为汝熟思量，令我也愁闷。 柳郎八十二，蓝嫂一十八。夫妻共百年，相怜情狡猾。 弄璋字乌cY，掷瓦名婠妠.屡见枯杨荑，常遭青女杀。 大有饥寒客，生将兽鱼殊。长存磨石下，时哭路边隅。 累日空思饭，经冬不识襦。唯赍一束草，并带五升麸。 赫赫谁垆肆，其酒甚浓厚。可怜高幡帜，极目平升斗。 何意讶不售，其家多猛狗。童子欲来沽，狗咬便是走。 吁嗟浊滥处，罗刹共贤人。谓是等流类，焉知道不亲。 狐假师子势，诈妄却称珍。铅矿入炉冶，方知金不知。 田家避暑月，斗酒共谁欢。杂杂排山果，疏疏围酒樽。 芦莦将代席，蕉叶且充盘。醉后支颐坐，须弥小弹丸。 个是何措大，时来省南院。年可三十馀，曾经四五选。 囊里无青蚨，箧中有黄绢。行到食店前，不敢暂回面。 为人常吃用，爱意须悭惜。老去不自由，渐被他推斥。 送向荒山头，一生愿虚掷。亡羊罢补牢，失意终无极。 浪造凌霄阁，虚登百尺楼。养生仍夭命，诱读讵封侯。 不用从黄口，何须厌白头。未能端似箭，且莫曲如钩。 云山叠叠连天碧，路僻林深无客游。远望孤蟾明皎皎， 近闻群鸟语啾啾。老夫独坐栖青嶂，少室闲居任白头。 可叹往年与今日，无心还似水东流。 富贵疏亲聚，只为多钱米。贫贱骨肉离，非关少兄弟。 急须归去来，招贤阁未启。浪行朱雀街，踏破皮鞋底。 我见一痴汉，仍居三两妇。养得八九儿，总是随宜手。 丁防是新差，资财非旧有。黄蘖作驴鞦，始知苦在后。 新谷尚未熟，旧谷今已无。就贷一斗许，门外立踟蹰。 夫出教问妇，妇出遣问夫。悭惜不救乏，财多为累愚。 大有好笑事，略陈三五个。张公富奢华，孟子贫轗轲。 只取侏儒饱，不怜方朔饿。巴歌唱者多，白雪无人和。 老翁娶少妇，发白妇不耐。老婆嫁少夫，面黄夫不爱。 老翁娶老婆，一一无弃背。少妇嫁少夫，两两相怜态。 雍容美少年，博览诸经史。尽号曰先生，皆称为学士。 未能得官职，不解秉耒耜。冬披破布衫，盖是书误己。 鸟语情不堪，其时卧草庵。樱桃红烁烁，杨柳正毵毵。 旭日衔青嶂，晴云洗渌潭。谁知出尘俗，驭上寒山南。 昨日何悠悠，场中可怜许。上为桃李径，下作兰荪渚。 复有绮罗人，舍中翠毛羽。相逢欲相唤，脉脉不能语。 丈夫莫守困，无钱须经纪。养得一牸牛，生得五犊子。 犊子又生儿，积数无穷已。寄语陶朱公，富与君相似。 之子何惶惶，卜居须自审。南方瘴疠多，北地风霜甚。 荒陬不可居，毒川难可饮。魂兮归去来，食我家园葚。 昨夜梦还家，见妇机中织。驻梭如有思，擎梭似无力。 呼之回面视，况复不相识。应是别多年，鬓毛非旧色。 人生不满百，常怀千载忧。自身病始可，又为子孙愁。 下视禾根土，上看桑树头。秤锤落东海，到底始知休。 世有一等流，悠悠似木头。出语无知解，云我百不忧。 问道道不会，问佛佛不求。子细推寻著，茫然一场愁。 董郎年少时，出入帝京里。衫作嫩鹅黄，容仪画相似。 常骑踏雪马，拂拂红尘起。观者满路傍，个是谁家子。 个是谁家子，为人大被憎。痴心常愤愤，肉眼醉瞢瞢。 见佛不礼佛，逢僧不施僧。唯知打大脔，除此百无能。 人以身为本，本以心为柄。本在心莫邪，心邪丧本命。 未能免此殃，何言懒照镜。不念金刚经，却令菩萨病。 城北仲家翁，渠家多酒肉。仲翁妇死时，吊客满堂屋。 仲翁自身亡，能无一人哭。吃他杯脔者，何太冷心腹。 下愚读我诗，不解却嗤诮。中庸读我诗，思量云甚要。 上贤读我诗，把著满面笑。杨修见幼妇，一览便知妙。 自有悭惜人，我非悭惜辈。衣单为舞穿，酒尽缘歌啐。 当取一腹饱，莫令两脚儽。蓬蒿钻髑髅，此日君应悔。 我行经古坟，泪尽嗟存没。冢破压黄肠，棺穿露白骨。 欹斜有瓮瓶，掁拨无簪笏。风至揽其中，灰尘乱ej々。 夕阳赫西山，草木光晔晔。复有朦胧处，松萝相连接。 此中多伏虎，见我奋迅鬣。手中无寸刃，争不惧慑慑。 出身既扰扰，世事非一状。未能舍流俗，所以相追访。 昨吊徐五死，今送刘三葬。终日不得闲，为此心凄怆。 有乐且须乐，时哉不可失。虽云一百年，岂满三万日。 寄世是须臾，论钱莫啾唧。孝经末后章，委曲陈情毕。 独坐常忽忽，情怀何悠悠。山腰云缦缦，谷口风飕飕。 猿来树袅袅，鸟入林啾啾。时催鬓飒飒，岁尽老惆惆。 一人好头肚，六艺尽皆通。南见驱归北，西风趁向东。 长漂如泛萍，不息似飞蓬。问是何等色，姓贫名曰穷。 他贤君即受，不贤君莫与。君贤他见容，不贤他亦拒。 嘉善矜不能，仁徒方得所。劝逐子张言，抛却卜商语。 俗薄真成薄，人心个不同。殷翁笑柳老，柳老笑殷翁。 何故两相笑，俱行譣诐中。装车竞嵽嵲，翻载各泷涷。 是我有钱日，恒为汝贷将。汝今既饱暖，见我不分张。 须忆汝欲得，似我今承望。有无更代事，劝汝熟思量。 人生一百年，佛说十二部。慈悲如野鹿，瞋忿似家狗。 家狗趁不去，野鹿常好走。欲伏猕猴心，须听狮子吼。 教汝数般事，思量知我贤。极贫忍卖屋，才富须买田。 空腹不得走，枕头须莫眠。此言期众见，挂在日东边。 寒山多幽奇，登者皆恒慑。月照水澄澄，风吹草猎猎。 凋梅雪作花，杌木云充叶。触雨转鲜灵，非晴不可涉。 有树先林生，计年逾一倍。根遭陵谷变，叶被风霜改。 咸笑外凋零，不怜内文采。皮肤脱落尽，唯有贞实在。 寒山有裸虫，身白而头黑。手把两卷书，一道将一德。 住不安釜灶，行不赍衣裓.常持智慧剑，拟破烦恼贼。 有人畏白首，不肯舍朱绂。采药空求仙，根苗乱挑掘。 数年无效验，痴意瞋怫郁。猎师披袈裟，元非汝使物。 昔时可可贫，今朝最贫冻。作事不谐和，触途成倥偬。 行泥屡脚屈，坐社频腹痛。失却斑猫儿，老鼠围饭瓮。 我见世间人，堂堂好仪相。不报父母恩，方寸底模样。 欠负他人钱，蹄穿始惆怅。个个惜妻儿，爷娘不供养。 兄弟似冤家，心中长怅怏，忆昔少年时，求神愿成长。 今为不孝子，世间多此样。买肉自家噇，抹觜道我畅。 自逞说喽罗，聪明无益当。牛头努目瞋，出去始时晌。 择佛烧好香，拣僧归供养。罗汉门前乞，趁却闲和尚。 不悟无为人，从来无相状。封疏请名僧，儭钱两三样。 云光好法师，安角在头上。汝无平等心，圣贤俱不降。 凡圣皆混然，劝君休取相。我法妙难思，天龙尽回向。 我今稽首礼，无上法中王。慈悲大喜舍，名称满十方。 众生作依怙，智慧身金刚。顶礼无所著，我师大法王。 可贵天然物，独一无伴侣。觅他不可见，出入无门户。 促之在方寸，延之一切处。你若不信爱，相逢不相遇。 余家有一窟，窟中无一物。净洁空堂堂，光华明日日。 蔬食养微躯，布裘遮幻质。任你千圣现，我有天真佛。 男儿大丈夫，作事莫莽卤。劲挺铁石心，直取菩提路。 邪路不用行，行之枉辛苦。不要求佛果，识取心王主。 粤自居寒山，曾经几万载。任运遁林泉，栖迟观自在。 寒岩人不到，白云常叆叇。细草作卧褥，青天为被盖。 快活枕石头，天地任变改。 可重是寒山，白云常自闲。猿啼畅道内，虎啸出人间。 独步石可履，孤吟藤好攀。松风清飒飒，鸟语声eX々。 闲自访高僧，烟山万万层。师亲指归路，月挂一轮灯。 闲游华顶上，日朗昼光辉。四顾晴空里，白云同鹤飞。 世有多事人，广学诸知见。不识本真性，与道转悬远。 若能明实相，岂用陈虚愿。一念了自心，开佛之知见。 寒山有一宅，宅中无阑隔。六门左右通，堂中见天碧。 房房虚索索，东壁打西壁。其中一物无，免被人来惜。 寒到烧软火，饥来煮菜吃。不学田舍翁，广置牛庄宅。 尽作地狱业，一入何曾极。好好善思量，思量知轨则。 侬家暂下山，入到城隍里。逢见一群女，端正容貌美。 头戴蜀样花，燕脂涂粉腻。金钏镂银朵，罗衣绯红紫。 朱颜类神仙，香带氛氲气。时人皆顾盼，痴爱染心意。 谓言世无双，魂影随他去。狗咬枯骨头，虚自舐唇齿。 不解返思量，与畜何曾异。今成白发婆，老陋若精魅。 无始由狗心，不超解脱地。 一自遁寒山，养命餐山果。平生何所忧，此世随缘过。 日月如逝川，光阴石中火。任你天地移，我畅岩中坐。 我见世间人，茫茫走路尘。不知此中事，将何为去津。 荣华能几日，眷属片时亲。纵有千斤金，不如林下贫。 自闻梁朝日，四依诸贤士。宝志万回师，四仙傅大士。 显扬一代教，作时如来使。造建僧伽蓝，信心归佛理。 虽乃得如斯，有为多患累。与道殊悬远，折西补东尔。 不达无为功，损多益少利。有声而无形，至今何处去。 吁嗟贫复病，为人绝友亲。瓮里长无饭，甑中屡生尘。 蓬庵不免雨，漏榻劣容身。莫怪今憔悴，多愁定损人。 养女畏太多，已生须训诱。捺头遣小心，鞭背令缄口。 未解乘机杼，那堪事箕帚。张婆语驴驹，汝大不如母。 秉志不可卷，须知我匪席。浪造山林中，独卧盘陀石。 辩士来劝余，速令受金璧。凿墙植蓬蒿，若此非有益。 以我栖迟处，幽深难可论。无风萝自动，不雾竹长昏。 涧水缘谁咽，山云忽自屯。午时庵内坐，始觉日头暾。 忆昔遇逢处，人间逐胜游。乐山登万仞，爱水泛千舟。 送客琵琶谷，携琴鹦鹉洲。焉知松树下，抱膝冷飕飕。 报汝修道者，进求虚劳神。人有精灵物，无字复无文。 呼时历历应，隐处不居存。叮咛善保护，勿令有点痕。 去年春鸟鸣，此时思弟兄。今年秋菊烂，此时思发生。 绿水千肠咽，黄云四面平。哀哉百年内，肠断忆咸京。 多少天台人，不识寒山子。莫知真意度，唤作闲言语。 一住寒山万事休，更无杂念挂心头。 闲于石壁题诗句，任运还同不系舟。 可惜百年屋，左倒右复倾。墙壁分散尽，木植乱差横。 砖瓦片片落，朽烂不堪停。狂风吹蓦榻，再竖卒难成。 精神殊爽爽，形貌极堂堂。能射穿七札，读书览五行。 经眠虎头枕，昔坐象牙床。若无一堵物，不啻冷如霜。 笑我田舍儿，头颊底絷涩。巾子未曾高，腰带长时急。 非是不及时，无钱趁不及。一日有钱财，浮图顶上立。 买肉血dj々，买鱼跳鱍鱍.君身招罪累，妻子成快活。 才死渠便嫁，他人谁敢遏。一朝如破床，两个当头脱。 客难寒山子，君诗无道理。吾观乎古人，贫贱不为耻。 应之笑此言，谈何疏阔矣。愿君似今日，钱是急事尔。 从生不往来，至死无仁义。言既有枝叶，心怀便险诐。 若其开小道，缘此生大伪。诈说造云梯，削之成棘刺。 一瓶铸金成，一瓶埏泥出。二瓶任君看，那个瓶牢实。 欲知瓶有二，须知业非一。将此验生因，修行在今日。 摧残荒草庐，其中烟火蔚。借问群小儿，生来凡几日。 门外有三车，迎之不肯出。饱食腹膨脝，个是痴顽物。 有身与无身，是我复非我。如此审思量，迁延倚岩坐。 足间青草生，顶上红尘堕。已见俗中人，灵床施酒果。 昨见河边树，摧残不可论。二三馀干在，千万斧刀痕。 霜凋萎疏叶，波冲枯朽根。生处当如此，何用怨乾坤。 余见僧繇性希奇，巧妙间生梁朝时。道子飘然为殊特， 二公善绘手毫挥。逞画图真意气异，龙行鬼走神巍巍。 饶邈虚空写尘迹，无因画得志公师。 久住寒山凡几秋，独吟歌曲绝无忧。蓬扉不掩常幽寂， 泉涌甘浆长自流。石室地炉砂鼎沸，松黄柏茗乳香瓯。 饥餐一粒伽陀药，心地调和倚石头。 丹丘迥耸与云齐，空里五峰遥望低。雁塔高排出青嶂， 禅林古殿入虹蜺.风摇松叶赤城秀，雾吐中岩仙路迷。 碧落千山万仞现，藤萝相接次连谿. 千生万死凡几生，生死来去转迷情。 不识心中无价宝，犹似盲驴信脚行。 老病残年百有馀，面黄头白好山居。布裘拥质随缘过， 岂羡人间巧样模。心神用尽为名利，百种贪婪进己躯。 浮生幻化如灯烬，冢内埋身是有无。 世间何事最堪嗟，尽是三途造罪楂。不学白云岩下客， 一条寒衲是生涯。秋到任他林落叶，春来从你树开花。 三界横眠闲无事，明月清风是我家。 昔年曾到大海游，为采摩尼誓恳求。直到龙宫深密处， 金关锁断主神愁。龙王守护安耳里，剑客星挥无处搜。 贾客却归门内去，明珠元在我心头。 众星罗列夜明深，岩点孤灯月未沈。 圆满光华不磨莹，挂在青天是我心。 千年石上古人踪，万丈岩前一点空。 明月照时常皎洁，不劳寻讨问西东。 寒山顶上月轮孤，照见晴空一物无。 可贵天然无价宝，埋在五阴溺身躯。 我向前溪照碧流，或向岩边坐盘石。 心似孤云无所依，悠悠世事何须觅。 我家本住在寒山，石岩栖息离烦缘。泯时万象无痕迹， 舒处周流遍大千。光影腾辉照心地，无有一法当现前。 方知摩尼一颗珠，解用无方处处圆。 世人何事可吁嗟，苦乐交煎勿底涯。生死往来多少劫， 东西南北是谁家。张王李赵权时姓，六道三途事似麻。 只为主人不了绝，遂招迁谢逐迷邪。 余家本住在天台，云路烟深绝客来。千仞岩峦深可遁， 万重谿涧石楼台。桦巾木屐沿流步，布裘藜杖绕山回。 自觉浮生幻化事，逍遥快乐实善哉。 怜底众生病，餐尝略不厌。蒸豚搵蒜酱，炙鸭点椒盐。 去骨鲜鱼脍，兼皮熟肉脸。不知他命苦，只取自家甜。 读书岂免死，读书岂免贫。何以好识字，识字胜他人。 丈夫不识字，无处可安身。黄连搵蒜酱，忘计是苦辛。 我见瞒人汉，如篮盛水走。一气将归家，篮里何曾有。 我见被人瞒，一似园中韭。日日被刀伤，天生还自有。 不见朝垂露，日烁自消除。人身亦如此，阎浮是寄居。 切莫因循过，且令三毒祛。菩提即烦恼，尽令无有馀。 水清澄澄莹，彻底自然见。心中无一事，水清众兽现。 心若不妄起，永劫无改变。若能如是知，是知无背面。 自从到此天台境，经今早度几冬春。 山水不移人自老，见却多少后生人。 说食终不饱，说衣不免寒。饱吃须是饭，著衣方免寒。 不解审思量，只道求佛难。回心即是佛，莫向外头看。 可畏轮回苦，往复似翻尘。蚁巡环未息，六道乱纷纷。 改头换面孔，不离旧时人。速了黑暗狱，无令心性昏。 可畏三界轮，念念未曾息。才始似出头，又却遭沈溺。 假使非非想，盖缘多福力。争似识真源，一得即永得。 昨日游峰顶，下窥千尺崖。临危一株树，风摆两枝开。 雨漂即零落，日晒作尘埃。嗟见此茂秀，今为一聚灰。 自古多少圣，叮咛教自信。人根性不等，高下有利钝。 真佛不肯认，置功枉受困。不知清净心，便是法王印。 我闻天台山，山中有琪树。永言欲攀之，莫晓石桥路。 缘此生悲叹，幸居将已慕。今日观镜中，飒飒鬓垂素。 养子不经师，不及都亭鼠。何曾见好人，岂闻长者语。 为染在薰莸，应须择朋侣。五月贩鲜鱼，莫教人笑汝。 徒闭蓬门坐，频经石火迁。唯闻人作鬼，不见鹤成仙。 念此那堪说，随缘须自怜。回瞻郊郭外，古墓犁为田。 时人见寒山，各谓是风颠。貌不起人目，身唯布裘缠。 我语他不会，他语我不言。为报往来者，可来向寒山。 自在白云间，从来非买山。下危须策杖，上险捉藤攀。 涧底松常翠，谿边石自斑。友朋虽阻绝，春至鸟eX々。 我在村中住，众推无比方。昨日到城下，却被狗形相。 或嫌袴太窄，或说衫少长。挛却鹞子眼，雀儿舞堂堂。 死生元有命，富贵本由天。此是古人语，吾今非谬传。 聪明好短命，痴騃却长年。钝物丰财宝，醒醒汉无钱。 国以人为本，犹如树因地。地厚树扶疏，地薄树憔悴。 不得露其根，枝枯子先坠。决陂以取鱼，是取一期利。 众生不可说，何意许颠邪。面上两恶鸟，心中三毒蛇。 是渠作障碍，使你事烦拏。举手高弹指，南无佛陀耶。 自乐平生道，烟萝石洞间。野情多放旷，长伴白云间。 有路不通世，无心孰可攀。石床孤夜坐，圆月上寒山。 大海水无边，鱼龙万万千。递互相食啖，冗冗痴肉团。 为心不了绝，妄想起如烟。性月澄澄朗，廓尔照无边。 自见天台顶，孤高出众群。风摇松竹韵，月现海潮频。 下望青山际，谈玄有白云。野情便山水，本志慕道伦。 三五痴后生，作事不真实。未读十卷书，强把雌黄笔。 将他儒行篇，唤作贼盗律。脱体似蟫虫，咬破他书帙。 心高如山岳，人我不伏人。解讲围陀典，能谈三教文。 心中无惭愧，破戒违律文。自言上人法，称为第一人。 愚者皆赞叹，智者抚掌笑。阳焰虚空花，岂得免生老。 不如百不解，静坐绝忧恼。 如许多宝贝，海中乘坏舸。前头失却桅，后头又无柁。 宛转任风吹，高低随浪簸。如何得到岸，努力莫端坐。 我见凡愚人，多畜资财谷。饮酒食生命，谓言我富足。 莫知地狱深，唯求上天福。罪业如毗富，岂得免灾毒。 财主忽然死，争共当头哭。供僧读文疏，空是鬼神禄。 福田一个无，虚设一群秃。不如早觉悟，莫作黑暗狱。 狂风不动树，心真无罪福。寄语冗冗人，叮咛再三读。 劝你三界子，莫作勿道理。理短被他欺，理长不奈你。 世间浊滥人，恰似黍粘子。不见无事人，独脱无能比。 早须返本源，三界任缘起。清净入如流，莫饮无明水。 三界人蠢蠢，六道人茫茫。贪财爱淫欲，心恶若豺狼。 地狱如箭射，极苦若为当。兀兀过朝夕，都不别贤良。 好恶总不识，犹如猪及羊。共语如木石，嫉妒似颠狂。 不自见己过，如猪在圈卧。不知自偿债，却笑牛牵磨。 人生在尘蒙，恰似盆中虫。终日行绕绕，不离其盆中。 神仙不可得，烦恼计无穷。岁月如流水，须臾作老翁。 寒山出此语，复似颠狂汉。有事对面说，所以足人怨。 心真出语直，直心无背面。临死度奈河，谁是喽罗汉。 冥冥泉台路，被业相拘绊。 我见多知汉，终日用心神。岐路逞喽罗，欺谩一切人。 唯作地狱滓，不修正直因。忽然无常至，定知乱纷纷。 寄语诸仁者，复以何为怀。达道见自性，自性即如来。 天真元具足，修证转差回。弃本却逐末，只守一场呆。 世有一般人，不恶又不善。不识主人公，随客处处转。 因循过时光，浑是痴肉脔。虽有一灵台，如同客作汉。 常闻释迦佛，先受然灯记。然灯与释迦，只论前后智。 前后体非殊，异中无有异。一佛一切佛，心是如来地。 常闻国大臣，朱紫簪缨禄。富贵百千般，贪荣不知辱。 奴马满宅舍，金银盈帑屋。痴福暂时扶，埋头作地狱。 忽死万事休，男女当头哭。不知有祸殃，前路何疾速。 家破冷飕飕，食无一粒粟。冻饿苦凄凄，良由不觉触。 上人心猛利，一闻便知妙。中流心清净，审思云甚要。 下士钝暗痴，顽皮最难裂。直待血淋头，始知自摧灭。 看取开眼贼，闹市集人决。死尸弃如尘，此时向谁说。 男儿大丈夫，一刀两段截。人面禽兽心，造作何时歇。 我有六兄弟，就中一个恶。打伊又不得，骂伊又不著。 处处无奈何，耽财好淫杀。见好埋头爱，贪心过罗刹。 阿爷恶见伊，阿娘嫌不悦。昨被我捉得，恶骂恣情掣。 趁向无人处，一一向伊说。汝今须改行，覆车须改辙。 若也不信受，共汝恶合杀。汝受我调伏，我共汝觅活。 从此尽和同，如今过菩萨。学业攻炉冶，炼尽三山铁。 至今静恬恬，众人皆赞说。 昔日极贫苦，夜夜数他宝。今日审思量，自家须营造。 掘得一宝藏，纯是水精珠。大有碧眼胡，密拟买将去。 余即报渠言，此珠无价数。 一生慵懒作，憎重只便轻。他家学事业，余持一卷经。 无心装褾轴，来去省人擎。应病则说药，方便度众生。 但自心无事，何处不惺惺。 我见出家人，不入出家学。欲知真出家，心净无绳索。 澄澄孤玄妙，如如无倚托。三界任纵横，四生不可泊。 无为无事人，逍遥实快乐。 昨到云霞观，忽见仙尊士。星冠月帔横，尽云居山水。 余问神仙术，云道若为比。谓言灵无上，妙药心神秘。 守死待鹤来，皆道乘鱼去。余乃返穷之，推寻勿道理。 但看箭射空，须臾还坠地。饶你得仙人，恰似守尸鬼。 心月自精明，万象何能比。欲知仙丹术，身内元神是。 莫学黄巾公，握愚自守拟。 余家有一宅，其宅无正主。地生一寸草，水垂一滴露。 火烧六个贼，风吹黑云雨。子细寻本人，布裹真珠尔。 传语诸公子，听说石齐奴。僮仆八百人，水碓三十区。 舍下养鱼鸟，楼上吹笙竽。伸头临白刃，痴心为绿珠。 何以长惆怅，人生似朝菌。那堪数十年，亲旧凋落尽。 以此思自哀，哀情不可忍。奈何当奈何，托体归山隐。 褴缕关前业，莫诃今日身。若言由冢墓，个是极痴人。 到头君作鬼，岂令男女贫。皎然易解事，作么无精神。 我见黄河水，凡经几度清。水流如急箭，人世若浮萍。 痴属根本业，无明烦恼坑。轮回几许劫，只为造迷盲。 二仪既开辟，人乃居其中。迷汝即吐雾，醒汝即吹风。 惜汝即富贵，夺汝即贫穷。碌碌群汉子，万事由天公。 余劝诸稚子，急离火宅中。三车在门外，载你免飘蓬。 露地四衢坐，当天万事空。十方无上下，来去任西东。 若得个中意，纵横处处通。 可叹浮生人，悠悠何日了。朝朝无闲时，年年不觉老。 总为求衣食，令心生烦恼。扰扰百千年，去来三恶道。 时人寻云路，云路杳无踪。山高多险峻，涧阔少玲珑。 碧嶂前兼后，白云西复东。欲知云路处，云路在虚空。 寒山栖隐处，绝得杂人过。时逢林内鸟，相共唱山歌。 瑞草联谿谷，老松枕嵯峨。可观无事客，憩歇在岩阿。 五岳俱成粉，须弥一寸山。大海一滴水，吸入在心田。 生长菩提子，遍盖天中天。语汝慕道者，慎莫绕十缠。 无衣自访觅，莫共狐谋裘。无食自采取，莫共羊谋羞。 借皮兼借肉，怀叹复怀愁。皆缘义失所，衣食常不周。 自羡山间乐，逍遥无倚托。逐日养残躯，闲思无所作。 时披古佛书，往往登石阁。下窥千尺崖，上有云盘泊。 寒月冷飕飕，身似孤飞鹤。 我见转轮王，千子常围绕。十善化四天，庄严多七宝。 七宝镇随身，庄严甚妙好。一朝福报尽，犹若栖芦鸟。 还作牛领虫，六趣受业道。况复诸凡夫，无常岂长保。 生死如旋火，轮回似麻稻。不解早觉悟，为人枉虚老。 平野水宽阔，丹丘连四明。仙都最高秀，群峰耸翠屏。 远远望何极，矹矹势相迎。独标海隅外，处处播嘉名。 可贵一名山，七宝何能比。松月飕飕冷，云霞片片起。 匼匝几重山，回还多少里。谿涧静澄澄，快活无穷已。 我见世间人，生而还复死。昨朝犹二八，壮气胸襟士。 如今七十过，力困形憔悴。恰似春日花，朝开夜落尔。 迥耸霄汉外，云里路岧峣.瀑布千丈流，如铺练一条。 下有栖心窟，横安定命桥。雄雄镇世界，天台名独超。 盘陀石上坐，谿涧冷凄凄。静玩偏嘉丽，虚岩蒙雾迷。 怡然憩歇处，日斜树影低。我自观心地，莲花出淤泥。 隐士遁人间，多向山中眠。青萝疏麓麓，碧涧响联联。 腾腾且安乐，悠悠自清闲。免有染世事，心静如白莲。 寄语食肉汉，食时无逗遛。今生过去种，未来今日修。 只取今日美，不畏来生忧。老鼠入饭瓮，虽饱难出头。 自从出家后，渐得养生趣。伸缩四肢全，勤听六根具。 褐衣随春冬，粝食供朝暮。今日恳恳修，愿与佛相遇。 五言五百篇，七字七十九。三字二十一，都来六百首。 一例书岩石，自夸云好手。若能会我诗，真是如来母。 世事绕悠悠，贪生早晚休。研尽大地石，何时得歇头。 四时周变易，八节急如流。为报火宅主，露地骑白牛。 可笑五阴窟，四蛇共同居。黑暗无明烛，三毒递相驱。 伴党六个贼，劫掠法财珠。斩却魔军辈，安泰湛如苏。 常闻汉武帝，爰及秦始皇。俱好神仙术，延年竟不长。 金台既摧折，沙丘遂灭亡。茂陵与骊岳，今日草茫茫。 忆得二十年，徐步国清归。国清寺中人，尽道寒山痴。 痴人何用疑，疑不解寻思。我尚自不识，是伊争得知。 低头不用问，问得复何为。有人来骂我，分明了了知。 虽然不应对，却是得便宜。 语你出家辈，何名为出家。奢华求养活，继缀族姓家。 美舌甜唇觜，谄曲心钩加。终日礼道场，持经置功课。 炉烧神佛香，打钟高声和。六时学客舂，昼夜不得卧。 只为爱钱财，心中不脱洒。见他高道人，却嫌诽谤骂。 驴屎比麝香，苦哉佛陀耶。又见出家儿，有力及无力。 上上高节者，鬼神钦道德。君王分辇坐，诸侯拜迎逆。 堪为世福田，世人须保惜。下下低愚者，诈现多求觅。 浊滥即可知，愚痴爱财色。著却福田衣，种田讨衣食。 作债税牛犁，为事不忠直。朝朝行弊恶，往往痛臀脊。 不解善思量，地狱苦无极。一朝著病缠，三年卧床席。 亦有真佛性，翻作无明贼。南无佛陀耶，远远求弥勒。 寒岩深更好，无人行此道。白云高岫闲，青嶂孤猿啸。 我更何所亲，畅志自宜老。形容寒暑迁，心珠甚可保。 岩前独静坐，圆月当天耀。万象影现中，一轮本无照。 廓然神自清，含虚洞玄妙。因指见其月，月是心枢要。 本志慕道伦，道伦常获亲。时逢杜源客，每接话禅宾。 谈玄月明夜，探理日临晨。万机俱泯迹，方识本来人。 元非隐逸士，自号山林人。仕鲁蒙帻帛，且爱裹疏巾。 道有巢许操，耻为尧舜臣。猕猴罩帽子，学人避风尘。 自古诸哲人，不见有长存。生而还复死，尽变作灰尘。 积骨如毗富，别泪成海津。唯有空名在，岂免生死轮。 今日岩前坐，坐久烟云收。一道清溪冷，千寻碧嶂头。 白云朝影静，明月夜光浮。身上无尘垢，心中那更忧。 千云万水间，中有一闲士。白日游青山，夜归岩下睡。 倏尔过春秋，寂然无尘累。快哉何所依，静若秋江水。 劝你休去来，莫恼他阎老。失脚入三途，粉骨遭千捣。 长为地狱人，永隔今生道。勉你信余言，识取衣中宝。 世间一等流，诚堪与人笑。出家弊己身，诳俗将为道。 虽著离尘衣，衣中多养蚤。不如归去来，识取心王好。 高高峰顶上，四顾极无边。独坐无人知，孤月照寒泉。 泉中且无月，月自在青天。吟此一曲歌，歌终不是禅。 有个王秀才，笑我诗多失。云不识蜂腰，仍不会鹤膝。 平侧不解压，凡言取次出。我笑你作诗，如盲徒咏日。 我住在村乡，无爷亦无娘。无名无姓第，人唤作张王。 并无人教我，贫贱也寻常。自怜心的实，坚固等金刚。 寒山出此语，此语无人信。蜜甜足人尝，黄蘖苦难近。 顺情生喜悦，逆意多瞋恨。但看木傀儡，弄了一场困。 我见人转经，依他言语会。口转心不转，心口相违背。 心真无委曲，不作诸缠盖。但且自省躬，莫觅他替代。 可中作得主，是知无内外。 寒山唯白云，寂寂绝埃尘。草座山家有，孤灯明月轮。 石床临碧沼，虎鹿每为邻。自羡幽居乐，长为象外人。 鹿生深林中，饮水而食草。伸脚树下眠，可怜无烦恼。 系之在华堂，肴膳极肥好。终日不肯尝，形容转枯槁。 花上黄莺子，eX々声可怜美人颜似玉，对此弄鸣弦。 玩之能不足，眷恋在龆年。花飞鸟亦散，洒泪秋风前。 栖迟寒岩下，偏讶最幽奇。携篮采山茹，挈笼摘果归。 蔬斋敷茅坐，啜啄食紫芝。清沼濯瓢钵，杂和煮稠稀。 当阳拥裘坐，闲读古人诗。 昔日经行处，今复七十年。故人无来往，埋在古冢间。 余今头已白，犹守片云山。为报后来子，何不读古言。 欲向东岩去，于今无量年。昨来攀葛上，半路困风烟。 径窄衣难进，苔粘履不全。住兹丹桂下，且枕白云眠。 我见利智人，观者便知意。不假寻文字，直入如来地。 心不逐诸缘，意根不妄起。心意不生时，内外无馀事。 身著空花衣，足蹑龟毛履。手把兔角弓，拟射无明鬼。 君看叶里花，能得几时好。今日畏人攀，明朝待谁扫。 可怜娇艳情，年多转成老。将世比于花，红颜岂长保。 画栋非吾宅，松林是我家。一生俄尔过，万事莫言赊。 济渡不造筏，漂沦为采花。善根今未种，何日见生芽。 出生三十年，当游千万里。行江青草合，入塞红尘起。 炼药空求仙，读书兼咏史。今日归寒山，枕流兼洗耳。 寒山无漏岩，其岩甚济要。八风吹不动，万古人传妙。 寂寂好安居，空空离讥诮。孤月夜长明，圆日常来照。 虎丘兼虎谿，不用相呼召。世间有王傅，莫把同周邵。 我自遁寒岩，快活长歌笑。 沙门不持戒，道士不服药。自古多少贤，尽在青山脚。 有人笑我诗，我诗合典雅。不烦郑氏笺，岂用毛公解。 不恨会人稀，只为知音寡。若遣趁宫商，余病莫能罢。 忽遇明眼人，即自流天下。 1date: 2020-01-11 你需要学习Windows API，跟操作系统的各种资源发生关系，才能用C语言做“有用的事情”。 アカマミレの青春 1date: 2020-01-16 如果把人划分成四个象限，那么有一种划分方式是： A：想赢，能赢B：不想赢，能赢C：不想赢，不能赢D：想赢，不能赢 被pua的全在D里面。 所以怎么不被pua？ 只要你不想赢，那你就不会输。 广撒网，勤摸奖，不挑食，随便上。 不撒网，性幻想，还想赢，火葬场。 找导师 找工作 找女朋友 都能用 师傅领进门，修行靠自身 1date: 2020-01-20 只要不在乎别人的看法，躺平任嘲，快乐的成本是很低的。看电影却不当评测、写文章却不当作家、写代码却不当码农、打篮球却不去打比赛，都是快乐的源泉。而且最重要的是，这些快乐成本非常低，你甚至不需要一份体面的工作也可以实现。 我认为一个人在伺候好自己，让自己快乐之前，就投入到竞争之中，是一种错误的行为。首先投入竞争，就跟为了男朋友把自己的男性朋友全都脱离关系一样，你这个人就跟这个男朋友绑定了。以后他不要你了怎么办？是不是要去泼硫酸？生活也是一样的。一旦你的享乐跟工作绑定在了一起，你就再也不能失去这份工作，就会成为社会发展的奴隶。 一旦你先让自己快乐起来，再去竞争，你就会发现，输赢已经无所谓了。别人赚钱是为了开心，你已经先一步在赚钱之前已经开心了。那你就有一个稳健的退出机制。反正工作干得好不好，有没有赚到钱，跟你也没有什么关系对不对。 没钱的时候你已经很快乐了，有钱只是让你锦上添花。这就像你本来非常喜欢写代码，于是你每天都写代码，高兴得一笔。结果你赚了钱，你其实也只能在已经高兴得一笔的基础上，加上一顿牛排，一顿刺身，其实变化并不大。快乐主要还是来源于写代码。 凡是觉得自己被磨平了棱角而变得伤感的人，都是因为在这件事情上没有摆正心态。 1date: 2020-01-25 衡门之下，可以栖迟。泌之洋洋，可以乐饥。 岂其食鱼，必河之鲂？岂其取妻，必齐之姜？ 岂其食鱼，必河之鲤？岂其取妻，必宋之子？ 每天起床就三省吾身， 一，今天的事能不做吗？ 二，能不自己做吗？ 三，能拖到明天再做吗？ 问完都是否才开始硬着头皮做。 1date: 2020-01-30 韩非死于公元前233年，秦亡于前207年，汉朝建于前202年。“借君三十年，繁华万里好江山”。30年，秦亡汉立，子房做到了，可惜故人已逝，再无韩。 最后，卫庄隐藏起了自己的情感，连带着感情一并葬给了大韩。赤练持起了紫女的剑，继承了焰灵姬的媚术。张良去了桑海，穿起了韩非生前最爱穿的紫色衣服。哪个更加沉重，是肩上的未来，还是脚后的过去？ “十年可见春去秋来，百年可证生老病死，千年可叹王朝更替，万年可见斗转星移，凡人如果用一天的视野，去窥探百万年的天地，是否就如同井底之蛙”","categories":[{"name":"Random Thoughts","slug":"Random-Thoughts","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/"},{"name":"2020","slug":"Random-Thoughts/2020","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/2020/"}],"tags":[{"name":"Essay","slug":"Essay","permalink":"http://muxueweiyu.github.io/tags/Essay/"}]},{"title":"Random-Thoughts","slug":"Random Thoughts/2019/2019-12","date":"2019-12-01T03:48:15.000Z","updated":"2021-04-05T02:12:46.598Z","comments":true,"path":"2019/12/01/Random Thoughts/2019/2019-12/","link":"","permalink":"http://muxueweiyu.github.io/2019/12/01/Random%20Thoughts/2019/2019-12/","excerpt":"醉里且贪欢笑，要愁那得工夫。近来始觉古人书。信著全无是处。 昨夜松边醉倒，问松我醉何如。只疑松动要来扶。以手推松曰去。","text":"醉里且贪欢笑，要愁那得工夫。近来始觉古人书。信著全无是处。 昨夜松边醉倒，问松我醉何如。只疑松动要来扶。以手推松曰去。 1date: 2019-12-01 此后如竟没有炬火：我便是唯一的光。 关中古时是指函古关以西,大散关以东,萧关以南和武关以北,因易守难攻,关隘众多,故名“关中”. “三秦”的由来与项羽、刘邦楚汉战争有关，在秦朝灭亡之初，项羽势力大，首先称王，在鸿门宴他虽未杀刘邦，毕竟有所忌惮，就将刘邦封为汉王，远派秦岭南边的汉中，还不放心就又派了三员秦朝降将驻守在秦岭以北，将咸阳西安一带围护，项羽从此向东到他的故地。项羽之派三员秦将守关中地区，是因为刘邦首先攻入咸阳灭秦，原秦国官员对刘邦恨之入骨。人们就此将三员秦将驻守的地方（主要是关中地区）称为“三秦”。后来“三秦”就逐渐成了陕西的代称。 1date: 2019-12-06 12345678910111213程序性知识难以掌握，但也难以忘记，比如骑自行车。陈述性知识相对容易掌握，却也相对容易忘记。解题，是一种程序性知识。需要观念性的理解。如果例题相对不够多，拿习题解当例题看也没毛病。在一个授之以鱼，考之以鲸鲟鲰鳅鲦魟大环境下，需要在规定时间内，掌握习题解提供的大量变式。当初上知乎是为了看到更大的世界，如今却只看到狭隘。日语像Javascript，英语像Python，汉语像C++，我这个观点程序员朋友应该会明白，只可意会，不可言传。善泳者死于水了，”你们有什么资格抱怨，你们失去的不过只是青春和生命，写下来让我们丢了的可是脸啊！”文字视屏化,宇息低密化,舆论扁平化,管理集中化,群体反智化,精英咽巴化。Material Design 2 现在是失联招聘，前程堪忧，boss 直拒，58 不成和扫大街网 1date: 2019-12-16 12345678910心若冰清，天塌不惊。万变犹定，神怡气静。忘我守一，六根大定。戒点养气，无私无为。上下相顾，神色相依。蓄意玄关，降伏思虑。内外无物，若浊冰清。尘垢不沾，俗相不染。虚空甯宓，浑然无物。无有相生，难易相成。份与物忘，同乎浑涅。天地无涯，万物齐一。飞花落叶，虚怀若谷。千般烦忧，才下心头。即展眉头，灵台清幽。心无罣碍，意无所执。解心释神，莫然无魂。灵净归一，气协魄消。水流心不惊，云在意俱迟。一心不赘物，古今自逍遥 1date: 2019-12-26 你把java学清楚，然后看vert.x，熟悉eventloop，nio，callback，这些东西，知道问题在哪里 然后看kotlin，vertx-lang-kotlin，熟悉await这些东西 再看javafx，把canvas这个控件熟悉一下，还有一些绑定什么的 然后再去看flutter，es4x这些，应该很快，因为很多概念前面都遇到了 然后就可以全栈了 vert.x对付后端，es4x对付前端，flutter对付移动端，javafx搞桌面，这样你就什么都能做了 用canvas升级一下，游戏也能做了，没什么东西，很简单 1date: 2019-12-30 上联：说你行，你就行，不行也行 下联：说不行，就不行，行也不行 横批：不服不行 不论几岁，工作轻松是快乐的必要条件。 不论几岁，剩余时间是致富的必要条件。 收入？都是草纸。 1date: 2019-12-31 【全六季娜娜子出场集数】自统计，如有错误请指正 【第二季】 13集 我的纯纯之爱 14集 我的爱的表白 19集 招待大姐姐 22集 去大姐姐家 25集 娜娜子与小新的爱情交换日记 26集 在外过夜好紧张 59集 和大姐姐玩捉迷藏 101集 和大姐姐去野餐 130集 大姐姐暂时当妈妈 161集 小葵比我更受欢迎 195集 不准跟踪娜娜子姐姐 241集 送礼物给大姐姐 256集 和大姐姐约会 257集 保护娜娜子姐姐 303集 照顾生病的娜娜子姐姐 317集 小新偷溜出医院 318集 在医院睡午觉 328集 想跟娜娜子姐姐去游泳 365集 原稿去哪了 384集 和娜娜子姐姐的爸爸再次碰面 396集 和爸爸一起巡逻守夜 430集 爷爷是我的情敌 459集 我和娜娜子姐姐一起逛鬼屋 485集 女子大学的园游会好好玩 540集 春日部黄门大河时代剧特辑（前篇），541集 春日部黄门大河时代剧特辑（后篇） 564集 我的新娘是怎样的人 573集 我和我的对决 582集 和娜娜子姐姐独处 613集 洗碗包在我身上 629集 迟到不可原谅 634集 一大堆萝卜 637集 调查我的品行 678集 冷冷的早上还是要慢跑 682集 娜娜子姐姐穿和服的样子 690集 考试前都睡不着哦 758集 和小白吵架了 761集 我变胖了 765集 想要睡午觉 778集 这就是青春1，781集 这就是青春2，785集 这就是青春3，789集 这就是青春4 802集 四郎的恋爱大作战 824集 我一定是生病了 835集 和娜娜子姐姐去海水沐浴1 836集 和娜娜子姐姐去海水沐浴2 837集 和娜娜子姐姐去海水沐浴3 855集 保护娜娜子姐姐 862集 娜娜子姐姐的未婚夫","categories":[{"name":"Random Thoughts","slug":"Random-Thoughts","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/"},{"name":"2019","slug":"Random-Thoughts/2019","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/2019/"}],"tags":[{"name":"Essay","slug":"Essay","permalink":"http://muxueweiyu.github.io/tags/Essay/"}]},{"title":"Random-Thoughts","slug":"Random Thoughts/2019/2019-11","date":"2019-11-01T03:48:15.000Z","updated":"2021-04-04T15:50:21.341Z","comments":true,"path":"2019/11/01/Random Thoughts/2019/2019-11/","link":"","permalink":"http://muxueweiyu.github.io/2019/11/01/Random%20Thoughts/2019/2019-11/","excerpt":"能说极有趣的话的人是极冷静的人，最能写热闹文字的人是极寂寞的人。写热烈文字要有冷静头脑、寂寞心情，动中之静。或者说热烈的心情，冷静的头脑。因为这不是享受，是创作。只作者自己觉得热不行，须写出给人看。无论色彩浓淡、事情先后、音节高下，皆有关。","text":"能说极有趣的话的人是极冷静的人，最能写热闹文字的人是极寂寞的人。写热烈文字要有冷静头脑、寂寞心情，动中之静。或者说热烈的心情，冷静的头脑。因为这不是享受，是创作。只作者自己觉得热不行，须写出给人看。无论色彩浓淡、事情先后、音节高下，皆有关。 1date: 2019-11-01 校青年文学社成立于2002年5月，前身为中国民航大学文学研究会，于2005年正式更名为中国民航大学青年文学社，是中国民航大学最具有活力、最完整、最具有影响力的文学类社团。 作为“天津市作家协会的中国民航大学联络单位”和“天津市十所高校文学社团联盟理事单位”，全社上下齐心协力，不仅在校内举办各类精彩绝伦的文学活动，并且于校外的各市级活动中崭露头角，为加强我校与各高校文学交流架起一座建设性的坚实桥梁。 宗旨：聚青年之光，扬文学之风采；借青春之力，圆蓝天之梦想。 部门:中航大青年文学社分为：编辑部、组织部、外宣部、学术部。 编辑部：负责所有文稿的处理与审核与相关的文学培训辅助工作。 组织部：负责组织和策划文学社内外的活动和运筹。 外宣部：负责文学社的宣传工作和稿件的征稿与发放。 学术部：负责文学社的会议的考勤、记录与日常工作。 新媒体部：微信推送管理和微博的日常管理。 文学社各个部门各司其职，相互协调。我们我们本着热爱之名相聚在此，每个人都拥有书写自己青春的权利。文学社以文学之名，于此广发英雄帖，诚邀各路英才，于文字之间，指点江山，谈吐天地。只要你愿以文字之缘结识天下同道。文学社定会给你一个意想不到的怀抱。中航大青年文学社自二零零二年成立以来，一路磕磕绊绊，不胜艰辛。至二零零五年更名之后，几载厉兵秣马，日新月异。请记住这个时刻，让我们给自己和文学社一个共同的梦想，一个全新的开始。 以文为名，书学之墨。一夕为文，百岁为真。 不论是伴随文学社走来的学长学姐，还是未来见证文学社成长的学弟学妹。我们都是一家人。 1date: 2019-11-11 我们自汉唐以来的那种雍容大气，雄厚与深邃，跑到哪里去了？难道我们就用当前这种轻飘飘、眉目不清、大杂烩的文化与世界碰撞吗？ 知识分子最重要的特性是三个。第一，是独立立场。他必须保持独立的思考与判断，不会盲从，也不会轻易放弃自己的立场。第二，是逆向思维。顺向思维没价值。逆向思维才会提供思辨，才能辩证。第三，知识分子一定是前瞻性的。不会只看现实功利。既要站在现在看明天，还要站在明天看现在。用未来价值校正现实。由此我明白，自己在大学里应该做什么和怎么做——要使年轻人真正地接触到人类文明的经典，开拓他们的精神视野，提升他们的审美的品位。 艺术的原动力来自内心深重的压抑与承受。那半年多时间，尤其是整个夏天，挥汗如雨，常常画到夜深人静，已然不知是苦是乐。待画过这些画，才感到这些年种种经受与磨砺都已经融入笔墨中了。然而，想到将要在画展上卖掉这些心爱的近作时，心里又生出依依不舍。这毕竟是我近些年来一次难得的艺术创作。这些画与我共度一段难忘的时光，但是它们终要离我纷纷而去？ 在萨尔茨堡的一个乡间音乐舞会上，我问一个姑娘三句话：喜欢不喜欢莫扎特？喜欢不喜欢杰克逊？真喜欢乡土音乐吗？她说，都喜欢，真喜欢。我问为什么都喜欢？她说，莫扎特是他们音乐伟大的经典与高峰；杰克逊可以宣泄他们个人的生活情感；乡土音乐使他们能够亲近自己祖父祖母和故乡。我想，人的感情是丰富的，对文化的需要是多样的，为什么在我们这儿——现代与传统、城市与乡土一定是对立的？ 1date: 2019-11-22 太好听了，经典啊。此歌1986年发表，发表后高居日本有线榜第1名长达半年之久，刷新日本有线榜历史纪录。邓丽君是日本昭和年间最红的女歌手之一。这首歌的中文版《我只在乎你》在华语地区的影响力同样空前，以至于很多人都误认为是先有的中文版，但其实中文版是在日文版发布一年后也就是1987年发布的。“此类庸俗歌曲……对我国某些青年男女，实是色情引诱之声，精神麻痹之剂。” 出自1982年的《人民音乐》 “严格立法，普遍违法，选择执法”的根源，是技术瓶颈还是管理问题？ 1date: 2019-11-22 123456789101112131415161718大地震！华为亮出备胎，世界为之震惊！某果不自量力欲挑衅华为，结果搬起石头砸自己的脚！谷歌连夜召开紧急会议，就因华为随口的一句话！扬眉吐气！华为强力回击，停止采购一切美国零件！三星总裁对华为这一神秘技术表示自愧不如！华为新机为何没有搭载安卓，专家一句话令国人振奋！台积电嘲笑华为造不出5nmSOC，联发科专家一句话揭其老底！十年前这一厂商对华为百般刁难，如今得看华为脸色！拒绝华为后，11个国家数千万台手机无法上网？华为厉害了！高通嘲笑麒麟980不敌高通855，专家一句话令其沉默...慌了！昔日巨头诺基亚惨遭微软抛弃，跪求华为要求收购免遭倒闭！索尼看到华为的鸿蒙系统为何高呼不可战胜？超燃！华为新机渲染图大曝光！全世界都在疯传！华为拒绝提供基带！库克当场气哭！苹果濒危！谷歌这次真急了！鸿蒙牛刀小试打通七个领域，八万工程师彻夜欢呼！在这个满天繁星的时代，谁又会在乎一颗明星的陨落十年机圈两茫茫，酷派死，乐视亡，中兴欲崛起，联想已黄汤，安卓起，避锋芒，华为独自强，小米魅族撕逼忙，一加锤子出机皇，国产正当强，华为强，OV扬，各大厂商换战场，三天一震惊，五天一机王，手机界，创新强，各水军，骂战忙。遍地都是嘴上挂着真善美，实际上干着奋斗逼式教育的勾当。 1date: 2019-11-30 123456789101112131415161718192021在中国，起初他们杀进社交市场的时候，我没有说话——因为我已经是腾讯用户了；(微信，QQ）接着他们杀进游戏市场的时候，我没有说话——因为我已经不玩腾讯游戏了；（剑灵，DNF）然后他们杀进漫画市场的时候，我没有说话——因为我不看漫画了；（狐妖小红娘）后来他们杀进娱乐市场的时候，我没有说话——因为我不追星，也不看剧；（肖战事件）此后他们追杀网文市场的时候，我没有说话—— 因为我已经很少看网文；（收购阅文）最后他们奔向我喜欢的行业而来，却再也没有人站起来为我们说话了在经济和科学主宰生活的时代，应该给人文以更多的空间；在物质化的时代，应该更注重和关切具有精神价值的事物。由此我明白，自己在大学里应该做什么和怎么做——要使年轻人真正地接触到人类文明的经典，开拓他们的精神视野，提升他们的审美的品位。知识分子最重要的特性是三个。第一，是独立立场。他必须保持独立的思考与判断，不会盲从，也不会轻易放弃自己的立场。第二，是逆向思维。顺向思维没价值。逆向思维才会提供思辨，才能辩证。第三，知识分子一定是前瞻性的。不会只看现实功利。既要站在现在看明天，还要站在明天看现在。用未来价值校正现实。“为什么我的眼里常含泪水？因为我对这片土地爱得深沉……”谁理解我们？不需要了。只要我们理解我们自己。我们自汉唐以来的那种雍容大气，雄厚与深邃，跑到哪里去了？难道我们就用当前这种轻飘飘、眉目不清、大杂烩的文化与世界碰撞吗？面对着全球性的流行文化狂潮的冲击，我们何去何从？我们不能总是一边抱怨这种麦当劳式的快餐食品，无益于精神的强健，一边又手足无措。我们的文化正在迅速的粗鄙化；逐渐在失去自我的重心与文化的尊严。就像沙尘暴肆虐的日子——我们只是关上窗子和戴上口罩吗？没有庄重感、神圣感、厚重感，甚至美感。我们不是把中华文化博大精深挂在嘴边吗？如今国人从哪里能够感知这种博大精深？只能去一座城市才有一个的博物馆吗？文化不精不深，怎样可能“做大做强”？真正强大的文化一定又精又深。比如唐诗宋词、维也纳的音乐、俄罗斯文学和美国电影。只有在精深的文化中，才会有大作品和大家的出现，社会文明才能整体地提高。那是个开放的时代，天宽地阔的时代，也是繁荣的时代。就像原野大地，花鲜草绿不是施肥得来的，而是阳光雨水与自由的风。每当我们知道哪位作家遇到麻烦，比如哪部作品哪篇文章惹了哪个部门哪位领导不满，惹出麻烦来，就去找冯牧。人生的轨迹只有回过头来才能看到。这条弯弯曲曲的轨迹上一定有一些拐点，或大或小，或明或暗。拐点改变你的人生。这些拐点有的是社会强加给你的，不可抗拒；有的是你自我改变的，由此你成功地完成了自己的愿望。拐点之后，或是方向变了，或是其中的内容与故事全然不同；你的人生一定变换了一片风景。网民的幽默，精彩纷呈的收藏夹。","categories":[{"name":"Random Thoughts","slug":"Random-Thoughts","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/"},{"name":"2019","slug":"Random-Thoughts/2019","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/2019/"}],"tags":[{"name":"Essay","slug":"Essay","permalink":"http://muxueweiyu.github.io/tags/Essay/"}]},{"title":"Random-Thoughts","slug":"Random Thoughts/2019/2019-10","date":"2019-10-01T03:48:15.000Z","updated":"2021-04-04T15:44:11.868Z","comments":true,"path":"2019/10/01/Random Thoughts/2019/2019-10/","link":"","permalink":"http://muxueweiyu.github.io/2019/10/01/Random%20Thoughts/2019/2019-10/","excerpt":"既要…也要…又要…还要…","text":"既要…也要…又要…还要… 1date: 2019-10-01 后iPhone世界，任何值得面市的互联设备都必须吸引眼球(设计精良的产品都能迅速流行起来)。”我们常常迷失在事务的理想状态之中，但欲望和现实之间往往是有差距的。” 极端的互联网生活实验帮助穿透所谓物联网的热门效应，尝试抵达出色互联设备的本质。我的理论关乎互联设备的进化发展，制造商和消费者都必须细细思量。设备必须简单至极，如果用户还要阅读指南，才能学会如何使用，那就输了。即使是迷恋数字设备的专栏编辑，也不希望回到家还要扮演IT管理员。 是硬件、产品软件、后端运作、所有IOS、安卓、网页及平板应用、乃至各种不同大小屏幕等一切事物的总和。 当一款互联设备达到了完美结合的境界，他就会吸引我持续使用，这是享受，不仅物有所值，甚至物超所值，因为我成了一屋子里最聪明的人。 健康的主要决定因素有三个，一是锻炼，二是营养，三是睡眠。 恐怕得学会接受事实，我们的世界早已改变。 公司内部没有能完全弄懂所有数据的数据科学家。 1date: 2019-10-11 作家的劳动绝不仅是为了取悦于当代，而更重要的是给历史一个深厚的交代。如果为微小的收获而沾沾自喜，本身就是一种无价值的表现。最渺小的作家常关注于成绩和荣耀，最伟大的作家常沉浸于创造和劳动。劳动自身就是人生的目标。人类史和文学史表明，伟大劳动和创造精神既是产生一些生活和艺术的断章残句，也是至为宝贵的。 尽管如此，在每瓦特的操作中，胜者不是硅而是碳，是原始的神经网络。人类大脑运行时不超过14瓦，这甚至比在卡通漫画中照亮一个角色头上的灯泡的功率还要小。未来，计算机将向大脑的能量耗费看齐，追求人机工程学，其目标绝非“蓝色巨人”动辄兆瓦级的能量需求，也不是数据中心的巨型空调。电池驱动的智能手机行业所开发出来的节能技术是未来所有电脑都必须努力的方向，继而朝着真正的碳大脑能源经济学前进。当一台超级计算机在国际象棋或围棋比赛中打败一个人的时候，这个人只使用了大约14瓦的能量，而计算机及其网络却正在利用哥伦比亚河上耗费近10亿瓦特电力的云。 但谷歌明白，最宝贵的资源不是金钱，而是时间。事实却是，使用搜索的用户依然非常的不耐烦。研究表明，1/20秒之内出现想要的结果才能使用户满意。随机存取存储器的访问速度比磁盘快1万倍。根据访问时间来衡量，它比磁盘存储便宜100倍。故而长期以来，谷歌在随机存取存储器的使用上一直处于世界领先地位。不仅“免费”是个谎言，正如我们所看到的那样，零价格意味着回到物物交换系统。这是人类在石器时代便留下的不可通约的交流泥坑。你付的不是钱而是你的注意力。 最重要的是，你要按时付款。时间是金钱所衡量和代表的事物的本质——在“零边际成本”经济中，当其他一切都变得丰富时，时间仍然最为稀缺。在免费的不确定性之中，隐藏着金钱所代表的这个世界上的真正稀缺。苹果是一家老派的公司，它对其所提供的一切都收取不菲的费用。苹果的首席执行官蒂姆·库克在回忆录中尖酸地说道：“如果服务免费，你就不再是客户，而是产品。”苹果商店每平方英尺的价格是其他零售商的10倍。如果市场转而反对它的产品，如果三星、小米、HTP、乐金（LG）、联想、Techno、Zopo或任何其他在谷歌的刺激下成长起来的亚洲产品以极低的价格出现，苹果很可能会在财富的榜单上迅速地下滑。 免费有什么问题呢？问题是它就是一个谎言。归根结底，在这个地球上没有什么真正的免费。你正在为此付出无法估量的代价。如果你想看一段你可能想看的短视频，你需要先看一段足够长的广告，然后才能点击将其关闭。你不是用可交换的具体金钱来支付，而是用信息和被分散的注意力这种滑溜溜的硬币来支付。 1date: 2019-10-22 12345678910111213141516171819202122人类文明中最宝贵的痕迹可以刻在石头上，而互联网需要学会遗忘。人类文明诞生以来，叙事和记录是我们孜孜不倦传承的母题，在所到之处留下痕迹，已然成为人类的本能。我们总说，「不要忘记」，于是发明了计算机来计算更多的数据，存储更多的记忆，拓展更大的空间，让互联网带领我们突破时空的限制，畅游未来与往昔。曾在《互联网的第一次失忆》中谈到，互联网的记忆很「脆弱」，可能抵不住一次断电或机房损毁，但互联网的遗忘模式却与人类文明的遗忘模式迥然相异。与最原始的石刻相比，目前几乎任何现代的信息存储介质都是经不住时间考验的。互联网记忆的消失，往往与存储介质或平台的突然意外相关，其「失忆」的过程不经筛选。而人类文明的集体记忆，往往是传承精华，遗忘糟粕。现阶段的互联网很难「失忆」，所以人们还能在各种平台上找到自己年少时期的回忆。但互联网太难去「忘记」，也让许多早该消解的情绪、早该翻篇的争吵、早该结束的骂战，早该消弭的恨意，像无处可归的幽灵化为沉重的顽石，永远停留在原地。互联网拔群的记忆力打破了时空的桎梏，却也让我们的生活变得平面，一览无遗。隐私和公众的分界变得模糊，过去和未来的嬗变被彻底无视，人们盲目追求某种意义上的「一致」和「同一」，却忘记了——人工智能姑且算法各异，来自不同文化、不同民族的人类又怎么可能获得完全意义上的同一。让互联网学会遗忘看似是一件很简单的事情，因为对于绝大多数没有被第三方报道引用过的用户来说，可以通过在各大主流平台注销自己的帐号来让自己从互联网上消失。但正如前文所说，遗忘是一种筛选，并不是简单地消失。这就变成了一个在实际操作层面更为复杂的问题，并且直到目前为止尚无较好解决方案的方向。类似「三天可见」、「半年可见」以时限作为标准筛选信息的公开程度的模式，似乎与「断电损毁」没有什么区别，本质上都是不加分辨的让时间较长的信息从互联网上永远消失。一个更加需要面对的问题是，当用户在互联网上分享了越多的信息，用户自身也越来越难以梳理曾经发表的内容。从最简单的例子来说，随着个人云存储和高质量拍照手机的普及，越来越多的人放弃了对自己照片的整理，而选择用云服务存储来存储所有照片。看似「全量保存」了生活中的美好记忆，但却实际让那些真正高光时刻的照片与视频被淹没在海量的重影废片里。前些日子，一个18岁的美国少年因为被人曝出自己16岁时发表的涉及种族歧视的言论，而被原本决定录取他的哈佛取消了offer，即使他连发13条推特为自己辩解，也无济于事。这件事在中外社交媒体都上了热搜，网友们无论支持哪一方，都难得地表达了同一种感叹：「生活在互联网时代真可怕，你所做的任何事情都会被记录下来。少年本人是一起校园枪击案的幸存者，案件之后，一直以社会活动家的身份为推动合理使用枪支和维护校园安全而发声，成绩优异，可以说塑造出了一个积极正能量的人设。然而，因为16岁时同好友的私人聊天中发表了种族歧视的言论，即使事情已经过去两年，依然能够被人翻出来、加以攻击和批判。事件本身对错且先不论，这其中展露出的来自互联网的力量却是让人生畏的。现实生活中，当我们与朋友聊天时，大概根本不会有人想到去记录聊天的内容——毕竟我们每天要与那么多人进行口头交谈，交换大量信息和情感，人们只会记录重要的、必要的信息。但是，互联网将这种信息交换彻底具像化了。现在，它不再是某种古老的传播方式，而是一行行精准排列的数据，可以被编码、被保存和被复制。当人们通过网络平台进行信息交换时，被记录下来的，便不再是重要或者必要的，而是未经筛选、事无巨细的每一条信息。这就造成了一种情境：人们不可能记住自己说的每一句话，互联网却记住了，还为无关看客提供了挖掘和评判的可能性，而当事人本身甚至没有办法阻止这类事情的发生——我的发言不再是我的发言，它归互联网和公众所有——某种意义上这何尝不是一种隐私权的缺失？再说这位美国少年，他在公众面前表现出来的模样和私底下差别太大，有人将这种差别视作欺骗行为，因此认为哈佛取消offer是合理的。这一逻辑在国内许多大型吃瓜事件中其实也经常出现。譬如前段时间某年轻明星被拍到公众场合吸烟，网络上掀起铺天盖地的指责声讨之声；更早时候，某女星因被人挖出年少时在QQ空间写的脏话，遭到了网络暴力。人们似乎认定，人类在每个场合和年龄都应当是言行一致的，假如某位明星被发现曾做过与其公开形象相悖的事情，这种行为将被视作欺骗和「人设崩塌」，并遭到群众的一致批判。表里如一和始终如一是所有人追求的美德，但人类是否能统一自己的全部人设，让自己在所有场合都以一种模式思考和表达其实是一个有争议的心理学问题。比如从荣格的人格面具理论来看，这一要求便不具备合理性。 1date: 2019-10-30 既不回头，何必不忘。 若是无缘，何须誓言。 今日种种，似水无痕。 明夕何夕，君已陌路。 我相信任何一位读者都是在用自己的经历阅读着这些作品，我们阅读它们是为了寻找自己曾经有过的忧伤和欢乐，失望和希望。当我们在这样的作品中发现了自己的思考时，当我们为别人的命运哭泣和欢笑时，我们就会惊喜地发现：别人的故事丰富了自己的经历。这就是为什么同样一部作品，我们不同时期阅读就会产生不同的感受。经典作品的优点是可以反复阅读，每一次的阅读都会使我们本来狭窄和贫乏的人生变得宽广和丰富，或者说使我们的心灵变得宽广和丰富。 我们应该阅读经典作品，这样我们就会理解维克多·雨果和约翰·堂恩的精彩诗篇。维克多·雨果用简单的诗句向我们描述了心灵的面积究竟有多少，他说： 世界上最宽阔的是海洋， 比海洋还要宽阔的是天空， 比天空还要宽阔的是人的心灵。 约翰·堂恩的诗句为这宽阔的心灵又注入了同情和怜悯之心： 谁都不是一座岛屿，自成一体； 每个人都是那广袤大陆的一部分。 如果海浪冲刷掉一个土块，欧洲就少了一点； 如果你朋友或你自己的庄园被冲掉，也是如此。 任何人的死亡使我受到损失，因为我包孕在人类之中。 所以别去打听丧钟为谁而鸣，它为你敲响。","categories":[{"name":"Random Thoughts","slug":"Random-Thoughts","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/"},{"name":"2019","slug":"Random-Thoughts/2019","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/2019/"}],"tags":[{"name":"Essay","slug":"Essay","permalink":"http://muxueweiyu.github.io/tags/Essay/"}]},{"title":"Random-Thoughts","slug":"Random Thoughts/2019/2019-09","date":"2019-09-01T03:48:15.000Z","updated":"2021-03-31T14:49:10.250Z","comments":true,"path":"2019/09/01/Random Thoughts/2019/2019-09/","link":"","permalink":"http://muxueweiyu.github.io/2019/09/01/Random%20Thoughts/2019/2019-09/","excerpt":"既要…也要…又要…还要…","text":"既要…也要…又要…还要… 1date: 2019-09-01 知识的学习一般都分为两个阶段：第一阶段是原理概念框架的学习，这阶段可能需要刷刷题巩固下基本概念；第二阶段是知识实践，需要自己亲自去把第一阶段学到的知识用起来，不断踩坑不断摸索才能内化成自己的东西。网络能给我们的往往是第一阶段的知识资源，告诉我们知识框架和知识体系，指明了财富密码的藏宝图。但我们离到达真正的财富还需要自己去摸索很长的路，这条路是只能自己走，没人可以扶着你前进。 就像一节钢琴课，老师永远只花很少的时间教你一些基本的乐理和乐曲弹奏技巧，剩下的大部分时间永远是让你自己不停地练习。换在网络资源学习的时候，如果你仅仅把老师教的乐理知识看完，不去动手弹琴，哪怕你反复把乐理知识琢磨地再透彻那你最多也就知道个弹钢琴是怎么回事，而学不会真正的钢琴演奏。这个演奏练习的过程就是你从老师那里学来的音乐知识实践的过程，这个过程再好的老师都没办法代你完成，必须你把双手放在琴键上不断地去自己体会。 一个合格的商科学生永远要遵循理性和实事求是，重视数据与逻辑，对市场和经济规律要有基本的认知，最重要的是要有十足的冲动和热情应用自己学到的知识去解剖和认识商业现象 1date: 2019-09-10 谷歌找经济数据任何事件的分析离不开，三要素：事件、动因和证据链 对证据链的要求是尽可能拿到有明确签章的一手资料：比如带有红章的公司公告、财务报表、部门函件、权威网站发布的公文、裁决书，其次才是选择可靠媒体发布的具有来源引用的资料（并对其作一定交叉验证）。 1date: 2019-09-30 说个笑话 “现在所有资源网上都有，谁还买硬盘存东西啊。” 如果你用google、stackoverflow、github、askubuntu、stackexchange、reddit、youtube、wikipedia、geeksforgeeks、coursera、leetcode、medium，那么你可以很轻松地输入——搜索——定位——排序你所需要看的网页，然后点进去轻松看到你所要解决的所有问题。 你用着知乎、百度、csdn、博客园、bilibili、新浪微博、百度知道这些**，企图在里面寻找“技术干货”，那么你只能从信息检索结果中寻找到[额]——你寻思寻思，你用的这些垃圾平台、看着垃圾运营管理者们随心所欲地推送他们认为赚钱的内容，设定他们认为正确的标准——你成天用这些玩意儿配得上“计算机编程氛围”吗？ 语言相关的排版技术就是一种无法国际化的东西，需要一个语言一个语言去做。回过头来，我们说这个激光照排这个技术以及之后的方正系排版软件，由于这些东西是封闭的，即使凭借现有的资料来看，技术并不算一流，比如吹得天花乱坠的那个字体技术，随便翻开70年代的计算机图形学论文总会找出几篇论文可以看看是不是有类似的东西。就这个意义上，其实王选的技术最直接的意义只是把东西做了出来，但是做的并不是最好的。最简单来说，铅字时代那些丰富的经验在这个系统里面其实都被丢掉了，也是从他那个时代开始，一直持续到现在，我们所看的书的排版大部分都是糟糕得不行的。这个帽子必须要扣到他们那一代的头上。 他的那个时代早就结束了。这个时代里面，他的那套东西也早过时了（****不是这个系统不重要，只是它已经老了）。","categories":[{"name":"Random Thoughts","slug":"Random-Thoughts","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/"},{"name":"2019","slug":"Random-Thoughts/2019","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/2019/"}],"tags":[{"name":"Essay","slug":"Essay","permalink":"http://muxueweiyu.github.io/tags/Essay/"}]},{"title":"Tang","slug":"Tang and Song/Tang","date":"2019-08-18T05:32:07.000Z","updated":"2021-03-22T07:33:43.335Z","comments":true,"path":"2019/08/18/Tang and Song/Tang/","link":"","permalink":"http://muxueweiyu.github.io/2019/08/18/Tang%20and%20Song/Tang/","excerpt":"文化之瑰宝，不可弃之于神坛之上，当用心寻之。","text":"文化之瑰宝，不可弃之于神坛之上，当用心寻之。 将进酒唐代：李白 123456789101112君不见黄河之水天上来，奔流到海不复回。君不见高堂明镜悲白发，朝如青丝暮成雪。人生得意须尽欢，莫使金樽空对月。天生我材必有用，千金散尽还复来。烹羊宰牛且为乐，会须一饮三百杯。岑夫子，丹丘生，将进酒，杯莫停。与君歌一曲，请君为我倾耳听。(倾耳听 一作：侧耳听)钟鼓馔玉不足贵，但愿长醉不愿醒。(不足贵 一作：何足贵；不愿醒 一作：不复醒)古来圣贤皆寂寞，惟有饮者留其名。(古来 一作：自古；惟 通：唯)陈王昔时宴平乐，斗酒十千恣欢谑。主人何为言少钱，径须沽取对君酌。五花马、千金裘，呼儿将出换美酒，与尔同销万古愁。 三五七言/秋风词唐代：李白 123456秋风清，秋月明，落叶聚还散，寒鸦栖复惊。相思相见知何日？此时此夜难为情！入我相思门，知我相思苦，长相思兮长相忆，短相思兮无穷极，早知如此绊人心，何如当初莫相识。 月下独酌·其二唐代：李白 123456789101112天若不爱酒，酒星不在天。地若不爱酒，地应无酒泉。天地既爱酒，爱酒不愧天。已闻清比圣，复道浊如贤。贤圣既已饮，何必求神仙。三杯通大道，一斗合自然。但得酒中趣，勿为醒者传。且乐生前一杯酒，何须身后千载名？吾观自古贤达人，功成不退皆殒身。子胥既弃吴江上，屈原终投湘水滨。","categories":[{"name":"Tang and Song","slug":"Tang-and-Song","permalink":"http://muxueweiyu.github.io/categories/Tang-and-Song/"}],"tags":[{"name":"Classical","slug":"Classical","permalink":"http://muxueweiyu.github.io/tags/Classical/"},{"name":"culture","slug":"culture","permalink":"http://muxueweiyu.github.io/tags/culture/"},{"name":"Poetry","slug":"Poetry","permalink":"http://muxueweiyu.github.io/tags/Poetry/"}]},{"title":"Random-Thoughts","slug":"Random Thoughts/2019/2019-08","date":"2019-08-01T03:48:15.000Z","updated":"2021-03-31T13:38:25.473Z","comments":true,"path":"2019/08/01/Random Thoughts/2019/2019-08/","link":"","permalink":"http://muxueweiyu.github.io/2019/08/01/Random%20Thoughts/2019/2019-08/","excerpt":"酒醒只在花前坐，酒醉还来花下眠 半醒半醉日复日，花落花开年复年","text":"酒醒只在花前坐，酒醉还来花下眠 半醒半醉日复日，花落花开年复年 1date: 2019-08-01 青年在选择职业时的考虑普鲁士王国莱因省特里尔镇特里尔中学 卡尔·马克思（17 岁） 自然本身给动物规定了它应该遵守的活动范围，动物也就安分地在这个范围内活动，而不试图越出这个范围，甚至不考虑有其它范围存在。神也给人指定了共同的目标──使人类和他自己趋于高尚，但是，神要人自己去寻找可以达到这个目标的手段；神让人在社会上选择一个最适合于他、最能使他和社会变得高尚的地位。 这种选择是人比其它创造物远为优越的地方，但同时也是可能毁灭人的一生、破坏他的一切计划并使他陷于不幸的行为。因此，认真地权衡这种选择，无疑是开始走上生活道路而又不愿在最重要的事情上听天由命的青年的首要责任。 每个人眼前都有一个目标，这个目标至少在他本人看来是伟大的，而且如果最深刻的信念，即内心深处的声音，认为这个目标是伟大的，那它实际上也是伟大的，因为神决不会使世人完全没有引导者；神轻声地但坚定地作启示。 但是，这声音很容易被淹没；我们认为是热情的东西可能倏忽而生，同样可能倏忽而逝。也许，我们的幻想蓦然迸发，我们的感情激动起来，我们的眼前浮想联翩，我们狂热地追求我们以为是神本身给我们指出的目标；但是，我们梦寐以求的东西很快就使我们厌恶，于是，我们便感到自己的整个存在遭到了毁灭。 因此，我们应当认真考虑：我们对所选择的职业是不是真的怀有热情？发自我们内心的声音是不是同意选择这种职业？我们的热情是不是一种迷误？我们认为是神的召唤的东西是不是一种自我欺骗？不过，如果不对热情的来源本身加以探究，我们又怎么能认清这一切呢？ 伟大的东西是闪光的，闪光会激发虚荣心，虚荣心容易使人产生热情或者一种我们觉得是热情的东西；但是，被名利迷住了心窍的人，理性是无法加以约束的，于是他一头栽进那不可抗拒的欲念召唤他去的地方；他的职业已经不再是由他自己选择，而是由偶然机会和假象去决定了。 我们的使命决不是求得一个最足以炫耀的职业，因为它不是那种可能由我们长期从事，但始终不会使我们感到厌倦、始终不会使我们劲头低落、始终不会使我们的热情冷却的职业，相反，我们很快就会觉得，我们的愿望没有得到满足，我们的理想没有实现，我们就将怨天尤人。 但是，不仅虚荣心能够引起对某种职业的突然的热情，而且我们也许会用自己的幻想把这种职业美化，把它美化成生活所能提供的至高无上的东西。我们没有仔细分析它，没有衡量它的全部分量，即它加在我们肩上的重大责任；我们只是从远处观察它，而从远处观察是靠不住的。 在这里，我们自己的理性不能给我们充当顾问，因为当它被感情欺骗，受幻想蒙蔽时，它既不依靠经验，也不依靠更深入的观察。然而，我们的目光应该投向谁呢？当我们丧失理性的时候，谁来支持我们呢？ 是我们的父母，他们走过了漫长的生活道路，饱尝了人世辛酸。──我们的心这样提醒我们。 如果我们经过冷静的考察，认清了所选择的职业的全部分量，了解它的困难以后，仍然对它充满热情，仍然爱它，觉得自己适合于它，那时我们就可以选择它，那时我们既不会受热情的欺骗，也不会仓促从事。 但是，我们并不总是能够选择我们自认为适合的职业；我们在社会上的关系，还在我们有能力决定它们以前就已经在某种程度上开始确立了。 我们的体质常常威胁我们，可是任何人也不敢藐视它的权利。 诚然，我们能够超越体质的限制，但这么一来，我们也就垮得更快；在这种情况下，我们就是冒险把大厦建筑在残破的废墟上，我们的一生也就变成一场精神原则和肉体原则之间的不幸的斗争。但是，一个不能克服自身相互斗争的因素的人，又怎能抗御生活的猛烈冲击，怎能安静地从事活动呢？然而只有从安静中才能产生出伟大壮丽的事业，安静是唯一能生长出成熟果实的土壤。 尽管我们由于体质不适合我们的职业，不能持久地工作，而且很少能够愉快地工作，但是，为了克尽职守而牺牲自己幸福的思想激励着我们不顾体弱去努力工作。如果我们选择了力不胜任的职业，那么我们决不能把它做好，我们很快就会自愧无能，就会感到自己是无用的人，是不能完成自己使命的社会成员。由此产生的最自然的结果就是自卑。还有比这更痛苦的感情吗？还有比这更难于靠外界的各种赐予来补偿的感情吗？自卑是一条毒蛇，它无尽无休地搅扰、啃啮我们的胸膛，吮吸我们心中滋润生命的血液，注入厌世和绝望的毒液。 如果我们错误地估计了自己的能力，以为能够胜任经过较为仔细的考虑而选定的职业，那么这种错误将使我们受到惩罚。即使不受到外界的指责，我们也会感到比外界指责更为可怕的痛苦。 如果我们把这一切都考虑过了，如果我们的生活条件容许我们选择任何一种职业，那么我们就可以选择一种使我们获得最高尊严的职业，一种建立在我们深信其正确的思想上的职业，一种能给我们提供最广阔的场所来为人类工作，并使我们自己不断接近共同目标即臻于完美境界的职业，而对于这个共同目标来说，任何职业都只不过是一种手段。 尊严是最能使人高尚、使他的活动和他的一切努力具有更加崇高品质的东西，是使他无可非议、受到众人钦佩并高出于众人之上的东西。 但是，能给人以尊严的只有这样的职业，在从事这种职业时我们不是作为奴隶般的工具，而是在自己的领域内独立地进行创造；这种职业不需要有不体面的行动（哪怕只是表面上不体面的行动），甚至最优秀的人物也会怀着崇高的自豪感去从事它。最合乎这些要求的职业，并不总是最高的职业，但往往是最可取的职业。 但是，正如有失尊严的职业会贬低我们一样，那种建立在我们后来认为是错误的思想上的职业也一定会成为我们的沉重负担。 这里，我们除了自我欺骗，别无解救办法，而让人自我欺骗的解救办法是多么令人失望啊！ 那些主要不是干预生活本身，而是从事抽象真理的研究的职业，对于还没有确立坚定的原则和牢固的、不可动摇的信念的青年是最危险的，当然，如果这些职业在我们心里深深地扎下了根，如果我们能够为它们的主导思想而牺牲生命、竭尽全力，这些职业看来还是最高尚的。 这些职业能够使具有合适才干的人幸福，但是也会使那些不经考虑、凭一时冲动而贸然从事的人毁灭。 相反，重视作为我们职业的基础的思想，会使我们在社会上占有较高的地位，提高我们自己的尊严，使我们的行为不可动摇。 一个选择了自己所珍视的职业的人，一想到他可能不称职时就会战战兢兢──这种人单是因为他在社会上所处的地位是高尚的，他也就会使自己的行为保持高尚。 在选择职业时，我们应该遵守的主要指针是人类的幸福和我们自身的完美。不应认为，这两种利益会彼此敌对、互相冲突，一种利益必定消灭另一种利益；相反，人的本性是这样的：人只有为同时代人的完美、为他们的幸福而工作，自己才能达到完美。 如果一个人只为自己劳动，他也许能够成为著名的学者、伟大的哲人、卓越的诗人，然而他永远不能成为完美的、真正伟大的人物。 历史把那些为共同目标工作因而自己变得高尚的人称为最伟大的人物；经验赞美那些为大多数人带来幸福的人是最幸福的人；宗教本身也教诲我们，人人敬仰的典范，就曾为人类而牺牲自己──有谁敢否定这类教诲呢？ 如果我们选择了最能为人类而工作的职业，那么，重担就不能把我们压倒，因为这是为大家作出的牺牲；那时我们所享受的就不是可怜的、有限的、自私的乐趣，我们的幸福将属于千百万人，我们的事业将悄然无声地存在下去，但是它会永远发挥作用，而面对我们的骨灰，高尚的人们将洒下热泪。 本文原入选苏教版《语文·必修一》，高考改革后，2015年新版教材已删去本文。 1date: 2019-08-11 1Clark，在我求学的时候，我看到了很多比我优秀的人才，无论是智力还是背景，但是你知道吗，我不觉得没钱没背景就是平庸，那是别人贴给你标签。唯有你自己内心的平庸，才是毁掉你人生的平庸。你内心的平庸，就是你失去追求卓越信念的那个瞬间。(Your internal mediocrity is the moment when you lost the faith of being excellent.) 你以后会遇到很多机遇，但你的平庸会毁掉它们。当你觉得自己做的还不错的时候，你已经杀死了那个能够让你做的更好的自己。(When you get the feeling that your work is OK, you have got killed another &#x27;you&#x27; who can make it much better.) 为了写博士论文，自学了Scrivener。 为了画博士论文的图，自学了OmniGraffle。 为了能画出图中城市的地理位置，自学了QGIS和谷歌地图制作。 为了能整理访谈数据，自学了NVivo。 为了能看论文做笔记，自学了Marginnote。 为了能写出好的英语句子，自学了利用正则表达式搜索语料数据库。 为了能整理文献，自学了Papers和DEVONthink。 为了能画思维导图，自学了Scapple和Tinderbox。 为了能背诵单词，自学了Anki。 在如今这个年代，砍柴都是集团化作业，刀磨得再快也架不住别人用人海战术堆出来的高效率。 英语没有学霸一说，因为语言知识工具，熟练到一定程度后就够了，最后它体现的还是语言运用者自己的思维。 哪怕是做到一件小事，背后也需要持之以恒的付出。玩英文游戏，看英文新闻等等这些日常的小事，背后其实也是成年累月坚持不懈的付出。它们一点也不高上大，但我们绝不该假设它们很容易。 哪怕对于 native speaker来说，英语都是要青少年在记忆里最好的年龄段花上至少四、五年去学习的科目，一个非 native speaker又如何能几个月就掌握它？说穿了，所谓几个月就掌握，是指掌握在中国考英语的技巧，而非这门语言在日常生活中的应用。 摆脱字典看懂英文社科著作，摆脱字典通读经济学人和纽约时报。 1date: 2019-08-11 不要让过去的自己，成为今天的敌人。要让过去的自己，成为今天的战友。 一个人最可怕的敌人，就是自己，因为我们总可以找到无数理由去解释自己为什么被别人击败，但真的很难面对自己被自己击败。多少成年人一生都无法面对，更何况高中生？你能来帮帮我吗？你能接受我吗， 我自己成为一支队伍，一个过去的我，支持现在的我的队伍。这支队伍是我的全部，会犯错，会偷懒，会能力不足，但至少今天面前之有一个敌人。 互联网世界处在一个巨大的矛盾中：一方面是信息数量的爆炸，一方面是信息质量的萎缩。而我更发现，如今对于信息的寻找不再是难题，对于信息的甄别却是一个大难题。于是我们人生中可能会碰到那种什么都懂一点但仍然做不出好的决策的人——他们就是被信息数量钝化了判断力的人。 比如说中国历史，除了中国自己出版的各种版本，同时还有英国人出版的《剑桥中国史》，美国人出版的《哈佛中国史》，美籍华人徐中约写的《中国近代史》等等，这些书的基本质量都是教科书级别的，因此能够保证信息的真实性，但同时他们记载的内容和侧重的视角又有所不同，能过扩展你的思考维度，同时也让你从记载的区别中体察出当今社会运行的一些特质。 后退一步的类比体验法也许是回答这个问题的关键。简单地说，当我们在中文语境下思考表达能力的问题时，也许会因为“身在此山中”而“云深不知处”。那么此时倘若我们后退一步，在英语语境下类比思考这个问题，也许就能看到和抓住关键的矛盾。 我们的认知以为我们可以表达得更好时，现实却很可能是自己根本连最基础的语言能力都没有。 1date: 2019-08-22 别人中文表达很厉害时，由于我们对中文母语天然的理解能力，因此并不会觉得说出这些词这些句子真的厉害的——我也会说嘛！然而，当我们将自己带入到英文语境下时，就会更深刻地体验到当别人能在当下说出一个可能你认识但就是死活憋不出来的词或句子时，别人和自己真正的能力差距在哪里——就是那些我们平时以为自己已经掌握但其实根本没有掌握的基础能力：背了很多遍但仍然背不下来的单词，练了很多遍但仍然写不出来的句子。 中文语境下思考表达能力问题时，我们绝大部分人的自尊心和脸皮死活不会让自己承认基础语言能力的欠缺——我们都是成年人了，中文说了这么多年，怎么可能还缺乏这些小学生练习的初级东西？我们内心期待的答案是更高上大的那一套：一定是因为某种“高级”方法没了解，“高级”技能没学到，“高级”书籍没阅读，“高级”思维没掌握。于是我们的眼珠一边追索着“高级”解决方案——如题主所言哲学书籍——一边嘴里还在抱怨：为什么没效果呢？到底缺了什么呢？ 切换到英文语境下思考表达能力问题时，由于挣脱了自尊心和面子的桎梏，一切反而豁然开朗，清楚明白——就是说不出来嘛！ 还能怎么样，多读多听多说多背多练呗！ 对于「实事求是」的原则的彻底抛弃。 这年头还有谁学理化生啊，靠能力吃饭就数学英语计算机， 1date: 2019-08-30 学生物的都知道，生物巨型化是进化的死胡同，巨型化的生物甚至不可能上陆地。因为自己会被自己压垮。 学机械的都知道，越庞大的机械系统，就越容易被一丁点的设计上的误差搞崩。因为它会被自己压垮。 学经济的都知道，边际效用在任何系统中都是存在的。庞大的经济系统本身消耗的成本会把自己压垮。 学计算机工程的都知道，人月神话的道理。一个团队无限加人不能提高效能，因为成员合作沟通需要花费的成本成几何级数增长。团队大到一定程度，就会被自己内部的摸鱼人压垮。 上完了本科，leetcode easy题都不会，读了编译原理连正则表达式都不懂得如何实现，那跟没上过本科又有什么区别？既然没上过，那就大家都不要上好了，生活还开心。本科让喜欢学术的人去读，直接直博。","categories":[{"name":"Random Thoughts","slug":"Random-Thoughts","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/"},{"name":"2019","slug":"Random-Thoughts/2019","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/2019/"}],"tags":[{"name":"Essay","slug":"Essay","permalink":"http://muxueweiyu.github.io/tags/Essay/"}]},{"title":"Song","slug":"Tang and Song/Song","date":"2019-07-18T05:31:53.000Z","updated":"2021-04-04T16:06:49.652Z","comments":true,"path":"2019/07/18/Tang and Song/Song/","link":"","permalink":"http://muxueweiyu.github.io/2019/07/18/Tang%20and%20Song/Song/","excerpt":"复杂感叹的时代，有太多的遗憾。 少年不识愁滋味，爱上层楼。爱上层楼，为赋新诗强说愁。 而今识尽愁滋味，欲说还休。欲说还休，却道“天凉好个秋”！","text":"复杂感叹的时代，有太多的遗憾。 少年不识愁滋味，爱上层楼。爱上层楼，为赋新诗强说愁。 而今识尽愁滋味，欲说还休。欲说还休，却道“天凉好个秋”！ 江城子·乙卯正月二十日夜记梦宋代：苏轼 123十年生死两茫茫，不思量，自难忘。千里孤坟，无处话凄凉。纵使相逢应不识，尘满面，鬓如霜。夜来幽梦忽还乡，小轩窗，正梳妆。相顾无言，惟有泪千行。料得年年肠断处，明月夜，短松冈。(肠断 一作：断肠) 念奴娇·中秋宋代：苏轼 123凭高眺远，见长空万里，云无留迹。桂魄飞来，光射处，冷浸一天秋碧。玉宇琼楼，乘鸾来去，人在清凉国。江山如画，望中烟树历历。我醉拍手狂歌，举杯邀月，对影成三客。起舞徘徊风露下，今夕不知何夕？便欲乘风，翻然归去，何用骑鹏翼。水晶宫里，一声吹断横笛。 於潜僧绿筠轩宋代：苏轼 12345宁可食无肉，不可居无竹。无肉令人瘦，无竹令人俗。人瘦尚可肥，士俗不可医。旁人笑此言，似高还似痴。若对此君仍大嚼，世间那有扬州鹤？ 唐多令 芦叶满汀洲 刘过 123芦叶满汀洲，寒沙带浅流。二十年重过南楼。柳下系船犹未稳，能几日，又中秋。黄鹤断矶头，故人今在否？旧江山浑是新愁。欲买桂花同载酒，终不似，少年游。 摸鱼儿 雁丘词 123456789101112131415问世间，情是何物，直教生死相许？天南地北双飞客，老翅几回寒暑。欢乐趣，离别苦，就中更有痴儿女。君应有语：渺万里层云，千山暮雪，只影向谁去？横汾路，寂寞当年箫鼓，荒烟依旧平楚。招魂楚些何嗟及，山鬼暗啼风雨。天也妒，未信与，莺儿燕子俱黄土。千秋万古，为留待骚人，狂歌痛饮，来访雁丘处。","categories":[{"name":"Tang and Song","slug":"Tang-and-Song","permalink":"http://muxueweiyu.github.io/categories/Tang-and-Song/"}],"tags":[{"name":"Classical","slug":"Classical","permalink":"http://muxueweiyu.github.io/tags/Classical/"},{"name":"culture","slug":"culture","permalink":"http://muxueweiyu.github.io/tags/culture/"},{"name":"Poetry","slug":"Poetry","permalink":"http://muxueweiyu.github.io/tags/Poetry/"}]},{"title":"Random-Thoughts","slug":"Random Thoughts/2019/2019-07","date":"2019-07-01T03:48:15.000Z","updated":"2021-03-31T11:31:55.619Z","comments":true,"path":"2019/07/01/Random Thoughts/2019/2019-07/","link":"","permalink":"http://muxueweiyu.github.io/2019/07/01/Random%20Thoughts/2019/2019-07/","excerpt":"诉衷肠 · 赠周恩来 当年忠贞为国酬，何曾怕断头？如今天下红遍，江山靠谁守？ 业未就，身躯倦，鬓已秋。你我之辈，忍将夙愿，付与东流？","text":"诉衷肠 · 赠周恩来 当年忠贞为国酬，何曾怕断头？如今天下红遍，江山靠谁守？ 业未就，身躯倦，鬓已秋。你我之辈，忍将夙愿，付与东流？ 1date: 2019-07-01 根本原因在于制度不鼓励人们在初中和高中就探索自己未来的专业。程序员本来就是一个10年周期学完才能进场干活的工种，搞成这样还不能怨他们。 设计落后、质量缺陷、社区文化幼稚、物业管理幼稚，让多数房产放不几十年要么落后于现代生活方式，要么需要大修，要么需要大修但是组织不起来，直接导致贬值。这还有更硬核的土地使用权的续期问题， 哪还有什么传统文化啊 刷题，进大厂的最重要旁系技能； 英语，摆脱996的关键旁系技能; 体力，在计算机行业最缺乏的能力； 管理能力，往上走最重要的能力； 「最珍贵的知识和观点，都是免费且自由传播的」的观点。我曾经也是持有这样的观点的，而且我还跟 Andrew Ng 聊过教学内容成本会无限趋近于零的观点，但他不同意。我现在能猜到为什么他不同意了，当然我猜的不代表他的真实想法。 信息是免费的，但容易消化的知识可以存在附加值。 能读懂论文你可以自己去读啊，很多信息在 Wikipedia 上面也有啊，只是你自己读不下去而已，这不能怪别人啊。你去 Coursera 付钱听 Andrew Ng 讲课，是因为他能把复杂的信息变成易于消化的知识，而且还通过小测、作业等手段保证你成功消化他讲课的内容，这就是附加值存在的地方，也是他能赚钱的基石。 理论上，你要学习的理论知识在 FAA（美国联邦航空管理局）手册里面都有啊，为什么你不去读手册呢？因为你读两页就睡着了啊！所以你付钱去买人家充满冷笑话的教学视频，就是为了好消化。 信息是免费存在的，但有很多复杂的知识晦涩难懂，如果有人能够把这些知识变得易于消化，再把教学过程变得富有娱乐性，那自然可以拿来卖钱。这里卖的不是信息不对称，至少不完全是。如果这一条不成立，那知乎作为一个商业公司存在的基石就不存在了啊，赶紧学 Wikipedia 变身成非营利性机构吧。如果这一条不成立，那知乎上各位大 V 的身价也就不存在啦。你想想我们作为大 V 卖的是什么？卖的是信息不对称的话别人为什么不去看论文看 Wikipedia 啊？这个你自己心中不清楚吗？别自欺欺人了。 国内很多土生土长的服务，刚刚开始是支持邮箱注册的，大到一定程度就只允许手机注册了，这就意味着有关部门找上门来了。作为服务平台，一开始你没办法把用户真实身份挖出来还可能能够塘塞过去，你越做越大，你的责任就越来越大，最终你还是要对有关部门负责任的。 为什么同样是程序员，湾区大厂的福利就这么好？因为一波又一波的湾区创业公司要抢人，所以福利必须要往上提。美国劳动法其实是非常落后的，只要求雇主提供 12 周无薪产假，并且没有定义年假。只要能招到人，资本家可以非常剥削，不提供任何年假，只提供 12 周无薪产假。但这个「只要能招到人」在湾区完全不成立。 为什么现在湾区程序员普遍有 20 天左右的年假？因为当年 Sean Parker 制定 Facebook 公司章程时问 Mark Zuckerberg 多少天年假，Mark 想的是 15 天说的是三周，结果 Sean 理解为 21 天就写进公司章程了。在 Facebook 之后的创业公司不得不按照这个标准来做，否则不可能招到跟 Facebook 相似资质的程序员。 为什么同样是 Facebook，在伦敦的收入就比在美国各大城市的要低很多？因为在伦敦的雇主间竞争不激烈啊，大厂就只能在 Google 和 Facebook 这两者之间选一个，那相当于市寡头市场。这两家都没有兴趣往上竞价，于是就保持着整个市场的低收入。 最优秀的人必须在实习阶段抢到，然后才是校招，最后是社招。按现今标准，最优秀的学生应该有几个 GitHub repo 和几千分的 StackOverflow。这种人很有可能大一就开始实习，到他大三实习时那家公司会想方设法留住他，他如果愿意的话根本不会进入校招市场。 1date: 2019-07-11 “写作是一项艰苦的工作。清晰的句子可不是意外所得。只有少数句子一次能够写好，大多数句子三遍能写好就不错了。当你绝望的时候，就这么想吧。如果你觉得写作很难，那是因为它本来就很难。” ——威廉 • 辛瑟，《谈写作》 1975年时，毛主席经过20年的坚持，“罢工自由”才首次写入当时的宪法当中。1982年，“罢工自由”被从宪法中移出 1date: 2019-07-22 因为科技是第一生产力，生产力决定生产关系. 从农业国升级为工业国，但核心解决方案只有一个：土地改革 英国圈地运动、美国南北战争、苏联集体农庄、日本明治维新 没有土地改革，农民生产力无法解放，农业人口无法转变为城市工业人口，工业化一纸空谈 《中国社会各阶层分析》和《湖南农民运动考察报告》 1date: 2019-07-30 1928年，北伐战争结束，中国迎来了所谓的“黄金十年”。当时所有人都相信，推翻帝制、历经混乱而再度统一以后的新中国，必将释放出强大的能量 然而，本以为是开始没想到已是巅峰。随着918事变、中日战争全面爆发，中国看似迅猛的发展势头被轻轻松松地毁于一旦 十年时间太短了、更何况还有外部势力的干涉 可是我党1935年被各路军阀逼到遵义城下时、只剩不到4万人，却在10多年后夺取了全国政权 1861年威廉一世登基、普鲁士还只是一个小邦国，10年后却打得法国人割地赔款、一统德意志","categories":[{"name":"Random Thoughts","slug":"Random-Thoughts","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/"},{"name":"2019","slug":"Random-Thoughts/2019","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/2019/"}],"tags":[{"name":"Essay","slug":"Essay","permalink":"http://muxueweiyu.github.io/tags/Essay/"}]},{"title":"Random-Thoughts","slug":"Random Thoughts/2019/2019-06","date":"2019-06-01T03:48:15.000Z","updated":"2021-03-31T10:40:03.033Z","comments":true,"path":"2019/06/01/Random Thoughts/2019/2019-06/","link":"","permalink":"http://muxueweiyu.github.io/2019/06/01/Random%20Thoughts/2019/2019-06/","excerpt":"唯有躺平，方解此愁。","text":"唯有躺平，方解此愁。 1date: 2019-06-01 具有期刊、报纸及图书全文检索功能的数据库越来越多了，但是重要的问题在于，在任何研究型图书馆里，绝大多数图书与期刊根本没有数字化，主要障碍，包括成本，版权，保存，以及格式问题，读者获取大量重要图书的最佳途径（不仅在物理意义上，也在认知意义上）永远存在于研究型图书馆的大门之内。通过什么途径可以让我获得最有用的信息，检索图书馆印刷型文献， 一些重要的研究资源，不会呈现在网上供用户免费使用，这些资源无法在任何地方、任何时间供任何人随意使用。空间限制 1date: 2019-06-01 本质上还是放羊-娶媳妇-生娃-让娃放羊，无非是找个青草更多的山头、羊更多的村子罢了。 在technet英文版、msdn论坛英文版、reddit几个码农版和stack overflow上就几乎没有看到互相攻击的情况。 可能是语言让我们富有攻击性（大雾） 二十一世纪了，连资本家都知道创造需求才是正道了， 蛀虫们还在那里一个劲满足别人的需求赚钱， 一边把所有能看到的需求都抢着满足了让别人赚不到钱，还一边说自己这叫勤劳…… 高端技术岗位严重不足，而廉价劳动力却还需要很多。 1date: 2019-06-06 书呆子是书看的太多，而跟现实交流太少。但其实他们有跟写书的先贤大能交流，所以他们不但有思想，还与众不同，有跨时代的，也有复古的，古今中外，天文地理，包罗万象。书呆子往往是可爱的人，其实跟他们交流是很有意思的事情，不过需要你对于他们的世界有所了解。 而做题家是其实连跟书的交流也不多，他们整天交流的对象是题，他们人生的意义是做题，他们对万事万物的态度是做题式思维。一切皆可内卷，一切皆是刷题。连耍个女朋友，也像做题一样。 这个公司朝九晚五，基本不加班，但是他要求每个人完成自己能力范围内的工作，你的能力决定你的等级和报酬，同时你的等级也决定你每天要完成的工作量。公司完善的管理制度，会帮助你进行定位，帮你找到你最佳的平衡点，既让你不太闲，又不会让你一直处于焦虑状态，说白了，公司和员工双赢。 同样是绩效考核制度，但是公司的出发点是公司与员工双赢。不但挖掘了员工的潜力，让员工高效率工作，同时让其工作得没有太大压力，找到一个平衡。 1date: 2019-06-06 忍一时越想越气，退一步步步紧逼[哈哈] 如果一个社会不愿意付出智慧应得的价值，那社会就永远得不到智慧带来的优质产品。整个社会创新乏力，和智慧产出得不到认可有很大关系。如果你愿意为之付出价值，从业人员自然会用心去做出优质的产品，否则，他们就会得过且过，敷衍了事。 售后差。更新能力不行。用着用着就崩溃了。我们公司那套管理系统（每周每月统计实际数据和计划，分析报表之类的），开发时候说有多牛逼。从来不更新，走个流程有时候几个小时在哪里转圈圈。找了几家公司想做新系统，发现尼玛不兼容旧数据。用户体验极差。去年开始，我们一帮人都用手动Excel来做报表，很讨厌那套系统。领导想开发新系统，旧数据又不兼容。不开发吧，Excel都比他好用，就是很浪费人力。简直是食之无味，弃之可惜。 1date: 2019-06-12 宣王召大臣而谋曰：“蚤救孰与晚救？”驺忌子曰：“不如勿救。”田忌曰：“弗救，则韩且折而入於魏，不如蚤救之。”孙子曰：“夫韩、魏之兵未弊而救之，是吾代韩受魏之兵，顾反听命於韩也。且魏有破国之志，韩见亡，必东面而愬於齐矣。吾因深结韩之亲而晚承魏之弊，则可重利而得尊名也。”宣王曰：“善。”乃阴告韩之使者而遣之。 三晋韩赵魏之间本就有仇，齐燕之间也多次大打出手，齐楚之间、晋楚之间，哪个诸侯之间没有过血海深仇？秦逼得狠了，六国也许能暂时放下仇恨，只要秦略一放松，六国必定刀兵相向，血流成河。 苏秦靠一张嘴纵横天下，携合纵之策而使得“秦兵不敢窥函谷关十五年”，但犀首简单几句话，就使得六国合纵之策瓦解： 其後秦使犀首欺齐、魏，与共伐赵，欲败从约。齐、魏伐赵，赵王让苏秦。苏秦恐，请使燕，必报齐。苏秦去赵而从约皆解。 1date: 2019-06-18 一件事情臻于完善，其实反面意思就是这种结构已经没有调整的空间，它已经去除了一切杂拌，一切枝蔓。如果事物继续沿着预定的轨道前进，那没问题；但如果突然出现岔道，那这种模式翻车就是必然的。 登上绝顶，风景固然很美，可往哪一个方向走，就都是下坡了。 大概意思如此。 秦王扫六合，固然武功臻于极盛，但衰落也是必然的，只是没想到那么快。 但每一个行业巨头倒下，原因其实都只有一个，它为了它的目标它的地位做了过度的优化，秦国如此，诺基亚等都是如此。 为了达成这个目标，人员、组织机构、制度通通围绕它做最大程度的优化，一切有碍于达成目标的枝枝蔓蔓全部优化掉，裁剪掉，所有杂草通通消灭。 秦帝国更是如此。为了达成一统天下的目标，整个国家成了一架战争机器。军队以人头为目标，财政为军事服务，农业更是一切为了战争。要知道最后秦灭楚的时候，秦始皇给王翦的军队超过60万。 屠睢任嚣赵佗征岭南军队50万，蒙恬对付匈奴的军队30余万。 足足140万军队！ 这可是秦朝。人口也就两千万左右，而后勤保障交通条件又如此之差。即使是今天，保障这么一支庞大的军队的需要，压力也是极大的。百姓的负担可想而知。 所以到了这个时候，必须要改了。因为以前是打天下，现在则是坐天下了。 但一下子改过来，谈何容易。秦国的官吏何曾有过和平治国的经验！他们只会“军管”。 军管可以简单粗暴，但和平治国肯定不行，更需要和风细雨，抽丝剥茧，耐心行事。 这样的简单粗暴，可能老秦国还好点，新征服的六国根本接受不能。简单粗暴对上忍无可忍，火星四溅。 强改的话，必然崩盘。不是有这么一句俗话么，“人若改常，非病则亡”。人是如此，国家同样如此。 读史可以明鉴,知古可以鉴今. 1date: 2019-06-24 最牛的独立APP，微信，更不会鸟百度了。 必须掌握linux因为这是开源且免费的。 The Single Most Important Fact About Encodings If you completely forget everything I just explained, please remember one extremely important fact. It does not make sense to have a string without knowing what encoding it uses. You can no longer stick your head in the sand and pretend that “plain” text is ASCII. CS是证明（递归），算法（递归），语言（lambda演算），操作系统（指针），编译器（lambda演算）—因此，最重要的是，一个不会教C且不会教的JavaSchool Scheme也不是真正的计算机科学教学。尽管函数递归的概念对现实世界可能毫无用处，但它显然是CS研究生学校的先决条件。我不明白为什么CS学校课程委员会的教授们将他们的程序愚弄到这样的程度：不仅他们不能产生工作的程序员，而且他们甚至不能产生可能获得博士学位的CS研究生。并竞争他们的工作。等一下。没关系。也许我明白。 1date: 2019-06-30 与其说看什么书，不如说你要以一种什么样的心态去学习。编程最重要的是练习，学习理论知识是为了让你写出高质量的程序。如果你仅仅是为了写出程序，那根本不需要学习那些东西，自己瞎折腾就好了。 看书虽然重要，但那是为了编程服务的。妄图通过学习什么就可以变成一个合格的程序员那只是一种幻想。 影响最大的是两类书。第一类告诉我如何测试我的代码，第二类告诉我怎样的engineering是错误的。这些大学基本都没教，你们最好自己弄来看。 I was interviewed by WebWord.com: “If your software is going to be popular, you are going to have to deal with a million other things: writing manuals, creating good looking icons if you have a GUI, testing, recruiting good programmers, making a product that people want, usability testing, dealing with Norman the Cranky Tester, and about 100 other things that take up most of your time”","categories":[{"name":"Random Thoughts","slug":"Random-Thoughts","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/"},{"name":"2019","slug":"Random-Thoughts/2019","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/2019/"}],"tags":[{"name":"Essay","slug":"Essay","permalink":"http://muxueweiyu.github.io/tags/Essay/"}]},{"title":"Random-Thoughts","slug":"Random Thoughts/2019/2019-05","date":"2019-05-01T03:48:15.000Z","updated":"2021-03-31T08:26:01.584Z","comments":true,"path":"2019/05/01/Random Thoughts/2019/2019-05/","link":"","permalink":"http://muxueweiyu.github.io/2019/05/01/Random%20Thoughts/2019/2019-05/","excerpt":"这个世界需要英雄, 知道今日事未毕,自然晚睡. 不知明日事何去,自然晚起。","text":"这个世界需要英雄, 知道今日事未毕,自然晚睡. 不知明日事何去,自然晚起。 1date: 2019-05-01 test-first Unit tests prove that your code actually works You get a low-level regression-test suite You can improve the design without breaking it It’s more fun to code with them than without They demonstrate concrete progress Unit tests are a form of sample code It forces you to plan before you code It reduces the cost of bugs It’s even better than code inspections It virtually eliminates coder’s block Unit tests make better designs It’s faster than writing code without tests 编写代码的同时编写结构化测试的习惯，测试优先 主要是要有写单元测试的意识 朝正确方向迈出的每一步总部没有好， 确实从这方面说，我只需要按照大师们的路程走就行了 人不能事事亲为，吸纳前人经验教训，学习历史当是捷径，每种文化和职业必须有理想，有偶像，代码是不是已背离理想标准–，错误总是在没有考查过的地方出现- 不然你早就找到错误所在，理想标准是什么 1date: 2019-05-06 不会雇佣一个不懂写作的程序员，如果你擅长写，就很容易找到工作，技术规格文档，不一定要求网络日志 但要每天练习写作课程，正向地循环激励，使用C来交流用一个学期来接近机器，是用高级语言写出高效的代码，有机会写编译器或者操作系统。为大项目设计架构，如果不能解释为什么。 了解什么是供给和需求，什么是竞争优势，什么是净现值，什么是折扣和边际效用， 商业是如何运作的话，理解商业基本规律的程序员对商业街来说是宝贵的程序员，代码中坚持某些疯狂的设计，理解商业基本规律的程序员，动态逻辑，计算机科学和软件开发不一样，你付给耶鲁学费就是为了学习如何写循环语句吗？你把耶鲁当成什么地方了？Java速成班吗？哼。学的是计算机科学而不是软件开发，没得选择了 明智的招聘者知道热爱编程的人初中就为当地的牙医写数据库程序，高中就在计算机夏令营教课，为校报规划网站，在某个软件公司做实习，他们找的就是这样的人。喜欢编程，容易犯的最大错误就是“有活就接”，拥有一种特殊技能，不要浪费它，编码 开发 商业 1date: 2019-05-11 时代不一样了，不是当年刚恢复高考时大家不论年龄谁都能考的时代了，如今中国大学大量扩招和高度程式化的特点决定了即使你考取了理想的大学，你的心态，气场，思维方式都使你无法被那个远比你年轻的集体所接受。而你想从985大学学习到的知识，也不能弥补你作为异类战战兢兢地在大学里损失掉的四年时光。从你踏入校园的那一刻起，入住寝室、军训、开班会、上课、自习、吃食堂、小组作业、考试、做毕设，无数个场景都会向你暗示一个信息：you do not belong here。是的，你的年龄和经历，已经无法让你和年轻人一样度过正常的大学时光了。 1date: 2019-05-16 大学是教书育人的地方，知识就不该是秘密 一个高校的理科水平，说到底取决于它的数学水平；一个高校的工科水平，说到底取决于它的计算机水平。 不论你是物理还是化学，做到最后就是做数学，数学就是天花板，数学水平上不去，理科整体就上不去。 同理，所有工科，不论你是哪个方向，最后都要殊途同归回到计算机，计算机水平上不去，工科整体就上不去。 不是说其他专业一无是处，敲代码编程跟英语一样是一个必须掌握的工具，不论我是做机械的、材料的还是通信的，没有计算机我如何实现我的想法和我设计的功能呢？ 如果你不需要使用英文写论文，那你就只能发低水平的中文期刊。如果你的科研项目不需要涉及计算机编程，那只能说明你的科研层级很低。 本科绩点不行，就得拿别的去弥补，你不会计算机不懂外语，就没法看文献写文章证明你的科研实力。 1date: 2019-05-21 have a good feel for the elements of style and the esthetic of programming.所教授和利用的技术是所有工程设计的共同的点 计算机改变思维，改变了表达方式，程序认识论–从命令式的观点研究知识的结构，而不是陈述性的观点 ，强调了工程设计的原则 计算提供了一种表达方式，用于探索思想，学生编写和修改程序的能力提供了一种强大的媒介，使探索成为一种自然的活动。 一般来说英美传统中的“科学”，是具有高度逻辑严密性的实证知识体系，既有严密的逻辑性，能自圆其说，又能接受观察和实验的检验：德国的科学概念 往往泛指一切体系化的知识，凡是人们通过系统研究后形成的比较完备的知识体系，不管是否呈现自然科学般的规律性 1date: 2019-05-26 学问如同美酒，因岁月而成熟，对该领域的历史发展了如指掌，但思维极为可能变得僵化，了解整个领域是怎么发展起来的，比单纯从最新发表的论文中获得一些对当前知识的简单印象要重要的多。之前的方法相比，研究领域的结构，在有搜索引擎之前，我们是怎么做的引用文献的结构，信息与知识的区别，计算机获取的内容都只是信息，只是却只能在专业读者的脑中构建出来的产物，如今，信息都是可以即刻获得，知识仍要多年专注地学习才能获取，想象一下，一场突发意外使正在参加某次会议的领域专家全部罹难，重建专业知识，恢复该领域的发展需要多长时间？可能需要好几年，科学电视纪录片的节目制作人是怎么调研一个课题，它们不是去读文献，而是访问专家，这么做很正确，因为这才是知识的唯一存在之处——学者的脑中。文献综述主观性极强，回顾历史，研究演绎推理的中心方式建立在一个框架，参考文献是为了某种目的或论证而准备的。科学不是简单地收集事实，综述也不仅仅是总结和记录证据，有目的的写，有目的地读。文献综述中的关键概念就是结构。，三个层次的方式：章——节——目。章为学术论文或书籍，综述，只需节和目两个层次。 1date: 2019-05-30 要成为一名作家，就要向最好的作家学习。同样，想要拥有高雅的谈吐，就要向最好的演说家学习。想要学习正确地说话，就一定要去模仿公众演讲的大师。认真观察谈话大师，听听他们是如何进行表达的。去听最热门的讲座、演讲和课程，无须模仿演讲技巧，这些演讲技巧是练习过程中自然形成的，而非刻意营造。你该关注的不是演说家如何表达自己，而应该关注他所使用的语言和语言的使用方式。你是否听过今日大师的演讲？过去也有很多演讲大师，但他们现在已化作尘土，人们只能通过文字来欣赏他们的雄辩口才。不过，你可以做的就是去听听当今的演讲大师的演讲。对于许多人来说，还是前人的影响更为深远。当谈到演讲的精髓时，我们总是会去听前人的声音。也许你一直为比彻尔和塔尔梅奇的言谈感到着迷，两位的言谈都发人深省，他们用自己的声音征服了千万人的心。 从他们整理蜡笔小新中我觉得我应该转换下思路了，视频重要又不重要，更为重要的是将信息，转化为知识。","categories":[{"name":"Random Thoughts","slug":"Random-Thoughts","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/"},{"name":"2019","slug":"Random-Thoughts/2019","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/2019/"}],"tags":[{"name":"Essay","slug":"Essay","permalink":"http://muxueweiyu.github.io/tags/Essay/"}]},{"title":"Random-Thoughts","slug":"Random Thoughts/2019/2019-04","date":"2019-04-01T03:48:15.000Z","updated":"2021-03-31T11:32:40.814Z","comments":true,"path":"2019/04/01/Random Thoughts/2019/2019-04/","link":"","permalink":"http://muxueweiyu.github.io/2019/04/01/Random%20Thoughts/2019/2019-04/","excerpt":"一切问题都是利益问题，一切冲突都是利益冲突。","text":"一切问题都是利益问题，一切冲突都是利益冲突。 1date: 2019-04-01 为什么大公司愿意招募基础扎实，知识完备的科班出身者，哪怕这人“只会刷题，没有实际经验”，而不去招募“10年工作经验”的人——很多看似工作经验很多的人，如果只是重复低级劳动，或是了解技术层面非常浅薄的话，进入公司后工作经验并没有太大用处，成长性可能还真不如基础扎实的人 这年头木匠都会sketchup了，而有些人还沉醉在翻字典当文化人的梦想当中， 因特网是政府，学校，工业界合作的最成功的示例之一。两点因素最重要：美国政府30年持续不变的投资，以及充满激情的研究人员对麻省理工学院的提出的“粗略一致和能用的代码”的投入。目标是星辰和大海 1date: 2019-04-11 letter-writing 任何书信的种类、内容和口吻都取决于写信的场合、写信人和收信人的身份。随意还是正式、朴实还是华丽、轻松还是严肃、开心还是沉重、宣泄情感还是就事论事，都取决于这三个条件。 写信最首要、最重要的要求是自然和简单。一封信不应带给读者紧张的阅读感，而应是写信人思想的自然倾泻。我们不喜欢聊天时刻板呆滞的人，同样，读者也不喜欢刻板呆滞的信，如果一封信的口吻如聊天般轻松的话，那么它立马就能吸引读者的注意力。 I beg you will acknowledge receipt and should the owner be found I trust you will notify me, so that I may claim some reward for my honesty. 书信可以分为以下种类：友人和熟人之间的信件、商业关系的信函、公职人员的官方信、教师的教诲信以及那些讲述每日要闻的信，即新闻简报。 语言得体，letters of friendship business letters 诚信永远是最好的原则 official letters 正式文件 letter designed to teach didactic letter 强调 无他唯熟尔 newsletter 诙谐幽默 1date: 2019-04-21 对你的源码负责 不要容忍破窗，它们会增大你软件的熵（这个也是要结合实际情况看的） 记住大图景，注意方向是否有误，不要光低头做事 知道在何时打住，你不可能做到完美 定期为你的知识资产投资 ，就像经济投资一样 定期投资 多元化 管理风险，不要把所有技术放在一个篮子里 低买高卖，能看清形势 为此，你需要 每年至少学习一种新语言 每季度阅读一本技术书籍 也要阅读非技术书籍 批判地思考你读到和听到的 如何表达自己很重要 ，这会增加你的影响力 你想让谁知道 你想让他们知道什么 他们是否感兴趣 他们需要知道细节么 如何促使他们与你交流 DRY，不要重复自己 强加的重复 =&gt; 使用自动生成，减少是信息冗知识 无意的重复 =&gt; 优良的设计 无耐心的重复 =&gt; 考虑长远 开发者间的重复 =&gt; 加强组内交流，制定代码规范，制造更容易复用的环境 减少无关事物的影响 ，非正交 =&gt; 次级效应 =&gt; 补偿行为 =&gt; 经验依赖 好处：提高生产率（促进复用）、降低风险（风险隔离，易测试） 分层设计、抽象和接口约定 避免使用全局变量 考虑使用库的代码侵入性 文档和认同正交性 不存在最终决策，当需求变动频繁的时候，不仅要思考程序架构如何适应这种变动，也要反思是否是设计者没想清楚到底要做什么 使用曳光弹找到目标 ，即MVP + 快速迭代 + 即时的反馈 逐步逼近，摸着石头过河 曳光弹模式永远包含着一个可用的软件版本 原型和便笺，使用原型去表达和快速验证项目的可行性 靠近问题领域编程 使用DSL（Domain Specified Language） 估算，以避免意外 ，主要用来估计工期、分析风险 适当地降低估算速度，慎重思考隐藏的风险 工具成为双手和大脑的延伸，优秀的工具可以放大你的才干。 纯文本以其自解释能力几乎可以永久保存，XML、JSON就是利用此成为通用的数据表现形式 利用shell的力量，它是自动化任务避不开的工具 要能烂熟地使用你的编辑器 要使用高级的编辑器 ，由于你的所有开发工作都建立在它上面，做好这两点可以节省你大量时间 反思一下，在用你的编辑器时，你有遇到过到比较繁琐的操作吗？ 是因为你不会高级使用方式，还是编辑器本身不支持？ 总是使用源码控制（这一点早已成为共识） 调试，debug 通常认为匪夷所思的bug，都来自健忘、自大和愚蠢 QA角色的重要性之一：帮助复现、找到规律性 橡皮鸭调试法 二分查找法 如果bug来自某人的错误假设，那么需要清除团队其他人的相同误解 学习一种文本操纵语言或工具，例如awk，sed，处理数据和结果时一定能用上 编写代码生成器 开发者手动触发，如模板代码 程序自动出发，如scheme to idl，idl to code 1date: 2019-04-30 偏执编程 通过合约设计 ，约定好接口，合作方基于接口开发 强类型语言更容易实现这一点 早崩溃，这在需要编译的软件开发上比较科学，对于web应用来说却不是这样 使用断言确保某事不会发生 ，减少预设条件代理的隐藏bug 不要滥用断言 只在异常处用异常 一定记住释放请求的资源，如内存、句柄等，可以通过封装统一的资源类实现自动的资源释放 时间的魔力 德墨忒尔法则 ，使模块间的依赖减少到最小 物理解耦 要配置不要hardcode ，使用元数据动态描述你的程序 抽象放进代码，细节放进元数据 时间耦合：考虑并发和事件的发生顺序 在异步代码中，总考虑并发 一些GUI的设计模式 发布订阅 MVC 基于规则/规则集的黑板系统 黑板给出统一接口 耦合方通过调用黑板接口避免耦合 黑板通过规则给出输出 编码时 不要靠巧合编程 改动要有文档沉淀 只依靠文档中记录的行为 把你的假设记入文档 在大数据量时 ，考虑算法数量级 兼顾效率和可读性 早重构，常重构 ，代码是业务设计的近似同构体，常重构才能保证代码完美贴合需求设计 重构和功能开发分开进行 重构一定要有测试 优秀的代码不是看新增了多少行，而是看删除了多少行 编写易于测试的代码 测试你的软件，否则你的用户会代你做测试 项目开始前 完美，不是在没有什么需要增加，而是在没有什么需要去掉的时候达到的。 去挖掘需求，思考用户做特定事情的原因，和如何去做的方式， 让需求成为一种一般性的陈述 制作需求文档时的一大危险是太过具体，好的需求文档会保持抽象 经常性复盘 鼓励文档分享和交流 巧妙解决看似不能解决的难题 ，关键要找到 真正的约束 ，去思考 有更容易的方法么 你是在解决真正的问题，还是被外围的技术问题转移了注意力 这件事为什么是一个问题 是什么让它难以解决 它必须这么做么 它必须完成么 准备好再开始，但不要让它成为你懈怠的借口 不要成为方法学的奴隶 实效项目 团队建设 不留破窗户（考验leader的管理能力） 经常性的复盘和例会 减少团队成员分工的冗余 自动化项目流程 =&gt; 效率工程团队开发内部工具 制造context，给成员足够空间 不要使用手动流程 ，它不可控且难以复制 shell、crontab CI和自动化持续集成 代码生成 自动化测试 代码review和源码版本控制流程 常测试，早测试，自动化测试 单元测试/集成测试/压力测试/回归测试 测试状态覆盖，而不是代码覆盖，代码覆盖率提供的意义有限 关于如何生产文本 所有文档都是代码的反映 源码注释应该去把项目里那些难以描述、容易忘记、不能记录在其他地方的东西记载下来 比无意义的名称更糟糕的是有误导性的名称 除非有程序或人工维护，否则任何形式的文档都只是快照 温和地超出用户期望 ，如 友好的新手指引 快捷键 自动化安装 自豪地为你的作品签名","categories":[{"name":"Random Thoughts","slug":"Random-Thoughts","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/"},{"name":"2019","slug":"Random-Thoughts/2019","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/2019/"}],"tags":[{"name":"Essay","slug":"Essay","permalink":"http://muxueweiyu.github.io/tags/Essay/"}]},{"title":"design-document","slug":"professional/design-document/design-document","date":"2019-03-15T14:03:20.000Z","updated":"2021-04-17T13:24:35.192Z","comments":true,"path":"2019/03/15/professional/design-document/design-document/","link":"","permalink":"http://muxueweiyu.github.io/2019/03/15/professional/design-document/design-document/","excerpt":"或许在某一刻才真正发觉到，一个合格的技术员，代码只占其中一部分，技术文档的编写和代码真的是相同重要的。","text":"或许在某一刻才真正发觉到，一个合格的技术员，代码只占其中一部分，技术文档的编写和代码真的是相同重要的。 “Why does being the most intelligent creature on this blue planet entail us doing everything harmful to our environment?”（为什么作为这个蓝色星球上最有智慧的物种却导致我们做的每一件事都对环境有害呢？） Establish your own code specification On Writing Tech Specs","categories":[{"name":"professional","slug":"professional","permalink":"http://muxueweiyu.github.io/categories/professional/"},{"name":"design-document","slug":"professional/design-document","permalink":"http://muxueweiyu.github.io/categories/professional/design-document/"}],"tags":[{"name":"writing","slug":"writing","permalink":"http://muxueweiyu.github.io/tags/writing/"},{"name":"skill","slug":"skill","permalink":"http://muxueweiyu.github.io/tags/skill/"}]},{"title":"Random-Thoughts","slug":"Random Thoughts/2019/2019-03","date":"2019-03-01T03:48:15.000Z","updated":"2021-03-31T07:53:18.333Z","comments":true,"path":"2019/03/01/Random Thoughts/2019/2019-03/","link":"","permalink":"http://muxueweiyu.github.io/2019/03/01/Random%20Thoughts/2019/2019-03/","excerpt":"“子曰：‘笃信好学，守死善道。危邦不入，乱邦不居。天下有道则见，无道则隐。邦有道，贫且贱焉，耻也，邦无道，富且贵焉，耻也。’”","text":"“子曰：‘笃信好学，守死善道。危邦不入，乱邦不居。天下有道则见，无道则隐。邦有道，贫且贱焉，耻也，邦无道，富且贵焉，耻也。’” 1date: 2019-03-01 最好的文字来自不停的修改， 编程尤其如此，再多的修改都不过分，为了写出优秀软件，你必须同时具备两种互相冲突的信念。 一方面，你要像出生牛犊一样，对自己的能力信心万丈；另一方面，你又要像历经沧桑的老人一样，对自己的能力抱着怀疑态度。在我的大脑中，有一个声音说”千难万险只等闲“，还有一个声音却说”早岁哪知世事艰“。两种信念并不矛盾，乐观主义和怀疑倾向对解决难题可能性保持乐观，同时对当前解法的合理性保持怀疑。 只有对现状不满，才会早就杰出的成果。任何措施，只要能让”再设计“周而复始进行下去，都是可取的，文章可以修改到满意为止，但软件的修改通常来说可以无休止地进行下去。文章地读者，软件地使用者. 好好睡觉，好好玩耍，好好做题，大道甚夷而民好径。 安排定律：如果大学四年里，你被学校安排得明明白白的，那么毕业后你迟早也会被这个社会安排得明明白白的。 一门机器学习基础课程-&gt;对标斯坦福CS229 一门计算机视觉-&gt;对标斯坦福CS231 一门自然语言处理-&gt;对标斯坦福CS224 一门概率图模型-&gt;对标斯坦福CS228 一门强化学习-&gt;对标斯坦福CS234 一门机器学习实践课-&gt;对标斯坦福CS20SI 一门大数据挖掘技术-&gt;对标斯坦福CS246 一门凸优化课程-&gt;对标斯坦福EE364 1date: 2019-03-11 高质量课题组的论文。如：斯坦福Chris Manning课题组，UIUC韩家炜教授课题组，哈工大刘挺教授课题组（SCIR），南京大学周志华教授课题组（LAMDA），清华大学刘知远教授课题组等等。 人生的竞争就不再是单线程单一维度的了，再也不是那个我比你多考几分我就能全方面碾压你的时代了，越晚想明白这个问题，就越会在深夜里怀疑人生。 我们似乎都没有太大的进步，比如： 我们依然没法写出一个世界公认好用的计算机语言，python是荷兰人的，而ruby是日本人的； 我们依然没法做出一个独立的有技术自信的操作系统，当unix最流行的时候，是一个芬兰赫尔辛基大学的学生写出的最早的linux内核，然后影响了全世界； 我们依然没有一个像样的IDE，要不是IBM走投无路把eclipse开源，我们连瓢都画不出来； 我们没有能生产高性能大规模集成电路的流水线，没错天河二号用的还是Intel的至强处理器； 我们还不能设计高性能的便携设备处理器，如果MTK不算做我们民族产业的话。 互联网更多是通过财大气粗的方式堆砌起来的，人口红利逐渐变小，基础本来就不扎实，呃不对，基本上没有基础。华为的做法就完全是市场经济的玩法，每年能消化大量计算机高端毕业生的公司，都开始不得不壮士断腕，减少那些无法为企业创造足够价值的人，或许更多的从业者真的要考虑自己的未来 培训机构出来的计算机速成从业人员，本质上还是农民工。 越来越来的师弟师妹正义无反顾的走捷径试图走类北大青鸟路线的时候， 众多的科研人员正在聚集在所谓深度学习这种计算机软件理论与应用技术的交叉领域的时候， 计算机的体系结构与组成原理并没有自主化、生产工艺还无法跟上的时候， 个大厂商联合一起组团骗人、坑蒙拐骗的时候 我脑子涌现出来的那个木头搭建起来的空中楼阁，怎么能同人家钢筋混凝土的摩天大楼比呢？ 当下这个年头，小孩子被游戏迷住，大孩子被IT创业迷住，本质上都是一样的，都是被电脑编程了。 腾讯几乎把握住了当前热门的游戏，要么就收购，不行就抄一个，而且还弄出了电子竞技这么一个伎俩来诱惑小朋友，这种做法和大海中用歌声吸引水手的女妖有区别吗？ 在如今的商业环境已经荡然无存，这种创业对计算机事业来说，并不具备太大的意义，我们教给孩子的不应该是一种经过稀释的知识，孩子要学的并不是大人所掌握的知识的小孩版，首先了解小孩的学习机制，才能为其提供很好的教育。 本质上，电脑的普及，并没有让孩子受惠，反而让他们争相成为了奴隶。 1date: 2019-03-22 理解真正的世界，微积分则是已知的认识这个物理世界最好的数学工具之一。微积分的思维本质上就是一致的，通过编程认知世界，编程本身并不能使你成为更懂思考的人，只有当你通过编程，在电脑上做些模拟，然后加深了对世界的理解和认识之后，才真正接触到帕普特说的power ideas.整个世界都日趋复杂的今天，我们更需要懂得这种思维的人，而电脑则是培养这样的思维的最好的工具，电脑程序可供性。 debugging之于思考的意义，写出来的程序不一定能运行良好，需要调试，改变某个参数，或者修改某项指令，改完之后再测试，加入不行，再改，如此反复，直到最后程序按照预期那样运行。 去腾讯化，重要的东西绝对不会放到腾讯系的产品 以国之名，决定我对我自己这些信息的处置方式，接受别的信息导入而不提供信息导出功能的貔貅机制，本来就是一个流氓的做法，有文化的流氓是很可怕的。UNIX，每个程序不要做过多的事情，做好自己的事情就好了，信息化时代也就是这样，不要过多依赖某个程序或产品， 1date: 2019-03-30 递归和归纳，只是方向不同。“从一般性前提推出个别结论”的是递归， 把握结构是分解问题的关键 “0”——做出简单规则 “逻辑”——两个世界 “余数”—— 分组 “数学归纳法”——通过2个步骤挑战无穷 “排列组合”——关键在于认清问题的性质 “递归”——在自己中找出自己 “指数爆炸”…… 利用此可将复杂问题简化 “不可解问题”——展示了原理上的界限 所有问题的集合是比可数更多的无穷，那里有我们无法企及的世界。 线性无关= 不压缩 线性相关= 压缩 建立一种感觉，面对那些理所当然的想象时，要能够理所当然做出判断。理解矩阵的秩。","categories":[{"name":"Random Thoughts","slug":"Random-Thoughts","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/"},{"name":"2019","slug":"Random-Thoughts/2019","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/2019/"}],"tags":[{"name":"Essay","slug":"Essay","permalink":"http://muxueweiyu.github.io/tags/Essay/"}]},{"title":"vczh","slug":"People that affect me/vczh","date":"2019-02-18T05:21:52.000Z","updated":"2021-03-21T06:48:20.571Z","comments":true,"path":"2019/02/18/People that affect me/vczh/","link":"","permalink":"http://muxueweiyu.github.io/2019/02/18/People%20that%20affect%20me/vczh/","excerpt":"带逛，不需要刻意为之，听其言，观其行做到即可。","text":"带逛，不需要刻意为之，听其言，观其行做到即可。 成长直觉一半来自于举一反三，举一反三一半来自于那个一，而当你对很多问题都有那个一的时候显然是因为你这些问题都碰过，碰过问题跟只学会知识还不一样，你还要解决他们。那如何才能碰过并解决大量的问题呢？唯一的方法就是熬过那一大段时间，通常是十几二十年。你光是聪明，可以学会很多东西，但是由于实践的时间不够，仍然不足已成为一个牛逼的程序员。所以牛逼本身不是一个可以速成的东西，它是知识和经验的积累，然后是运用你的知识和经验的熟练程度。 整天搞windows，遇到需要用linux的时候也只是问问人看看说明书（不过linux好像没有说明书）的事情了。因为本质困难的东西你都会了，剩下的这些操作问题，只是熟练不熟练的区别而已。 游戏做完了不能满足于做完，就要开始想模块化的问题了。怎么做一个游戏用的GUI库？怎么做一个游戏用的脚本引擎？怎么给他们制作工具？怎么写一个游戏引擎？怎么写一个RPG Maker？每一个问题想做简单也可以做简单，想做复杂也可以做的很复杂。于是当我问题一个一个的解决之后，都已经来了M$RA了，这也是我为什么后来会做GacUI 和各种奇怪的编译器研究各种奇怪的类型系统的原因了。当然现在做到这地步都不是仅仅为了游戏而做，当时当你做出一个游戏可以用得东西之后，你就要开始想怎么把它做成通用的，使得开发软件也可以用。每一个问题都最终上升了一个台阶，而你觉得容易的问题就不要浪费时间去解决了。 你需要花时间做什么，取决于这个问题是不是够难，是不是刚刚好你可以做出来，再难一点点你就做不出来了 从一个解决问题的程序员，变成一个研究编程本身的程序员了。 学习编程语言，尽量挑选C++等很有用、不好学、不时髦的语言，避免自己分心，有利于克服人类的劣根性。 算法数据结构设计模式编译原理，都有经典书籍。 勤奋的练习。命令行刷几道题练练手感就好了，接下来就是从贪吃蛇和记事本开始抄，你可以一路抄到很远，譬如做一个vscode。 自己做vscode的时候有一个要点，除了windows api以外不要使用任何其他东西，需要什么全都自己来，这才是练习。你的目标不是开发一个有用的编辑器，你的目标也不是学习对马上工作有用的技能，你的目标是练习编程。要是真的好用，你可以自己用。 学习编程，就要从磨螺母到锤车床到风洞实验室到光速发动机都自己一路做过来，掌握的技能才扎实，你可以从22岁做到92岁，不管即使发生什么变化，都可以从容应对，轻松跟上世界的发展。只会用别人的工具而不会自己造工具的，只会疲于奔命，在35岁的时候还是只能干应届生的活，因为体力不支惨遭淘汰。 变量名用英文的话，写代码的时候就不要用中文思考。你可以每天下班在家4小时，写自己的开源项目，文档全用英文，锻炼自己的语言能力。 另外，设计模式也是一套词汇表，建议先掌握。这样写出来的代码，同样是懂设计模式的人来看，理解起来轻松很多。 one man army There’s only one way to learn to program: writing a lot of code.","categories":[{"name":"People that affect me","slug":"People-that-affect-me","permalink":"http://muxueweiyu.github.io/categories/People-that-affect-me/"}],"tags":[{"name":"affect","slug":"affect","permalink":"http://muxueweiyu.github.io/tags/affect/"},{"name":"people","slug":"people","permalink":"http://muxueweiyu.github.io/tags/people/"}]},{"title":"Random-Thoughts","slug":"Random Thoughts/2019/2019-02","date":"2019-02-01T03:48:15.000Z","updated":"2021-03-30T14:43:46.233Z","comments":true,"path":"2019/02/01/Random Thoughts/2019/2019-02/","link":"","permalink":"http://muxueweiyu.github.io/2019/02/01/Random%20Thoughts/2019/2019-02/","excerpt":"有的有幸游到了岸边，有的不幸迷失在水里 而有的选择沉了下去，永远消失在这片海里","text":"有的有幸游到了岸边，有的不幸迷失在水里 而有的选择沉了下去，永远消失在这片海里 1date: 2019-02-01 在工作需要的时候，程序员的学习能力是惊人的，所以根本没必要“保护” 程序员远离新语法。只要有文档，有时间，他们自然能学会。 自己将检查工具做得更聪明。 过早优化是一切罪恶之源，让代码先跑起来再说，正确性比性能重要 概率论，离散数学 统计 代数和线性代数 数理逻辑 信息论和柯氏复杂性 广度优先才是学习数学的正确方法，深度优先是不行的，先打开眼界，了解各种名称，搞清楚什么是什么 学习数学忘记那些算法和证明，去了解那些技术的方方面面：名称，作用，大概是怎么计算的，历史有多悠久。是谁发明的，局限性在哪里，互相之间的关联是什么，数学里的素质教育。 第一步界定问题，最花时间的，当一个问题在手却不知道如何下手的时候。但看出这是一个微分问题，或是凸优化问题，亦或是布尔逻辑问题的话，至少立刻知道从哪着手寻找答案 链式法则就是对“串在一起”的函数求导，在学会求导和积分之前，应该先去学怎么计数和编程。 学习数学的最佳方式是每天花上15~30分钟浏览下维基百科。有各种关于数学分支的文章，数量多达好几千。读去吧，遇到任何不懂得东西，只要点一下链接跳过去读就可以了。一直读，读到觉得乏了累了。大开眼界，摸出一些门道，每一种数学分支都会涉及一个对应复杂多元版本的单变量，而多元版本几乎一定是用矩阵或者一次方程来表示的，至少在应用数学里都是如此，所以线性代数的重要性就会慢慢上升，不弄懂它到底是怎么回事就是不行的时候，自然就会跑去下载教程或者去买本书来读，皆大欢喜。 所谓的数学就是将人们在某些领域里的“常识”形式化数学研究之所以那么迷人就是因为它唯一的极限就是数学本身；形式化模型本身固有的能力、证明、公理系统、以及法则、信息、计算的表示 浏览数学完全不同，尝试去了解人们到底努力解决什么问题，从那堆符号里看出端倪来，他们也不会像天书一样。只是一个循环罢了，一个把值累加，另一个将他们相乘，积分也不过是连续区间的曲线的和而已，习惯以后就不怎么可怕了 原来如此，当数学不可怕时，只要掏出计算器就行了，计算器可以很炫，几乎所有实用的数学在很大程度上都挺容易接受的 1date: 2019-02-10 每天学一点数学，实在是太棒了！ 编译原理是一门重要的课程，将之前学过的几乎所有东西都捏合再一起 这个世界上除了PC 还有FC、SFC、MD、PS、N64、NGC、SS、DC、PS2、PSP、GBA、GBASP、NDS、3DS、PS3、PSvita、XBOX、XBOX360、PS4、Wii、NS、XBOXone、PS5、XSX等等 这个世界上除了马化腾 还有William Higginbotham、宫崎英高、小岛秀夫、三上真司、阪口博信、宫本茂、神谷英树、上田文人、Will Wright、Sid Meier、Alexey Pajitnov、John D. Carmack、Gabe Newell等 这个世界上除了腾讯等不生产游戏的搬运商以外 还有Clover Studio、Blizzard Entertainment、Electronic Arts、NEXON、Nintendo、Rockstar、Ubisoft、KONAMI、CAPCOM、Naughty Dog、SCE Santa Monica Studio、SEGA、SNK、Valve、KOEI、CDPR、Paradox Interactive、Namco、BANDAI、BANDAINAMCO、Square、 Enix、Square Enix等（不是重复写，因为是游戏史上著名的合并） 这个世界上除了DNF、cf、LOL以外 还有The Last of Us、Chrono Trigger、Grand Theft Auto、Dark Souls、Super Mario Bros、Monster Hunter、Halo、Castlevania、The Legend of Zelda、Valkyrie Profile、God of war、Final Fantasy、Civilization、The Witcher、Call of Duty、Bloodborne等 1date: 2019-02-20 坐在计算机前编程，不耐心一步步写出整个程序，确保大体正确，而不是一股脑不管对错，先把代码堆上去，再慢慢修改。书上说，调试是最后步骤。可是这种工作方法看上去却像编程就是在调试，对对对英雄所见略同，把整个程序想清楚的时间点，应该是在编写代码的同时，而不是在编写代码之前，这与作家，画家和建筑师的做法完全一样。编程语言首要特性应该是允许动态扩展，编程语言是用来帮助思考程序的，而不是来表达你已经想好的程序，应该是一支铅笔，而不是钢笔 创作者不同于科学家，这是巨大的诱惑，去解决那些能够用数学公式处理的问题，而不是去解决真正重要的问题。原来如此，一类人，作家和画家没有对数学家的妒忌，大学和实验室不允许黑客做他们想做的事情，适合黑客的地方可能就是企业，程序员被当作技工，职责就是将产品经理的”构想“翻译成代码。肉食者鄙，排斥差异的时候，将失败的可能性排除在外，也将获得高利润的可能性排除在外，生产特别优秀的产品不是他们的获胜手段，大公司只要做到不太烂，就能赢，竞争优势是在软件设计方面，不过机会不容易找到。原来如此，怎么才能做自己喜欢的事情？这个问题的解决方法是一个几乎所有创作者都知道的方法：找一份养家糊口的白天工作day job 从音乐家身上来的，你有一份为了赚钱的工作，还有一份为了爱好的工作。 开源软件的这种工程模式就是正确的模式，因为已经被其他领域的创作者都验证过了， 面试程序员，主要关注的事情就是业余时间他们写了什么软件，如果你不爱一件事，不可能把它做得真正优秀，要是你很热爱编程就不可避免地会开发你自己的项目 摄影技术消灭了画家的白天工作，微软垃圾的原因啊不鼓励雇员为开源项目做贡献，甚至业余时间也不行，如何学习编程，画家学习绘画的方法主要是动手去画，黑客学习编程的方法也理应如此，他们从实践中学习，13岁就自己动手写程序了，即使上了大学，黑客学习编程依然主要通过自己写程序。画家的作品都会保留下来，每幅画所用的技巧，都是建立在上一幅作品学到的东西之上。谋福作品如果有特别出色之处，往往能够在更早的作品上发现一个小规模的初期版本。大多数创作者都是这样学习和工作的，作家和建筑师似乎都如此，对于黑客来说，采取像画家这样的做法很有好处，定期地从头开始，而不要长年累月地在一个项目上不断工作，并且试图把所有的最新想法都以修订版地形式包括进去。黑客通过实践学习编程说明黑客与科学家区别有多大，科学家就不会通过干活来学习科学，而是通过做实验和解题来学习，科学家研究地基础都是现有的很完美地成果，在这个意义上，他们第一步只是在复制别人已经做过的工作，最后他们才会从某一个点开始，进行自己地原创性工作，但是，黑客就不一样，从一开始就是原创性工作，根本没有他人完美地成果可以依靠，出发点原创，最终得到一个优美地结果；而科学家地出发点是别人优美地结果，最终得到原创性。 黑客不能盼望先有一个完美地规格设计，然后再动手编程，这样想是不现实的，学习绘画的创作过程，周期性心理考虑在内，在我厌倦的时候再去做那些比较容易地工作，这是个不错的主意。修bug可以留到以后解决，这个时候编程才变得直接和机械，接近社会大众想象中的编程的样子，消灭bug过程就像解数学题，已知许多约束条件，根据条件对方程求解就可以了。，哪里出错了？知道最后肯定能解决这个问题，如何与他人一起工作，多人共同开发一个软件的正确模式，需要合作，但不要合作过头，一个代码由三四个人共同开发，就没有人真正拥有这块代码，最终变得像一个公用杂物间，又脏又乱，到出堆满冗余代码，正确方法项目分割严格定义的模块，每一个模块由一个人明确负责，模块与模块接口精心设计，如果可能最好把文档说明写的像模块编程语言规范那样清晰。 绘画作品为人类用户准备，所以需要考虑到用户的人性需要。才能做出伟大的产品，必须能够站在用户的角度思考问题，学会“换位思考”。 从他人的角度思考问题正是成功的奥秘所在，“换位思考”并不就意味着你要做自我牺牲。完全是不同的两码事，了解别人对于事情的看法，知己知彼，百战不殆。大多数创作者都是为人类用户而创作，为了吸引用户，必须理解用户需要什么，几乎所有最伟大的绘画作品都是画人的，因为人类总是对自身感兴趣的。 怎样向技术背景的人解释技术问题，我们大概都认识这样一些人，他们在其他方面非常聪明，但是把问题解释清楚的能力却惊人低下。 软件的部分功能就是解释自身，为了写出优秀软件，必须假定用户对你的软件基本一无所知，要明白，用户第一次使用你的软件的时候，不会预先做好功课，没有任何准备就开始用了，所以软件的使用方式最好能符合用户的直觉，别指望用户去读使用手册。在这方面，最佳系统是原始电脑，文本编辑器和编译器不在此列，这些软件的典型用户是自己。 程序写出来是给别人看的，附带能在机器上运行。许多黑客六个月后再读自己的程序。却发现根本看不懂它是怎么运行的 1date: 2019-02-28 好的设计 好设计是简单的设计 好设计是永不过时的设计 好设计是解决主要问题的设计 好设计是启发性的设计 简·奥斯汀作品几乎不带有任何描述，不告诉读者每件东西看上去是什么样子，只是把故事讲得非常生动，让读者自己把一切都想象出来同样绘画作品也分为描述性绘画和启发性绘画，后者往往比前者更引人入胜，每个人看到《蒙娜丽莎》都有自己的理解。 一个作品应该允许你按照自己的愿望来使用。想怎么布置就可以怎么布置，过上自己想过的家庭生活，而不是使得你像执行程序一样只能过上建筑师为你安排的生活。 软件上，你应该为用户提供一些基本模块，使得他们可以随心所欲自由组合， 好设计通常是有点趣味性的设计 幽默的力量强大的标志轻松面对自己的人生，充满自信的人常常像燕子一样。 好设计并非一定要有趣，但是很难想象完全无趣的设计会是好的设计 好设计是艰苦的设计 功能应当决定形式 好设计是看似容易的设计 完美再现 联系是为了下意识反应，面对难题他能释放你的直觉 好设计是对称的设计 重复性对称和递归性对称 对称的危险在于它可以用来取代思考，在大量使用重复的时候这种危险性更大。 好设计是模仿大自然的设计 我的眼睛看着某样东西，手就代表你的思想， 好设计是一种再设计 培养对自己的不满，犯错误是正常的事情，不要把犯错误看成灾难，要勇于承认，勇于改正 好设计是能够复制的设计 把事情做对对比原创更重要。 不知不觉地模仿几乎必然将导致坏设计，如果你不知道自己的想法从何而来，可能就是在模仿另一个模仿者，等到你逐渐对一件事情产生热情的时候，就不会满足于模仿了，品味就进入了第二阶段，开始自觉地进行原创，最伟大的大师最终会达到一种超脱自我的境界，一心想找到正确答案，如果别人已经回答出了一部分，那就没理由不拿来用。足够自信地使用他人地成果，完全不担心因此丧失个人的特点。 好设计常常是奇特地设计 不仅优美，而且美得很奇特。 好设计是成批出现的 让有天赋的人聚在一起，共同解决某个难题。互相激励比天赋更重要 个人最多对趋势产生一定的影响，但你不可能决定趋势，实际上是趋势决定了你我。 好设计常常是大胆的设计 无法容忍丑陋的东西还不够，只有对这个领域非常熟悉，你才可能发现哪些地方可以动手改进，必须锻炼自己。只有成为某个领域的专家之后，才会听到心里有一个细微的声音说：“这样解决太糟糕了！一定有更好的选择。” 不要忽视这种声音，要培育他们；优秀作品的秘诀就是：非常严格的品味，再加上实现这种品味的能力。","categories":[{"name":"Random Thoughts","slug":"Random-Thoughts","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/"},{"name":"2019","slug":"Random-Thoughts/2019","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/2019/"}],"tags":[{"name":"Essay","slug":"Essay","permalink":"http://muxueweiyu.github.io/tags/Essay/"}]},{"title":"g9","slug":"People that affect me/g9","date":"2019-01-21T06:44:07.000Z","updated":"2021-03-30T15:12:56.831Z","comments":true,"path":"2019/01/21/People that affect me/g9/","link":"","permalink":"http://muxueweiyu.github.io/2019/01/21/People%20that%20affect%20me/g9/","excerpt":"内容相当丰富，这或许是最想要成为的模样。","text":"内容相当丰富，这或许是最想要成为的模样。 图书上学最宝贵的收获之一是结交学识过人的朋友。自己闷头学得山穷水尽时，高手轻轻一句点拨，眼前便峰回路转，柳暗花明。每次上完课，有幸和朋友小聚，请教弱智问题，听朋友妙语解惑，实在是难得的人生乐事。读The Little Schemer，也有同样的感受。读The Little Schemer的过程，就是被良师引导的过程。 作者的话说，The Little Schemer是一本教人理解计算本质的书。编程语言Scheme不过是传道的载体。书的体例独特。每页分成两列。每列寥寥几行代码，数段散句。左边一列问个问题。右边一列给出答案。作者就用这种轻松对话的形式讲解递归和函数编程。 序言的话说，The Little Schemer展示了列表是Lisp编程的心脏，而The Seasoned Schemer展示了函数是Lisp编程的灵魂。 Knuth在《Mathematical Writing》里强调的“为普通人而写，你的作品专家能看懂；为专家而写，你的书没人看懂”的箴言还不够深入人心。 做题的境界把习题当成项目来做。十年寒窗。半世煎熬。习题做完，世界随之改变。例子：A = B这本200来页的书（免费下载。作者是好心银啊），解决了《编程的艺术》上一道难度系数为50的习题：自动化多维几何级数的求和。如果有封闭解，则自动找到该解。不然自动证明无解。这好比20年前Wolfman的Mathematica搞定自动积分，号称机器不能积的，人肉也不用想。又好比优化编译器生成人肉编译器们望尘莫及的全局优化代码。众多老大多年积累引为自豪的技巧转眼成为自娱自乐的玩具，价值可比1949年太祖登位前的法币。技巧贬值事小，附着于技巧上的汗水，骄傲，地位，以及掌控未来的安全感也烟消云散恐怕更有杀伤力。所以愤怒和抵制情绪就象巴普洛夫狗的唾液一样自然分泌。一将功成万骨枯。世界就这么残酷。工业革命萌芽时疯狂打砸自动纺织机器的英国纺织工人们想必早有体会。历史上喜剧也总在重演。我们至少已经看过机器语言高手们对汇编的鄙视，汇编语言高手们对C的不屑，C语言高手们对使用垃圾收集器的愤怒。靠，又扯远了。还是说回这本书。 关于科学和艺术的铿锵引言就是从这里来的：Science is what we understand well enough to explain to a computer. Art is everything else we do…. Science advances whenever an Art becomes a Science. And the state of the Art advances too, because people always leap into new territory once they have understood more about the old. 一本书和阅读代码很难想象钢琴家不用聆听大师的作品；诗人不用揣摩传世的经典；画家不用体会前辈的佳作；拳手不用参详高人的示范。那我们怎么能想象程序员不用仔细学习性感的代码？ IBM的Grady Booch也强力推荐程序员大量阅读代码，认为这是从新手到高手的必要手段。如果喜欢软件开发老大还没有订阅Grady Booch的博客的话，现在是时候了。G老大的私人项目Architecture Handbook想必更是每位对软件架构有兴趣的老大的必读材料吧？他在这本公开的手册将归类整理历史上各式架构。虽然这些工作开始还不到四年，但上面已经有不少高质量的资料。比如以前提到过的Eclipse架构考古 Archeology.ppt)。也许用G老大自己的话最能雄辩地道出软件考古的意义：经典科学通过在定量观察和理论构建间曼舞取得进展。前者细致而刻意，后者富于创新且能经受检验。计算机科学充满了经验的观察和理论的构造，但软件世界里，我们往往把所有时间用于搭建实物，却疏于科学研究。我们有自己关于流程和工具的理论，但它们大部分都基于坊间传闻和个人经验，而不是基于反映了可靠经验研究的确凿且中立的数据（classical science advances via the dance between quantitative observation and theoretical construction.” The former is deliberate and intentional; the latter is creative and testable. Computer science is full of empirical observation and the construction of theories, but in the world of software we often spend all of time building artifacts and not enough time doing science. We have our share of theories, about process and tools, but much of that work is based on anecdote and personal experience, not the hard, dispassionate data that reflects good empirical work） 计算机系不仅要交给学生知识，也要让学生领会“激情，美丽，快乐，和敬畏”，真是深得我心啊。在演讲里，G老大频繁用“正确和高尚”来描述计算机业界众人的努力，说从事软硬件研发的工作既是特权也是义务。它是特权，因为我们从根本上多方面深刻地改变这个世界。基于同样的原因，这也是我们的义务。我们应当牢记这点，并让我们的学生同样明白。不知道G老大和蜘蛛人有什么瓜葛。 计算机科学经典论文Jao的Programming Musing 看到的：Babar Kazar 整理了一堆经典论文。Jao强烈建议每个严肃的程序员读每篇论文，说它们都或多或少有意思。粗粗扫了一下，很多论文都没读过。挑了些俺多少知道一点的介绍。 [An axiomatic basis for computer programming](http://www.spatial.maine.edu/~worboys/processes/hoare axiomatic.pdf) C. A. R. HoareTony Hoare名下的公理化语义（Axiomatic Semantics）。 Communicating Sequential Processes (CSP) C. A. R. HoareHoare, 又见Hoare。 Call-by-name, call-by-value, and the lambda calculus Gordon Plotkin Towards a theory of type structure John C. Reynolds号称经典中的经典。 Structured Programming with go to Statements Donald E. Knuth Definitional interpreters for higher-order programming languages John C. Reynolds An APL Machine 1970 Philip S. Abrams The Anatomy of a Large-Scale Hypertextual Web Search Engine Sergey Brin and Lawrence Page No Silver Bullet: Essence and Accidents of Software Engineering Frederic P. Brooks, Jr. A Mathematical Theory of Communication Claude Shannon Bayesian Networks without TearsA Universal Algorithm for Sequential Data Compression A Relational Model of Data for Large Shared Data Banks 1970 Edgar F. Codd Let’s Build a Compiler 1988-1995 Gauging Similarity via N-Grams: Language-Independent Sorting… Marc Damashek Worse Is Better Richard P. Gabriel Hints on Programming Language Design C.A.R. Hoare Why Functional Programming Matters John Hughes On the Expressive Power of Programming Languages Matthias Felleisen The Early History Of Smalltalk Alan Kay Alan Kay评述Smalltalk的话：In computer terms, Smalltalk is a recursion on the notion of computer itself. Instead of dividing “computer stuff” into things each less strong than the whole–like data structures, procedures, and functions which are the usual paraphernalia of programming languages–each Smalltalk object is a recursion on the entire possibilities of the computer. Thus its semantics are a bit like having thousands and thousands of computer all hooked together by a very fast network. Questions of concrete representation can thus be postponed almost indefinitely because we are mainly concerned that the computers behave appropriately, and are interested in particular strategies only if the results are off or come back too slowly. Computer Programming as an Art Donald E. Knuth The next 700 programming languages Peter J. Landin Recursive Functions of Symbolic Expressions and their Computation by Machine (Part I) 1960 John McCarthy FORTH - A Language for Interactive Computing Charles H.Moore Teach Yourself Programming in Ten Years 2001 Peter Norvig The Definition and Implementation of a Computer Language based on constraints Guy Lewis Steele Jr. Growing a Language Guy Lewis Steele Jr. Epigrams on Programming Alan J. Perlis The Complexity of Theorem Proving Procedures Stephen A. Cook Steps Toward Artificial Intelligence Marvin Minsky The Original ‘Lambda Papers’ Guy Steele and Gerald Sussman The UNIX Time-Sharing System Dennis Ritchie and Ken Thompson Dreaming In Code by Scott Rosenberg作者把Chandler的开发历程，软件开发的历史，和软件开发的基础概念精巧地编织起来，只为探索一个问题：为什么软件开发那么困难？ 文字方面，作为多年文青，资深记者，Salon的主编，Scott Rosenberg的笔头没得说。三年漫长写作和Chandler项目的艰辛曲折并没有消磨Scott的激情。相反，书中文字蕴涵着他对软件开发的热爱，很有感染力。书里涉及大量技术概念，从OOP到Literate Programming到停机问题，作者都科普得浅显明白。看局外人怎么理解软件开发，也是颇有意思的事情。 其次是资料翔实。光靠Wikipedia和Google随意搜寻是绝对写不出这样一本书的。大量的采访，连续三年实地跟踪Chandler项目组开会讨论，几百篇参考资料，包括大量经典论文和访谈录，和作者细心的整理，方才构成这本书丰厚的肌理。 三当然就是八卦满天飞了，尤其是著名项目和大牛们的故事及观点。呵呵。非常符合俺这种八卦爱好者的口味。虽然绝大部分八卦俺都知道，但放在软件开发这个大题目下系统读一次感觉还是不同。Alan Kay, Don Knuth, Alan Turning, Charles Simoni, Bill Joy, Frederick P. Brooks, David Parnas, Peter Drucker, Gerald Winberg, Douglas Engelbart等等等等。颇有新的领悟外，也是享受。书里也有一些俺从未听说的八卦。比如这条：一位叫Robert Britcher的程序员写了本回忆录，The Limits of Software，记录了美国航空管理局(FAA)1981年上马的AAS（Advanced Automation System）项目的悲惨过程。用Scott的话说，就是“没有人—哪怕作者—可以全身而退（No one—including, plainly, the author—escape scar free）。项目高峰期，1500名IBM程序员为FAA工作，每天花掉政府100万美元。项目最终失败了，因为项目的要求超出了当时技术和人力的极限。巨大的压力给参与项目的程序员带来心理上的严重创伤。有人砸烂自己的汽车。有人疯掉（我靠！），有人自杀。有个项目经理开始吃纸上瘾。项目拖后得越多，他在开会时嘴里的塞的纸就越多（靠靠靠！）。当初我读Ellen Ullman的小说The Bug的时候还对文中主角在地下室自杀有点不解。看来那也不是女文青Ellen自己的想当然。 书里记述了OASF(开发Chandler的组织)犯下的大量错误。这些案例值得我们学习。我觉得比较出奇的是Chandler项目成员开始决定用P2P架构这种来共享日历。虽然用P2P共享个人信息时非常困难的问题，但他们居然不全力设计相关算法或协议，而是花大量时间去讨论Chandler的界面。这一拖就是几个月。最后P2P架构被彻底放弃。Damien以一人之力搞出了基于文档的分布式数据库。不知道如果OASF找到Damien，情况会不会有所改观。Joel Spolsky已经写了篇关于OASF错误的详尽评论。强烈推荐。我就不饶舌了。 书的背面有若干书评。第一条是The Atlantic的James Fallows写的，说Dreaming In Code可以和Tracy Kidder的《新机器的灵魂》（The Soul of a New Machine）媲美。Tracy Kidder的书是一代经典，写尽工程师的光荣与梦想。《新机器的灵魂》里电脑工程师为了做出新一代电脑同DEC的VAX竞争，破釜沉舟，灵魂冲突激荡。历经曲折后，项目终于成功。一时间彷佛东方有日出，喷薄欲破晓，好不酣畅淋漓。可惜，这种痛快的阅读感受在Dreaming In Code里体会不到。我想原因有二。一是Chandler是个失败（至少前途还不明朗）的项目。5年过去，几百万花掉，Chandler才到0.7版。当年的设计被一次又一次的更改。当年Mitche Kapor心目中的杀手特性被一个又一个地去掉。看到书的后半部分，俺甚至觉得有些郁闷。正因为这样，Dreaming In Code缺乏戏剧性。我们看不到有独特魅力的灵魂人物，比如《新》书里的Tom West，比如Show Stopper里的Dave Cutler。二是作者把Chandler的项目当作讨论软件开发为什么那么难的案例来写。这样做人物形象就显得比较单薄。书里很少描写Chandler项目组里的成员的心理和行为。我甚至不记得里面有谁曾经意气风发过。问题是，谁没有在设计自己心爱的软件时浑然忘我，神情激越过？这点更远远比不上《新》和Show Stopper。这两本书里的工程师有非常突出的个性。Dreaming In Code里看不到像Show Stopper里微软的愤青们鄙视IBM，决定中止同IBM OS/2团队合作的戏剧性场面的，看不到Jim Alchin早上五点钟跑到高尔夫球场与同事开会的疯狂场景，也看不到两个微软工程师决定到加勒比海边设计Windows NT的API，把他们的经理气得发疯，结果两人一周就搞定了1000多个API的初稿这样的传奇故事。甚至Mitch Kapor在Dreaming In Code里也像个好好先生。 阅读计划看是永远都看不完的，等什么时候看完也就熄了。 编程和编程语言: Java Generics and Collections。俺的偶像之一，Haskell背后的主要黑手，Philip Wadler的新作。俺这种庸俗追星族自然屁颠屁颠地来捧场了。 : Java Concurrency in Practice. 正在读这本书。Java 5 里java.util.concurrent主要作者的力作，不仅介绍java.util.concurrent的用法，更细述设计并发程序的理念和经验。Herb Sutterl老大2004年就吐血呐喊Free Lunch Is Over, All We Got Is Multi-core Dinner，俺现在读这本书只算是亡羊补牢。 : Javascript the definitive guide. 今年颇写了些RIA应用。感受是：我恨HTML+CSS，但我爱Javascript。而且现在看来RIA越来越火（没办法，Google, Gucci, Nike, 和众多的Web2.0公司把门槛提高了）。俺向来认为做技术如杀敌，斩草须除根。所以今年要好好梳理一下JavaScript。今年初草草读过这本书第三版。现在第5版要出来了。据说有很多新内容。Steve Yegge说他在Google的时候一个月把关于DHTML和CSS的书翻得快散架，当是俺效仿的榜样。 :Making Reliable Distributed Systems in the Presence of Software Errors. Erlang的作者Joel Armstrong的博士论文。既然要学并发编程，不能说只懂synchronization不是？Erlang的消息传递好歹也是江湖一大显赫门派。所以俺准备今年学Erlang。牛人Damien Katz强烈推荐从这篇论文开始，因为它解释了很多看似古怪的Erlan功能，而且阐述了Erlang的来龙去脉。考察一门技术的历史沿革总能让我们深刻理解这门技术。 ![img](https://p-blog.csdn.net/images/p_blog_csdn_net/g9yuayon/8ac9551c192548c2827f20e2ac743ef2.jpg): Concepts, Techniques, and Models of Computer Programming. 还没看，不过俺朋友和LtU都强烈推荐。号称需要一读再读的经典。今年就补上这一课算了。 Code Complete, 2nd ed. 大三时细读了第一版，至今受益。去年借来第二版，可耻地只翻了几页。今年纯还债。 设计和架构：The Toyota Product Development System. 丰田的Lean Development模式开始慢慢影响到软件开发。据说丰田的开发方法里颇有些看似违反常理的东西，让人非常好奇。 ：Framework Design Guidelines. 据说书的前身是微软的内部开发文档。好奇微软是怎么设计框架的。 项目管理：Software Estimation: Demystifying the Black Art (Best Practices (Microsoft)). Steve McConnell的新作。我的弱点之一就是不能准确地估计项目的开销。很想知道喜好CMM/COCOMO这类重口味的Steve怎么解决这个问题。 ： The Art of Project Management。 Scott Berkun的博客已经精彩纷呈。这本书放在我的wish list好久了。今年也该读了。 : Behind Closed Doors: Secrets of Great Management。好评如潮的书。也是放在我的wish list里N久了。纯清除债务。 : First, Break All the Rules. 健身房/洗衣房专用书。蹬自行车时看的。已经读了3/4了。学到不少东西。 写作: On Writing Well. 谈写作的经典小册子。其实我更想向冯唐那么牛，写出动人的文字。可惜跑到当当上搜了半天，都没发现一本看上去不错的写作书。什么SAT写作，GMAT写作这类垃圾书倒一大堆。 计算机科学：MMIXWare。Knuth的书。买了好几年了。一直说写一个MMIXWare的虚拟机一直没动手。鄙视自己很久了。想到一个传说。Steve Jobs邀请Knuth给苹果公司的工程师讲课。听说Knuth到了，Jobs赶快迎出办公室。同Knuth握手后说：Knuth教授，真荣幸见到你。我读过你的所有作品。Knuth答道：Steve, you’re full of shit。 :Verification of Reactive Systems。写论文用。买了快两年了，才读了两章。做人还是比较失败。 ：How to Solve It： Modern Heuristics。看了三章了。 Never Stop LearningSteve Yegge的新文章。 现在笔头好又肯耐心写文章的技术博客作者其实不多。Paul Graham和Steve Yegge是其中的佼佼者。新文章里这句话可作俺们程序员的座右铭：Every program you write should be the hardest you’ve ever written （你写的每个程序都应是你曾写过的最难的程序）。 注意力从Keria Serria的博客看到的好文章。非凡的注意力 造就专家，智力起的作用其实不大。偏偏现在干扰越来越多。而且真正的干扰源自我们的内心。频繁地查信，随时随地地QQ/MSN，阅读无穷无尽的blog。。。到底怎么办呢？仔细读Kerria的帖子吧。 programmingreddit论坛大量文章都值得收藏。更重要的是，上面好多文章并非热门应景帖子，靠自己根本不能发现。其实这也是reddit这类所谓web2.0网站吸引用户的原因：现在的网络实在太庞大了。搜索引擎已经不能解决我们的问题，因为我们往往并不知道自己需要搜索什么。有时候，我们更需要一个“发现”引擎，根据我们的喜好帮我们发现合适的资料，推荐给我们。当然，reddit.com不算现在流行的推荐系统（比如findory.com那样的），但他利用大众的智慧，的确推荐了无数高质量文章。而且推荐的文章不局限于任何一门语言，技术，框架，平台。有讨论编程技巧的，有介绍牛人的， 有讨论技术趋势的，有谈理论的，有谈项目管理的，有谈历史八卦（谁知道.NET的CLR是怎么诞生的？谁知道CLR的GC原型是Common Lisp写的？）的，有介绍书籍的，有介绍工具的，有介绍语言的。。。不一而足。而且有浅显得博客帖子，也有深入的经典。 形式化方法在CS研究中的重要性。一旦抵触情绪消失，注意力就集中了，那些符号也没那么难懂了。 Danny Hillis有篇极为动人的文章，讲述费因曼在Connection Machine Inc时的传奇故事。文章里提到费因曼把每个问题当成一个游戏，总是从“给我一个最简单的例子”这样的问题入手，一直到把一个大问题简化成一系列他能解决的小问题为止。我套用了一下，效果还不错。另外就是把注意力集中在公式的直观意义，尤其是同数据流图的对应关系上。很多复杂公式一下就清晰了。这个手段其实从学数学就开始用。也许本科前的数学本来就直观， 挑战不是别人给的，而是在勃勃雄心驱使下，你自己找的。也许以后做每个项目时，我们应该给自己找点有挑战性的问题，激发自己的潜力。不然做的项目再多，也不过浪费人生。 商业软件编程三篇博客帖子详解 一篇是Thoughtworks前员工Ravi Mohan写的，《但是马老大，商业编程就是无聊》。 第二篇帖子是Reg Braithwaite的一篇帖子，《商业编程没有那么难？》。＊ 第三篇帖子是XML发明人Tim Bray的一篇短文。在Tim的努力下，JRuby的两个主程加入了Sun。 注意力比较集中随着年岁增长，要学的东西只多不少。书桌上的论文摞得越来越高，买而未读的书越来越多，没做的项目列表越来越长。怎么办呢？也许该去看心理医生了。 提高效率的最简单的方法就是，增加兴趣。 学生应该做好一件事ThoughtWorks的Chad Fowler面试Java程序员时，让应试人给自己的的Java功底按1到10打分。如果面试人打分在9以上，Chad Fowler就会问“你能不能谈谈怎么让JVM当掉”。原因很简单，打分在9以上，面试人显然是个Java专家，那自然得展示点Java专家的道行。好比马戏团招杂耍演员。一个候选人说，我会同时抛5个球，一边抛一边还可以空翻360度攀爬红绿灯追公车（朋友语）。面试官难道当场录用这个候选人？当然不。是骡子是马，得拉出来溜溜。你状态不好，抛不了5个球，总可以表演一下抛三个吧？不能空翻360度，转个圈儿总行吧？面试前没有翻书复习，记不清OBDD怎么实现，说说怎么用Hash总可以吧？ 自称“了解数据库”，却答不上基本的数据库问题，面试官当然怀疑你的能力，甚至你的诚正。自称酷爱编程，却连二分查找都写不出来，那不是搞笑么？自称聪明伶俐，你的专业课却门门挂红，不是很讽刺么？什么，老师教得太差？课程太枯燥？也就是说，你告诉我因为该做的事情不合心意，你就乱来？问问自己，这样的人公司敢要么？我就不用评论有的人把高数，线代，计算理论什么的都通通归于没有意义的课程了吧？当然，我们不排除有编程高手不能兼顾学业。没关系，那展示一下你的编程成果啊。如果Linux kenerl里有你的patch，我可以相信你的操作系统课不及格事出有因。如果你有自己的3D游戏（一个ray tracer也中），我可以对你线性代数挂红视而不见。但如果你成绩一塌糊涂，也没有拿得出手的软件作品，面试官怎么能相信你是一个聪明可靠，勤勉好学的人才，怎么能得出你四年来没有虚度的结论？不排除有人大器晚成，但对不起，大器晚成的风险属于不可控型，我们只能祝你好运。 其实就是菜，动力很小，借口很多。 开发工具 Build工具 测试工具 网页自动测试 性能测试 覆盖测试 测试环境 静态代码分析 排版工具 JSP开发 数据库 版本控制 CASE 程序员嘛，就应该琢磨怎么提高自己的效率。 被玩儿一次，别人可耻；被玩儿两次，自己该死（fool me once, shame on you; fool me twice, shame on me)。 学生建议www.joelonsoftware.com上的精妙杂文。还好，网上总有热情洋溢的自愿者。这不，Joel的一篇精妙文章被翻译成中文了。强烈推荐一把：http://chinese.joelonsoftware.com/Articles/AdviceforComputerScienceC.html 毕业前学会写作 毕业前学会C语言 毕业前学习微观经学（microeconomics） 要因为某些非计算机课程枯燥无趣就敬而远之 学习有大量编程实践的课程 不要担心工作都跑到印度去了 好好做夏季毕业实习 Linus精通写作，他知道如何准确地在email和邮件讨论组中使用书面英语表达自己的思想，所以他能够从全世界召集大量志愿者为Linux工作。你听说过最近风靡全世界的极限编程（Extreme Programming）吗？ 即使你不懂什么是极限编程，你至少听说过这个词。为什么？因为宣传极限编程的人都是天才的作者和演说家。就看看你身边的那些小型的软件开发组织吧，最有权力和影响力的人是那些可以用自信，准确，舒适的英语交流的人。好吧，我承认这些人也许言过其实，但是你无可奈何。 一个合格的程序员和一个伟大的程序员的区别不在于知道多少种编程语言，不在于他们是喜欢Python或者Java，而是在于他们是否擅长表达。他们能够说服，所以他们获得权力。他们能够写清楚明白的评论和接口文档，所以他们使得别人不用重写，而可以重用他们的代码，否则他们的代码就是毫无用处的。他们也能够写出清晰的用户手册，于是最终用户可以理解他们的代码是做什么用的，明白了他们的工作的价值。sourceforge埋葬着许多精美的代码，这些已死的代码无人使用，因为代码的作者很少写（或者根本不写）用户手册。 我不会雇佣一个不懂写作的程序员。如果你擅长写，你就很容易找到工作，紧接着你就会被要求写技术规格文档，这意味着你已经被管理层注意到了。大学里有一些课程，要求你做很多的写作练习，不要犹豫，赶快参加这些课程。不要错过任何要求你每周或者每天练习写作的课程。给自己建立一个网络日志（weblog）。在上面写的越多，你会写地越容易。写地越容易，你就写地越多，这是一个正向地循环激励。 握各种编程语言的程序员事实上用C来交流（lingua franca）；更重要的是，C比某些“现代”语言更接近机器语言。我不管现在大学里在教什么流行的垃圾语言（trendy junk），你至少得花一个学期接近机器。否则，你不可能使用高级语言写出高效的代码。这意味这你不会有机会写编译器或者操作系统，也许这是更好的编程工作；别人不会相信你能够为大项目设计架构。无论你知道多少高级的控制结构，知道如何进行错误处理，如果你不能解释为什么**while （*s++ = *t++）;**的意思是进行字符串拷贝（而且对你而言这是世界上最自然，最易懂的代码），那么你就是在对编程一窍不通的状态下编程（programming based on superstition）。 无论如何请学习微观经济学，因为你需要知道什么是“供给和需求”，什么是竞争优势，什么是净现值（NPVs，Net Present Value，指项目经济寿命期内现金流入总和与现金流出总和之差额），什么是折扣和边际效用（discounting and marginal utility），如果你真想了解商业是如何运作的话。为什么计算机系的学生要学习经济学？因为理解商业基本规律的程序员对商业界来说是宝贵的程序员。我记得无数个程序员使我非常沮丧，因为他们在代码中坚持某些疯狂的设计，这些设计从技术上来说，完美；从资本主义的角度来看，发疯。如果你是一个理解商业的程序员，商业会给你回报。这就是你要学习经济学的原因。 程序员职业规划：让自己重要 调研 投资 营销 执行 单纯的编程已经不够了。了解业务逻辑，了解管理流程，能把自己的技术和商务结合起来，解决实际的问题，才大有作为。作者建议我们有空读行业杂志，和做业务的同事多交流。 Pragmatic Programmer的另一个作者Dave的**How To Keep Your Job**是必读材料，非常有启发性。 转行的原因不过是发现自己坐在电脑前的时间远远超过了坐在课本前的时间。而且我没有耐性。看到本科花大力气学的东西，不过是为研究生阶段的学习做准备，就沮丧得不行。相比之下，搞计算机就舒服多了。每学一点东西，都可以马上试验，把玩，投入实用。现在想来，我也算幸运。 学习理论的实用意义 学习理论能拓展我们总结一般规律的能力。 学习理论能训练我们洞察不同事物间联系的能力。 学习理论让我们能迅速掌握计算机的前沿动态。 没有一定的理论知识，还真看不懂，更不用说和论文的作者讨论了。别告诉我看论文不重要。要开发出别人开发不出的软件，光看Dr. Dobb’s Journal 是远远不够的。 学习理论能训练我们对直观想法的表述能力。形式化方法要求我们把直观的描述转换成严格的数学描述，或者把一种形式的语言转换为另一种形式的语言。有时一个想法的直观意义明显，但它的形式化描述却不容易。比如说，把非正则的语言{aibi |i &gt; 0} 用Monadic Second Order Logic 表示为∃X ( X(min) ∧∀y∀z (S(y,z) =&gt; (X(y) &lt;=&gt; !X(z))) ∧ !X(max))。与此类似，编程语言也是一种形式化的语言（最主要的特征：没有二义性，和严格受限的语素）。我们编程时也面临把心中想法转换成一行行程序的问题。至少对我来说，学习理论扩展了我对形式化语言的驾驭能力，让我相对轻松地把复杂的想法转化成精简的数学或算法语言描述。 程序员的效率Steve McConnell的博客帖子。详述了程序员产率相差10倍的来历。插草标 卖身推荐。引用一段：80年代中期，波音上了一坨重要项目。80枚程序员参与其中。项目不顺利，眼看要错过一坨不容错过的最后期限。为了保证该项目成功，波音调走了这80枚老大，请来一个人。于是这枚老大以一人之力，按时按量交割项目。 Eric在他的blog里也提到他曾犯的类似错误，磨刀不误砍柴功。项目刚开始的时候，无数的书都说了有复杂关系的数据存取用EntityBean不错，但我居然没仔细想过别人为什么那样坚持，也没有深入调查，全忘了古训：事豫则立，不豫则废。 编程高手目前来看都是不可超越的大山 编程高手 (1) – Bill JoyBill Joy, 前任Sun的首席科学家，当年在Berkeley时主持开发了最早版本的BSD。他还是vi和csh的作者。当然，Csh Programming Considered Harmful 是另一个话题乐。据说他想看看自己能不能写个操作系统，就在三天里写了个自己的Unix, 也就是BSD的前身。当然是传说了，但足见他的功力。另一个传说是，1980年初的时候，DARPA让BBN在Berkley Unix里加上BBN开发的TCP/IP代码。但当时还是研究生的B伯伯怒了，拒绝把BBN TCP/IP加入BSD，因为他觉得BBN的TCP/IP写得不好。于是B伯伯出手了，端的是一箭封喉，很快就写出了高性能的伯克利版TCP/IP。当时BBN和DARPA签了巨额合同开发TCP/IP Stack，谁知他们的代码还不如一个研究生的好。于是他们开会。只见当时B伯伯穿个T-shirt出现在会议室(当时穿T-shirt不象现在，还是相当散漫的哈)。只见BBN问：你怎么写出来的？而B伯伯答：简单，你读协议，然后编程就行了。最令偶晕倒的是，B伯伯硕士毕业 后决定到工业界发展，于是就到了当时只有一间办公室的Sun, 然后他就把Sparc设计出 来乐。。。象这种软硬通吃的牛人，想不佩服都不行的说。据Bill Joy的同事说，一般开会的时候B伯伯总是拿一堆杂志漫不经心地读。但往往在关键之处，B伯伯发言，直切要害，提出 漂亮的构想，让同事们彻底崩溃。对了，他还是Java Spec和JINI的主要作者之一。 编程高手 (2) – John CarmackJohn Carmack，id Software的founder和Lead Programmer。上个月和一个搞图形的师兄聊天，他竟然不知道John Carmack, 也让偶大大地晕了一把。不过也许搞研究的和搞实战的多少有些隔吧。想必喜欢第一人称射击游戏的都知道J哥哥。90年代初只要能在PC上搞个小动画都能让人惊叹一番的时候，J哥哥就推出了石破天惊的Castle Wolfstein, 然后再接再励，doom, doomII, Quake…每次都把3-D技术推到极致。J哥哥的简历上说自己的专长是”Exhaust 3-D technology”，真是牛人之言不我欺的说。做J哥哥这样的人是很幸福的，因为各大图形卡厂家一有了新产品就要向他“进贡” ，不然如果他的游戏不支持哪种卡，哪种卡基本就会夭折乐。当初MS的Direct3D也得听取 他的意见，修改了不少API。当然，J哥哥在结婚前十数年如一日地每天编程14小时以上， 也是偶们凡人望尘莫及的。对了，J哥哥高中肆业(？)，可以说是自学成才。不过呢，谁要用这个例子来为自己学习不好辩护，就大错特错了。那Leonardo Da Vinci还是自学成才呢(人是私生子，不能上学)。普通人和天才还是有区别的。对了，其实偶们叫“达分奇”是相当不对的，因为Vinci是地名，而Da Vinci就是从Vinci来的人的意思。换句话说，Leonardo Da Vinci就是“从Vinci来的Leonardo”的意思。叫别人“Da Vinci”就不知所谓乐。嗯，扯远了，打住。 编程高手 (3) – David CutlerDavid Cutler，VMS和Windows NT的首席设计师，去微软前号称硅谷最牛的kernel开发员。当初他和他的手下在微软一周内把一个具备基本功能的bootable kernel写出来，然后说：“who can’t write an OS in a week?”，也是牛气冲天的说。顺便说一句，D爷爷到NT3.5时，管理1500名开发员，自己还兼做设计和编程，不改coder本色啊。 D爷爷天生脾气火爆，和人争论时喜欢双手猛击桌子以壮声势。:-) 日常交谈F-word不离口。他面试秘书时必问：”what do you think of the word ‘fuck’?” ，让无数美女刹羽而归。终于有一天，一个同样火爆的女面对这个问题脱口而出：”That’s my favorite word”。于是她被录取乐，为D爷爷工作到NT3.5发布。 编程高手 (4) – Donald E. KnuthDon Knuth。高爷爷其实用不着偶多说。学编程的不知道他就好像学物理的不知道牛顿，学数学的不知道欧拉，学音乐的不知道莫扎特，学Delphi的不知到Anders Hejlsberg，或者学Linux不知道Linus Torvalds一样，不可原谅啊。:-)为了让文章完整，就再罗唆几句吧。高爷爷本科时就开始给行行色色的公司写各种稀奇古怪的编译器挣外快了。他卖给别人时收一两千美元，那些公司拿了code，加工一下卖出去就是上万上十万。不过也没见高爷爷不爽过，学者本色的说。想想那可是60年代初啊，高爷爷写编译器写多了，顺带就搞出了个Attribute Grammar和LR(k)，大大地造福后人啊。至于高爷爷在CalTech的编程比赛(有Alan Kay得众多高高手参加)总是第一，写的Tex到86年就code freeze，还附带2^n美分奖励等等都是耳熟能详的，偶就不饶舌乐。 顺便说一下，高老大爷是无可争议的写作高手。他给Concrete Mathematics写的前言可谓字字铿锵，堪为前言的典范。他的技术文章也是一绝，文风细致，解释精当，而且没有学究气，不失轻快跳脱。记得几年前读Concrete Mathematics，时不时开怀大笑，让老妈极其郁闷，觉得我nerdy到家，不可救药。其实呢，子非鱼，安知鱼之乐，更不知那完全是高爷爷的功劳。说到写作高手，不能不提Stephen A. Cook。他的文章当年就被我们的写作老师极力推荐，号称典雅文风的样本。库爷爷一头银发，身材颀长，总是面带谦和的微笑，颇有仙风道骨，正好和他的仙文相配的说。 高爷爷其实还是开源运动的先驱。虽然他没有象Richard Stallman那样八方奔走，但他捐献了好多作品，都可以在网上看到，比如著名的Mathematical Writing，MMIXWare，The Tex Book等，更不用说足以让他流芳百世的Tex乐。 编程高手 (5) – Ken ThompsonKen Thompson，C语言前身B语言的作者，Unix的发明人之一(另一个是Dennis M. Riche老大，被尊为DMR)，Belle(一个厉害的国际象棋程序)的作者之一, 操作系统Plan 9的主要作者(另一个是大牛人Rob Pike, 前不久被google挖走了)。Ken爷爷也算是计算机历史上开天辟地的人物了。1969年还是计算机史前时代，普通人都认为只有大型机才能运行通用的操作系统，小型机只有高山仰止的份儿。至于用高级语言来写操作系统，更是笑谈。Ken爷爷自然不是池中物，于是他和DMR怒了，在1969年到1970间用汇编在PDP-7上写出了UNIX的第一个版本。他们并不知道，一场轰轰烈烈的UNIX传奇由此拉开了序幕。Ken爷爷在1971年又把Unix用C重写，于是C在随后20年成就了不知多少豪杰的梦想和光荣。 Ken爷爷还有段佳话： 装了UNIX的PDP-11最早被安装在Bell Lab里供大家日常使用。很快大家就发现Ken爷爷总能进入他们的帐户，获得最高权限。Bell Lab里的科学家都心比天高，当然被搞得郁闷无比。于是有高手怒了，跳出来分析了UNIX代码，找到后门，修改代码，然后重新编译了整个UNIX。就在大家都以为“这个世界清净了”的时候，他们发现Ken爷爷还是轻而易举地拿到他们的帐户权限，百思不解后，只好继续郁闷。谁知道这一郁闷，就郁闷了14年，直到Ken爷爷道出个中缘由。原来，代码里的确有后门，但后门不在Unix代码里，而在编译Unix代码的C编译器里。每次C编译器编译UNIX的代码，就自动生成后门代码。而整个Bell Lab的人，都是用Ken爷爷的C编译器。 编程高手 (6) – Rob PikeRob Pike, AT&amp;T Bell Lab前Member of Technical Staff ，现在google研究操作系统。罗伯伯是Unix的先驱，是贝尔实验室最早和Ken Thompson以及Dennis M. Ritche开发Unix的猛人，UTF-8的设计人。他还在美国名嘴David Letterman的晚间节目上露了一小脸，一脸憨厚地帮一胖子吹牛搞怪。让偶佩服不已的是，罗伯伯还是1980年奥运会射箭的银牌得主。他也是个颇为厉害的业余天文学家，设计的珈玛射线望远镜差点被NASA用在航天飞机上。他还是两本经典，The Unix Programming Environment 和 The Practice of Programming 的作者之一。如果初学者想在编程方面精益求精，实在该好好读读这两本书。它们都有中文版的说。罗伯伯还写出了Unix下第一个基于位图的窗口系统，并且是著名的blit 终端的作者。当然了，罗伯伯还是号称锐意革新的操作系统，Plan9，的主要作者。可惜的是，Plan9并没有引起多少人的注意。罗伯伯一怒之下，写出了振聋发聩的雄文 Systems Software Research is Irrelevant，痛斥当下系统开发不思进取，固步自封的弊病。虽然这篇文章是罗伯伯含忿出手，颇有偏激之词，但确实道出了系统开发的无奈：开发周期越来越长，代价越来越大，用户被统一到少数几个系统上，结果越来越多的活动是测量和修补，而真正的革新越来越少。 就在罗伯伯郁闷之极的时候，google登门求贤来乐。如果说现在还有一家大众公司在不遗余力地把系统开发推向极致的话，也就是google乐。随便看看google的成果就知道了。具有超强容错和负载平衡能力的分布式文件系统GFS (现在能够用100,000台廉价PC搭起一个巨型分布系统，并且高效便宜地进行管理的系统也不多哈)，大规模机器学习系统(拼写检查，广告匹配，拼音搜寻。。。哪个都很牛的说)，更不用说处理海量并行计算的各式google服务了。Rob在System Software Research is Irrelevant里萧瑟地说现在没有人再关心系统研究的前沿成果了。想不到他错了，因为google关心。google网络了大批功成名就的牛人，还有大量初生牛犊般博士做开发，显然不是没事耍酷，而是因为它们的开发总是试图吸取系统研究的最新成果。想必Rob Pike在google很幸福。愿他做出更棒的系统。 编程高手 (7) – Dennis M. Ritchie既然Ken Thompson是我的偶像，新闻组上人称DMR的Dennis M. Ritchie自然也是，毕竟两人共同缔造了UNIX，而Dennis几乎独力把C搞大(当然，C的前身是B，而B是Ken Thompson一手做出来的)。J 两人1983年分享图灵奖，是有史以来少数几个因工程项目得奖的工程师(本来是唯一的一对儿，但Alan Kay才因为SmallTalk得奖，所以就成了唯二的乐) 。一个人一生能做出一个卓越的系统已经不易，DMR的C和UNIX长盛不衰近30年，至今生机勃勃，DMR此生可以无憾的说。 编程高手 (8) – Edsger Wybe Dijkstra戴爷爷大概因为最短路径算法一战成名，于是有人请他参加另一台计算机X1的设计工作，并且把设计实时中断系统的任务派给了他。现在看来实时中断也许不算什么，但要知到，X1前根本就没有实时中断的概念。实现它简直就是一场豪赌。戴爷爷起初还不情愿，但经不住项目负责人Bram和Carel的轮番“吹捧”：我们知道实时中断让您工作变得非常困难，但象您这样的牛人肯定能做出来的说。结果戴爷爷被糖衣炮弹彻底击穿，接下了这个烫手山芋。两三年后，他不仅搞出了实时中断，还围绕这个写出了自己的博士论文，顺利戴上博士帽。 心目中的编程高手 (9) – Anders HejlsbergAnders Hejlsberg，微软.NET的首席架构师，编程语言设计和实现的顶尖高手。他一手做出了Turbo Pascal, 也是Delphi, J++(尤其是WFC)，C#, 和.NET的主要作者。这些作品的名字足以为他立传。作为一个程序员，我在这样的大师面前实在无语。生子当如Anders的说。李维的&lt;Borland传奇&gt;里已详细讲述了Anders的传奇故事，我就不用费舌了：&lt;Borland传奇&gt; 。 Artima上有Anders谈C#的系列访谈 。MSDN上有一段Anders导游的录像 。有兴趣可以去看看牛人的丰采。","categories":[{"name":"People that affect me","slug":"People-that-affect-me","permalink":"http://muxueweiyu.github.io/categories/People-that-affect-me/"}],"tags":[{"name":"affect","slug":"affect","permalink":"http://muxueweiyu.github.io/tags/affect/"},{"name":"people","slug":"people","permalink":"http://muxueweiyu.github.io/tags/people/"}]},{"title":"Random-Thoughts","slug":"Random Thoughts/2019/2019-01","date":"2019-01-01T03:48:15.000Z","updated":"2021-03-30T14:11:14.285Z","comments":true,"path":"2019/01/01/Random Thoughts/2019/2019-01/","link":"","permalink":"http://muxueweiyu.github.io/2019/01/01/Random%20Thoughts/2019/2019-01/","excerpt":"这个世界需要英雄, 知道今日事未毕,自然晚睡. 不知明日事何去,自然晚起。","text":"这个世界需要英雄, 知道今日事未毕,自然晚睡. 不知明日事何去,自然晚起。 1date: 2019-01-01 新生你最好从c（pure pp）java（pure oop）haskell（pure fp）这三个语言同时入手，一起学，而不是局限于某一个paradigm，最理想的是把lisp也给搞一下，这四门语言几乎构成了后续所有语言的基础，这四门语言相差甚大，互相之间几乎是正交的，就不存在一个语言能替代另外一个语言的情况，因为写的时候思路是完全不一样的（虽然不是完全不可能，但是你用c的思路去写java或者用java的思路去写haskell，蛋疼异常，可以试试） 大多数所谓的业务，都没有太过于复杂的算法，大多数目前所谓的业务，都是crud，你会发现，这些业务，都没有太复杂的数学在里面，业务部门给你的需求，基本上都能用小学甚至初中的数学表达出来，比如把这个数据放到那边去，把那个数据从那边搬运到这边来，把这个界面给变得红一点等等，为什么会这样？ 因为现阶段光是伺候这些需求，都已经耗费了编程师们大部分时间了，你嘴巴上说把一个数据从这里搬运到那边去，说起来简单，但其实因为类型的不一致，会有大量对字段等很傻逼的工作要去做，当然我们可以简化，但是这里面会有不少问题，不同系统之间的数据搬运甚至产生了两个单独的专业，ee的通信和cs的网络工程，就光解决这些数据搬运问题，都有专门的专业来做这事，你就能想出来这里面有多少门道了，当然最理想的状态就是我们写一行代码，机器就按照我们想的方式执行了，但是这不现实，因为现在生产力还没有发展到这个阶段，我们还是需要人去伺候一下机器 底层需要的人会越来越少，不是不需要，只是随着封装程度的加强，需要的人越来越少，但是应用层需要的人会越来越多，就像以前开发游戏机上的游戏，任天堂时候，你需要懂点电子元件你才能开发，还记得任天堂游戏机最早的载体是卡带嘛？后来就变成光盘了，那你不懂电子其实也没啥关系，再后来变成unity那种了，你不造引擎的话，你完全可以选择高层语言来实现 对于多数人来说，java甚至python等脚本够用了，我们也发现了，java学得好的人，c很快，相反，如果不会java，只会c的人，往往是上个世纪的毕业生 如果一个人又会java又会c，优秀，可以寄希望于他能贡献openjdk这些开源，可担大任 如果只会java，那这个人可用，技术可用，有发展前景，能满足业务需要，毕业生有这个起点很好 但是一个人如果不会java，那c再好也没啥用，这个人技术多半已经落伍了，对于工业界真正的发展，几乎没有什么概念，多半在闭门造车。 上个世纪的毕业生，很多只会c，拒绝甚至仇视使用java，为什么？因为它需要学习oop的那些理论，它不理解的时候就会愤怒，把自己的无能归咎于社会对他的不公平，我只会c，你凭什么要求我会java，我不会，社会不公平……一些极端的结果就是去跳楼了，了解掉自己的生命，所以技术如果不能适应时代，那结果往往是比较恐怖的，尤其是国内的基本福利还没有充分建立起来的前提下 但这种极端做法于事无补，你应该适应社会，而不是让社会适应你，同样道理，你会发现很多只会spring的java开发，对于fp等毫无概念，让他们学习也往往面临着比较大的阻力，反复论证了前面说的，人是习惯动物，所以你的老师做法有他的道理，就是保底，你会java，至少保证你有了oop的思维方式，至少能满足社会的需要，成为一个对社会有用的人，然后再来谈发展，可能你对于数学的悟性比较高，就可以搞fp语言，可能你对底层比较感兴趣，那可以贡献一下openjdk等等 满足社会需要，把你自己养活了之后，再考虑其他的 oop 重要过 fp 重要过 pp java 重要过 haskell 重要过 c，lisp可学可不学 三种都会最好 如果三选一，选java（oop） 如果三选二，选java和haskell（oop和fp）//scala微笑着点点头。 社会需要你会java，你就先把java搞定，然后再谈其他的，其他的也是未来优先于过去，fp重要过pp，因为未来更有发展，你选fp的话，就是发文章你也有的写，pp关联的东西，都被人搞烂了，发文章的难度要大得多，你更容易成为炮灰 最后说一下什么时候需要投入c，这个是总理需要操的心，需要政府扶持了，一般是政府扶持下，大企业投入，如果党政军都不支持的话，那光靠情怀这事也很难，毕竟人家做了那么多年了，所以说什么os，芯片这些，还是要看政府的支持力度 其实很多行业都一样，比如基础建设，都是如此，政府如果不扶持高铁，航空航天，民营企业家去搞这些？不可能的事。 oop的话，企业主导，企业自身就有大量的需求 fp的话，大学主导，现在研究机构都在搞人工智能研究 pp的话，政府主导，政府需要考虑摆脱对国外的技术依赖和封锁 1date: 2019-01-11 这么多年来，无论国内国外，为找工作学java的，就没遇到过后悔的 use it or lose it 计算机只是工具而已, 如果真感兴趣,学就是了,学完用就是了,没有多高级的,去大学里面上几门课就会了, cs 不用转,感兴趣的话,跟英语是一样的技能; 不需要花多少时间.学完Java ,各种东西就可以开始做了,甚至在学习的过程中,就已经开始做各种软件了,学就是,学完用工具这种东西,use it or lose it 大多数程序员并没有在创造世界,很多人连新技术都不敢使用,连升级都不敢升级,还创造什么世界. 为了生存在翔山上继续铲翔而已. 真创造世界，应该有独立自主的意识，就我要做这事，我要按照我的想法去塑造这个软件，这种叫做创造世界，但是大多数程序员并没有这个权力，他们只是在产品等业务方的要求下，去完成一个任务以换取报酬，从这一点上说，比起程序员，产品更有资格说他们在创造世界，因为被创造的软件世界是按照他们的想法去塑造的 都tm0202年了, 技术人员应该尽可能多的解决问题,而不是把自己能做的事情局限在一个小范围内,如果有一天,自己给自己画的边界被人破坏了呢? 如果满大街都是各种全栈,桌面能做的,移动能做,云端也能做的年轻人的时候,我只会后端,前途堪忧啊 绝大部分程序员并不具备这种能力 以前的会计,律师,它们都有事务所,很容易就做到合伙人了,但程序员不是,程序员反而更接近流水线的工人,只懂自己那一小块,对整个流程并不了解,我们认为一般程序员,应该你让他做啥,他都能做,写个游戏,写个网站,使用云计算,写个手机app这种才对嘛；这种才符合我们对于一个程序员的认知 感觉遇到的很少，它们很多人也都没有这个意愿去承担责任， 这个有点危险，资本吃人不吐骨头；四大的家伙从来不认为自己能在四大里面呆一辈子； 意识到了根本不可能在公司里面混一辈子 自己如何搞；我们必须真全栈；像会计师，律师那样去写代码，去主动承担责任；我们是编程师；不是程序员 不以流水线为目的，提升编程师单兵作战能力； 这是设计问题，做到独立开发者. 1date: 2019-01-16 软件开发的核心就是：技术+艺术 -&gt; 软件产品，渠道都建好了 程序员不要每天埋头码,抬头看看码的意义何在,知识是我们的工具你要用工具来武装自己,然后最重要的是,要用工具来产生结果,否则再好的工具,也就是个摆设 微服务框架 进化架构 新的编程语言 干净代码，设计模式，DDD 最小二乘 精益生产原则 Hystrix 容错模式 码头工人 持续交付 角度的 Web，HTTP和REST 编程语言是不同的，但是设计气味是相同的。 框架是不同的，但是相同的设计模式也可以照耀。 开发人员不同，但是与人打交道的规则是统一的。 实用程序员 清洁代码 清洁编码器 域驱动设计 不断增长的面向对象软件，以测试为指导 持续交付 编程师要真的成为一个职业，最重要的还是全栈化，而不是流水线化,一旦有什么东西一个人搞不定，比如前端不会后端，不会数据库，后端不会移动开发,那出产品就需要找别人一起做，那人一多就需要大量的沟通.那想不来坐班，嗯，估计是不可能的，在家里没法沟通 经验就是,学的越多,学得越快.自己需要思考和规划问题 1date: 2019-01-21 多写文档少些注释 文档：是和代码相分离的，文档通常包括主要的业务逻辑、系统架构、配置、名词解释、核心类使用说明等这些宏观性的东西。 注释：直接写在代码中的，通常都是变量赋值分支循环之类微观的介绍说明。 文档能够帮助一个新人尽快的了解项目的整体情况。而且这些东西通常是比较恒定的，变化较少的。写和读都没啥大毛病。 但是注释，滥用的话，问题很多代码质量不够，注释来凑，注释和代码不一致，最坑爹的是因为改动，一开始注释和代码通常都是一致的，但是经不住改啊。太多项目，改来改去就改了代码忘了注释，一旦代码和注释不同步，后面的同学：你觉得是注释错了呢，还是代码错了？¯_(ツ)_/¯ 高估了你们的汉语/英语表达能力，写的注释还没有代码好理解哈哈。 1date: 2019-01-30 神逻辑 实验做的不好就不吃饭了。(人是铁饭是钢) 以为理论水平高，实验水平就高。(二者至少在前期没有特别明显的相关性) 自以为理论水平高，理论水平就高。(跨一个领域就吃瘪) 以为只要实验做的好一切都会好。(家人好吗？和老板关系好吗？和同学关系好吗？赚钱吗？有对象吗？总有不如意的地方。) 觉得自己是名校毕业生，就一定比双非学生做的好。(前期没区别，后期好像也没什么区别) 觉得文章发的多的PI水平就高。(可能他们更适合学“术”，而不是“学”术) 存在某种迷之鄙视链。如全合成和方法学的人互相鄙视，做化学生物学的和做化学的互相鄙视。(都是小白鼠，应该抱团取暖而不是互相砸饭碗) 摆不正自己学生的位置，觉得自己是博士(候选人)很厉害。(学生就是学生，别掺和的事情太多了。但是那些真正为大家谋福祉的人，请尊重他们做的一切) 对某些事情过于热情。比如第一次学过柱子就喜欢过柱子，结果过了三天柱子过恶心了之后该过柱子的时候反而不去过柱子了(绕口令，雾……要平常心，以后不缺过柱子的时候) 对于某些人过于热情。比如，没有比如，不想比如了。 以为自己可以和导师正面对抗，讨价还价。(你看看你的蛋蛋捏在谁的手里) 对于一些小的新现象就沾沾自喜，结果发现已经被别人报道了就怒不可遏。(心态不端正容易把自己气死) 以为测试中心的技术员，行政部门的公职人员，各大公司的试剂销售商，都是给自己服务的，谁让他们有工资。(他们给你服务的原因，有的是想赚钱，有的是不想得罪你的老板。) 一个问题非要辩倒别人才心甘。(留点唾沫咽下去暖和暖和肠胃不好么) 吃饭的时候聊学术。(不一定所有人都热衷于学术) 和非学术圈的人聊学术。(会让别人觉得无聊) 觉得自己太菜。(其实大家都很菜) 觉得老板太菜。(老板只不过是懒得理你) 一开始就把毕业的事想好了。(变数太大，说不准以后你去扫厕所了呢) 喜欢用一些结论性的语句。如这个肯定发不了好文章，这个肯定是xxx的原理。(打脸可快了，不信你试试) 以为在知乎上看万粉的V的回答能学到经验，其实他只是在吐槽……","categories":[{"name":"Random Thoughts","slug":"Random-Thoughts","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/"},{"name":"2019","slug":"Random-Thoughts/2019","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/2019/"}],"tags":[{"name":"Essay","slug":"Essay","permalink":"http://muxueweiyu.github.io/tags/Essay/"}]},{"title":"byvoid","slug":"People that affect me/byvoid","date":"2018-12-18T04:03:22.000Z","updated":"2021-03-21T06:47:46.357Z","comments":true,"path":"2018/12/18/People that affect me/byvoid/","link":"","permalink":"http://muxueweiyu.github.io/2018/12/18/People%20that%20affect%20me/byvoid/","excerpt":"我希望可以站在前人的肩膀上注目远望，看看这万里风光，是否如我所想的一般。","text":"我希望可以站在前人的肩膀上注目远望，看看这万里风光，是否如我所想的一般。 时光易逝1234劝君莫惜金缕衣劝君惜取少年时花开堪折直须折莫待无花空折枝 曾经看过张昆玮学长的一篇日志。一个朋友在他29岁生日的时候，给过他年轻的朋友们一句话：「Gaudeāmus igitur, iuvenēs dum sumus（拉丁文）」，翻译是「在我们还年轻的时候，让我们快乐吧。」，换成一首诗就是「花开堪折直须折，莫待无花空折枝。」想想看，我们正当人生中最美好的岁月，为什么不去做自己喜欢的事情呢？不要被所谓的现实羁绊，试想人在年轻的时候如果还有如此多的「不能」，那么将来的「不能」祗会更多。所以，大胆去做吧，无需后悔。","categories":[{"name":"People that affect me","slug":"People-that-affect-me","permalink":"http://muxueweiyu.github.io/categories/People-that-affect-me/"}],"tags":[{"name":"affect","slug":"affect","permalink":"http://muxueweiyu.github.io/tags/affect/"},{"name":"people","slug":"people","permalink":"http://muxueweiyu.github.io/tags/people/"}]},{"title":"Random-Thoughts","slug":"Random Thoughts/2018/2018-12","date":"2018-12-01T03:48:15.000Z","updated":"2021-04-13T14:01:43.868Z","comments":true,"path":"2018/12/01/Random Thoughts/2018/2018-12/","link":"","permalink":"http://muxueweiyu.github.io/2018/12/01/Random%20Thoughts/2018/2018-12/","excerpt":"当你真正的去制造一个轮子,就能真正明白了,而不是看多少书,这就是学和做的区别.","text":"当你真正的去制造一个轮子,就能真正明白了,而不是看多少书,这就是学和做的区别. 1date: 2018-12-01 学校之外地东西,才是真正区分一个程序员地水平地关键 作为一个改行者，一定要牢记：学校最多只能教你不到30%的知识，剩下70%完全要靠自己。 其实在公司工作的模式就是这样的：很少有公司有详尽的文档或是培训——因为公司发展太快，大多数是自己看看文档，然后就直接看代码去理解，不明白的稍微请人问下，但主要还是靠自己学习和查询，不太可能有系统和长时间的培训。 所以这种看似短促的突击式学法，其实是大公司工作所常用的。“知其然”就足够了然后就去做事，“知其所以然”是在做完事情、经验慢慢积累后再逐渐跟进的。公司出钱养人是为了做事情，并不是给机会学习。 换句话说，衡量程序员的最有效的标准就是代码。那么能写出代码的，就是好程序员，“我知道这题这么做，但我不知道为什么”是完全没问题的甚至是高效率的一种表现；涉及到一个知识或是技能，即使不知道它的来龙去脉和理论，但却能用代码表述，这就足够了。 在计算机这个行业,自身的素质和努力是非常非常关键地,面试时几道题一刷,几句话一说,功力深浅在老司机面前立刻无所遁形. 很多行业，眼光、情商、方向更重要，计算机不是说这些不重要，而是拥有这些更多地能走得远走得好甚至完成从一个穷小子到大富翁的逆袭。但决定一个人是否能够走出第一步的，却是自身的硬功夫，也就是静下心来学习、准备面试枯燥无聊的过程。 每个人成长不是固定的,认识自我 单位时间内，主动性越高的人，行动次数越多。 书籍问题在于精深而失于大略, 不知整体为何物, 培训班相反, 只讲究大概,不求甚解 1date: 2018-12-11 精通,从来都是读书+实践地,工业界地代码和设计,其实跟书本不太一样,长期闭门造车尤其是纯理论学习,收效不高. 一类比一下通了,CS就如学乐器,观看别人,和理论书,怎么可能学会呢 我在建立（Build）简历。看看sample（例子），别人是怎么写简历的，UI Developer的简历是怎样的，人会的什么，怎么形容自己的project的；后端的简历是怎样的，机器学习方向的简历是怎样的之类。 技术上，可以说真的是一分积累，一分耕耘，一分收获，半点马虎不得——过去的120年里，总有人试图用刀枪不入这种“邪术”抵抗洋枪洋炮的“正道”。 大部分人没做过具体的large-scale的项目，因为只有互联网公司有large-scale的生态环境，所以大部分人不会；但互联网公司又考察这些，所以就过不了面试。越是不会，越进不去，越进不去，越是不会；而在互联网公司工作的人，却每天在积累这种系统经验。 导致只有少数工程师，越来越精通系统设计；大部分人，因为没有机会，还处于纸上谈兵阶段。 看文档,看开源项目 这就是一个变化 1date: 2018-12-22 人生苦难重重。 这是个伟大的真理，是世界上最伟大的真理之一。它的伟大之处在于，一旦我们领悟了这句话的真谛，就能从苦难中解脱出来，实现人生的超越。只要我们真正理解并接受了人生苦难重重的事实，那么我们就会释然，再也不会对人生的苦难耿耿于怀了。 生活中遇到问题，这本身就是一种痛苦，解决它们的过程又会带来新的痛苦。各种各样的问题接踵而至，使我们疲于奔命，不断经受沮丧、悲哀、痛苦、寂寞、内疚、懊丧、恼怒、恐惧、焦虑和绝望的打击，从而不知道自由和幸福为何物。这种心灵的痛苦通常和肉体的痛苦一样剧烈，甚至令人更加难以承受。正是由于人生的矛盾和冲突带来的痛苦如此强烈，我们才把它们视为问题；也正是因为各种问题接连不断，我们才觉得人生苦难重重。 躺平就好。 1date: 2018-12-30 “人攀明月不可得，月行却与人相随。” 语言要简洁 “普通的学生案头有胡适的《中国哲学史大纲》《白话文学史》，顾颉刚的《古史辨》，有《小说作法》，有《欧洲文学史》，有《印度哲学概论》。问他读过“四书五经”、周秦诸子的书吗？不曾。问他读过若干唐宋人的诗词集子吗？不曾。问他读过古代历史吗？不曾。问他读过各派代表的若干小说吗？不曾。问他读过欧洲文艺中重要的若干作品吗？不曾。问他读过若干小乘、大乘的经典吗？不曾。这种空泛的读书法，觉得大有纠正的必要。胡适的《哲学史大纲》原是好书，但在未读过《论语》《孟子》《老子》《庄子》《墨子》等原书的人去读，实在不能得很大的利益。知道了《论语》《礼记》等原书的大概轮廓，然后去读哲学史中关于孔子的部分，读过几篇《庄子》，再去翻阅哲学史中关于庄子的部分，才会有意义，才会有真利益。先得了孔子、庄子思想的基本的概念，再去研求关于孔子、庄子思想的评释，才是顺路。用譬喻来说，《论语》《礼记》是一堆有孔的小钱，哲学史中关于孔子的部分是把这些小钱贯穿起来的钱索子，《庄子》中《逍遥游》《大宗师》等一篇一篇的文字也是小钱，哲学史中关于庄子的部分是钱索子。没有钱索子，不能把一个个的零乱的小钱贯穿起来，固然不愉快；但是只有一条钱索子，而没有许多可以贯穿的小钱，岂不也觉得无谓？我敢奉劝大家，先读些中国哲学的原书，再去读哲学史；先读些《诗经》以及汉以下的诗集、词集，再去读文学史；先读些古代历史书籍，再去读《古史辨》。万一必不得已，也该一壁读哲学史、文学史，一壁翻读原书，以求知识的充实。钱索子原是用来贯穿零乱的小钱的，如果你有了钱索子而没有可贯穿的许多小钱，那么你该反其道而行之，去找寻许多的小钱来贯穿才是。” 如果丢开哲学、古史等，单就文学来说，便是先要接触了文学作品，然后阅读文学史才有用处。因为文学史上所讲的以文学作品为主，对于文学作品若还不曾认识，徒然知道一些“作家”哩，“派别”哩，“源流”哩，“演变”哩，便完全是隔靴搔痒的事情。而现在一般人似乎正在干这等隔靴搔痒的事情。只看学校里的考试题目便可知道其中的消息了。“何谓唐宋八大家？”“何谓公安体、竟陵体？”“五言诗起于何时？”“词源于何体？”这些题目都是常见的。其实，一个学生回答得出这些题目，不过有了一点关于文学的常识罢了，这并不足以证明他真个懂得了文学。而这些常识又是工具书上所备载的；一个学生如果回答不出这些题目，他只须翻开《辞源》来一查便知道了。那么，回答得出无异于证明他曾经查过《辞源》罢了。比较起“人体常温为摄氏三十七度”“居室须常开窗以通空气”那些常识来，这些文学常识便见得毫无实用的价值。倘若破费了好多的工夫，专为求得这样毫无实用价值的常识，可说全无是处。","categories":[{"name":"Random Thoughts","slug":"Random-Thoughts","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/"},{"name":"2018","slug":"Random-Thoughts/2018","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/2018/"}],"tags":[{"name":"Essay","slug":"Essay","permalink":"http://muxueweiyu.github.io/tags/Essay/"}]},{"title":"微调","slug":"People that affect me/微调","date":"2018-11-07T05:23:03.000Z","updated":"2021-03-21T06:47:28.981Z","comments":true,"path":"2018/11/07/People that affect me/微调/","link":"","permalink":"http://muxueweiyu.github.io/2018/11/07/People%20that%20affect%20me/%E5%BE%AE%E8%B0%83/","excerpt":"做咸鱼没什么不好的，不过做条有梦想的咸鱼也不赖。","text":"做咸鱼没什么不好的，不过做条有梦想的咸鱼也不赖。 工业界 学术界对于绝大部分人而言，努力成为交叉领域的熟手，远比成为计算机科学家要现实且有意义大部分人最终不会从事算法研究，而会奋斗在一线应用领域。 背景工业界未来需要什么样的机器学习人才？老生常谈，能将模型应用于专业领域的人，也就是跨领域让机器学习落地的人。我们需要并将长期需要这样的人才，这样的需求不会是昙花一现，这就跟web开发是一个道理，从火热到降温也经过了十年的周期。一个领域的发展有特定的周期，机器学习的门槛比web开发高而且正属于朝阳期，所以大家致力于成为“专精特定领域”的机器学习专家并不过时。 能写代码、构建模型的人千千万，但理解自己在做什么，并从中结合自己的领域知识提供商业价值的人少之又少。 调侃一句，哪个方向的机器学习人才最紧缺？答：每个领域都需要专精的机器学习人才，你对特定领域的理解就是你的武器。 基本功需要了解基本的数学统计知识即可，再一次重申，我对于算法的看法是大部分人不要造轮子，不要造轮子，不要造轮子！只要理解自己在做什么，知道选择什么模型，直接调用API和现成的工具包就好了。 回归模型(Regression) 分类模型(Classification) 神经网络(Neural Networks) 数据压缩/可视化(Data Compression &amp; Visualization) 无监督学习和半监督学习(Unsupervised &amp; Semi-supervised Learning) 基本功的意义是当你面对具体问题的时候，你很清楚可以用什么武器来处理 秘密武器学生朋友们可以更多的关注自己感兴趣的领域，思考如何可以把机器学习运用于这个领域。而已经有了工作/研究经验的朋友，要试着将自己的工作经历利用起来。举例，不要做机器学习里面最擅长投资的人，而要做金融领域中最擅长机器学习的专家，这才是你的价值主张(value proposition)。最重要的是，机器学习的基本功没有大家想的那么高不可攀，没有必要放弃自己的本专业全职转行，沉没成本太高。通过跨领域完全可以做到曲线救国，化劣势为优势，你们可能比只懂机器学习的人有更大的行业价值。 对特定领域的深刻理解往往就是捅破窗户的那最后一层纸，只理解模型但不了解数据和数据背后的意义，导致很多机器学习模型只停留在好看而不实用的阶段 没有什么不会改变，这个时代的科技迭代速度很快。从深度学习开始发力到现在也不过短短十年，所以没有人知道下一个会火的是什么？以深度学习为例，这两年非常火的对抗生成网络(GAN)，多目标学习(multi-lable learning)，迁移学习(transfer learning)都还在飞速的发展。有关于深度学习为什么有良好泛化能力的理论猜想文章在最新的NIPS听说也录了好几篇。这都说明了没有什么行业可以靠吃老本一直潇洒下去，我们还需要追新的热点。 技术总会过时，热点总会过去，但不会过去的是我们不断追求新科技的热情和对自己的挑战。 物理就是物理，不分中华物理和美国物理。 数学就是数学，不分希腊数学和中华数学。 绝大部分基础学科的知识都是不分国界的，如果不是因为德语普及程度不高，某些学科用德文教材也可以。 学知识，切忌就是追求无意义的形式，而抛弃了学习的本质。计算机领域一大禁忌就是重复造低质量的轮子，教科书同理。只要用外文书对于学习内容效率的提升大于语言障碍的影响，就该大力推崇。通过使用原版书和观看公开课，也是对于英语的一种锻炼。至少在理工科领域，大部分教材的阅读门槛没有想象中的高，且有助于提早训练学生进行学术写作，熟悉相关专业术语。 “评价一个艺术家的成就，你得先看看他/她的东西有没有形成风格，没风格、没有独立思考的作品一文不值。” 人生有两个重要时刻：一是意识到自己只是普通人，二是意识到自己的孩子只是普通人。评论区也读到两句有意思的话，大意是人生有两个重要时刻：一是发现自己不是普通人，二是发现自己是普通人。 坚持不是问题的核心，当然需要慢慢雕琢。思考频率，广度和深度。 我们学习到的新知识其实是一件件工具，不断用学到的新工具去重新思考以前的旧问题，往往新工具就能解决旧问题。我的一个建议不如把自己遇到的各种科研问题，不论多么不成熟都记下来在本子上，每过一阵子去翻看一遍学到的新知是否能够解决新问题。比如没学数据结构前，你总在想为啥我实现的机器学习模型这么慢，学了以后才知道搜索近邻可以用kd-tree，要是可并行的任务可以分解成小任务在多个core上运行。很多问题的答案其实非常朴实无华，但当你知道答案时，往往连问题都忘了，所以你总是没有好点子。因此要不断的记录，不断的回溯。随着你不断重复这个过程，思考的广度和深度都会上升。 人最终的问题就是想太多而做太少。绝大部分学术新星一开始的点子也是老板给的，或者一开始的工作也并非特别惊艳。但做的多了，质量总是会上升的。务实的说，有了尚可的点子就先做实验，有了尚可的实验结果就写论文，今天发不了CVPR就先发ICIP，迭代式上升才是符合普通人的路线。如果想要奔着搞大新闻的目标做科研，往往会卡很久很久很久…很久很久很久。但也不能总恰烂文章，必须逐步提高对自己的要求。 只有对自己的内容认可，才能做出让大家接受的内容。你最好能找到自己觉得有意思且重要的课题，而非是能发XXX会议的课题。只有这样你的内心才有动力，而非迷茫与功利。**而这一切的前提，也还是要有一定的思考和观察，毕竟好的点子不会从天上掉下来。而当你的工作质量上去了，得到关注与发表到好的期刊/会议只是水到渠成而已。 去做一些至少自己感兴趣且可以感到满意的工作 需要不断提高自己的思考能力和执行力。再务实一点说，从就业角度看做机器学习不一定比学软件开发性价比更高，毕竟后者岗位多需求大不易过气。所以在投身机器学习科研前，或者任何科研领域前，不如先想想自己的目的是啥，是为了找工作？发大财？当科学家？还是？没了解清楚前，不要给自己定一个虚无缥缈的的目标，也不要读了大牛的成功故事就感到自惭形秽。日子是我们自己的，你被感动、被激励只是说明人家文章写得好，和我们关系不大。你学学写作技巧后，最好赶快回到现实世界里来比较重要。不要给自己加戏，自怨自艾、感动、受鼓舞，都大可不必，务实就好。 我的工作内容到底是啥？我告她就是修自行车。一个新点子就像是个骨架，初期修修补补先上路再说，叮叮哐哐咱慢慢修它，先能骑就行。你沿路捡个轮胎，随手淘个发动机（找到了新的工具），再一改装，或许就成摩托车了。搞科研的，别看见人家有摩托车就焦虑，就眼红，就着急，其实大家都是一路捡破烂过来的。 大家出门都是一双脚，你要啥自行车啊？ 社交social networking 社交其实是一种投资，本质上寻求一种交换 职场社交的重点是真诚与简洁，不要绕太多弯，说人话说明白话。你跟比你资深/地位高的人接触时，对方很清楚你想的是什么，所以有内心铺垫来帮助你（即使并非义务）。所以你只要真诚的说明白自己的需求即可，不要绕太大的圈子，毕竟每个人都很忙。 丰富阅历 知识积累 经验积累 素养积累 掌握好必备的数学基础，掌握好一些基础的计算机核心课程，至于编程方面的技巧，我倒觉得不是需要做到特别厉害。如果能力有限的话，可以放低对操作系统，计算机结构这种比较偏底层的课程，人生要学会抓大放小，不要苛求自己样样精通，胶水语言Python的知识还是可以有很大的帮助。学好英语，至少打下阅读和听力的基础。 尝试尽早接触科研，进实验室。进实验室有两个明显的好处，一是深入了解，二是是否适合。 要有自己的“坚持”和“品味”，多读不同领域的书，比如社科类、经济类、人文类。因为数据科学的起点是以数据为基础，终点提取见解提供反馈。放低身段，多和别人交流。其实这一点有一点牵强 独立思考的能力，和去伪存真的勇气。生活中并不存在绝对的浪费，只是因为当下社会弥漫的焦虑感让我们希望任何投资都能马上变现。很多知识点互相交织，当你慢慢可以连点成线时，就可以对曾经困扰自己的问题有更深一层次的领悟，也就是渐进式学习。 如果现阶段某个知识点卡住了你，无论如何都跨不过去。你不如先放下，或许过一阵子法门就会在别的地方出现，你甚至会有更上一层的理解。但在那之前，你要学会“跳过”，也要记得“回来” 所以眼界大一点，你暂时连不起来的点可能只是时候未到，而非是浪费，每个人都是一座矿，你采的越猛，枯竭的也就越快。 学习本身就是对自身训练的过程，我们接受那么多知识，留下的应该是学习方法，而非一个个枯燥的公式。你该学习如何高效采矿，而非大力开采。 教育最大的意义不是让你记住细节，而是教会我们面对新知如何快速分解、消化，并从中创新。这些都不是靠苦工（拼死）能解决的，你终究要建立自己的框架，而非储存内容。 一个合理的学习态度在我看来是这样的：致力于训练自己可以快速内化新知识，遇到跨不过去槛先放下，但要记得回来。既不必啥都想学，贪多嚼不烂，也不必实用主义当先，要求任何付出都要马上变现。学习这事需要、也必须放松一点。你即使是座金矿，也怕矿难不是？拿我自己来说，我花了好几年做各种和学习、工作毫无关联的事情，甚至刚毕业时选了一份和知识背景完全垂直的工作并干了三年。我一个工科生，每天被要求西装革履写ppt，此处拜访客户卖咨询产品，这算是一种浪费吗？ 某个时间突然失去了购买的欲望。仔细一算，上次认真去购物应该已经是16年的事情了。可能还是因为这样的快乐太廉价，连快乐都算不上了。毕竟生活中还有那么多求而不得的事情，做不完的工作，写不完的代码，发不出的论文，得不到升职。对于我们不曾拥有过的东西，幻想总是最美好的。当你有能力获得，甚至不需要任何代价就可以得到某种资源时，就会失去了获得它的乐趣。 喜欢好看的人或者事物，但往往美丽下隐藏着的除了平庸，还有风险。因此从成事的角度来看，长相普通，智力较高，有很强性格与执行力的人可能有更大的优势 机器学习包含哪些学习思想？不仅仅是机器学习，大部分理工科的思想都可以从文史学科的角度去理解。正所谓大道至简，很多道理是共通的 教条主义的危害，优化模型的评估问题。 少即是多，“ 如无必要，勿增实体”。 三个臭皮匠的智慧：若一件事情不能证实，也不能证伪，就要存疑。个体学习的准确性和多样性本身就存在冲突，一般的，准确性很高后，要增加多样性就需牺牲准确性。事实上，如何产生并结合好而不同个体学习器，恰是集合学习的研究核心 不可知论，频率学派相信参数是客观存在的，虽然未知，但不会改变。而贝叶斯学派相信参数不是固定的，我们需要发生过的事情来推测参数。 妥协、矛盾与独立思考，算法思想的精髓是无处不在的妥协永远保持怀疑,当机器学习模型很轻松就达到很好的效果时，比如百分之百的正确率，你要警惕。 最小预测单元，避免追求通过一个模型预测多个目标。 数据比模型更重要，但数据不是越多越好。 保持独立思考的能力，不要别人说什么/书上说什么/论文里写什么，你就相信什么。毕竟在机器学习的世界里，我们每个人都是“民科”。 很多程序员只写代码，不写文档，不写案例，不做宣传。那么很自然的，你写的东西也就没人用。因此写好文档与示例非常重要的。我建议至少花和写代码一样长的时间写文档，其中主要有三个构件： 代码中的docstring。建议使用numpydoc的风格：numpydoc docstring guide - numpydoc v0.9.dev0 Manual GitHub上的ReadMe文档。例子可以看https://gist.github.com/dupuy/1855764 Read the Docs的API文档。使用指南看这里：Home | Read the Docs ReadMe文档最好是用rST语言来写，因为Read the Docs的语言也是rST，统一语言可以减少大量的开发成本。rST的编写指南可以参考：https://thomas-cokelaer.info/tutorials/sphinx/rest_syntax.html 人类是视觉动物，一个好的图文实例远远好于干巴巴的长篇大论. 人类是懒惰的。因此建议早早采用PyPI和conda来分发你的工具库，这样使用者就可以轻松使用pip和conda来安装啦。 Sustainable Development（可持续开发）写好几个模型容易，但保证工具库是可持续和可扩展是很难的。假设维护5个模型很简单，那么维护200个呢？所以在开发工具时就要考虑到这一点，有几个点非常重要： 首先是必须有单元测试（unit test），每个对应的模型如无例外都应有对应的测试，保证代码的覆盖度。 其次是善用集成测试工具（continuous integration），它们可以在多个平台与Python版本下自动运行你的单元测试。 相似的，维护代码的可读性和测试覆盖度（code coverage）也很重要，对应的工具有： 最后要写好开发指南（contribution guide）与如何反馈问题，如何参与开发，为其他感兴趣的人提供一个模板，如何反馈问题，一个标准issue report该有哪些部分，后续开发计划是什么？新模型的添加标准（inclusion criteria）是什么。 在这个阶段的重点是如何把一个项目做成真正的开源项目，一个持久的项目。到达这个阶段以后，项目本身已经比个人更加重要，我们必须为了可持续性而牺牲掉一些便携性。 When Possible, Optimize! （优化）。所以当你的工具库有了一定的规模后，建议多考虑重构和效率提升。 One more thing ，know why to do it（保持初心）写工具库的最终目的是为了锻炼自己，回馈社区。如果一开始的目的就是要出名，做个大新闻，有大概率只会铩羽而归。我开发过特定领域的通用库，同时也和很多优秀的开源贡献者有过探讨交流，包括scikit-learn的核心作者Alexandre Gramfort。Gramfort带给我的最大震撼不是工程与学术能力超强，而是超乎常人的认真—在一篇工具库论文中他给我们写了满满4页的评语，甚至运行了我们大部分案例与测试，这种精神让人肃然起敬。 写库不必太在意成功是否，自己努力过坚持过就好，只有真正的热情才能让我们一直持续维护与更新。只有几个用户却一直不放弃的开发者。这可能才是开源的真正意义吧。 大学学习计算机专业真的很差吗？ 希望能成为一个独特的人，而不是别人希望成为的那种人。 做艺术要先有自己的思考，才会有自己的风格 毕业以后想做什么。我说不知道，大概去读博吧。他难得地严肃起来，说：“建议你先读一个硕士，完整的接受一个研究训练，或者去工作几年，明白自己喜欢的方向是什么。如果你依然很喜欢现在的研究方向，实验室欢迎你回来。 随着年纪逐渐增长，愈发感到人生是你自己的，不要被舆论裹挟着前进。无论今天别人告诉你计算机完美、生物“优秀”，还是金融有钱赚，你都不能照单全收。你要在可能的情况下收集尽量多的信息，要有自己的判断。拿最简单的经济学原理举例**，一个行业门槛很低但利润很高，就会涌入了大量竞争者，从而使得利润回归到应有的水平上去。所以，如果想要在一个领域做出成绩，就一定要尽早学会收集信息、独立思考，并综合做出合理判断。即使是一个高中生，在综合互联网信息、周围学长学姐以及亲戚长辈的建议后，你应该可以做出一个对自己负责的决定。即使选择不算完美，只要掌握了这样思维方式，你可以不断的修正自己的目标，从而实现自己的想法。 开始接触到更真实的世界了。真实的世界有很多个维度，不再是单纯的做题考试升学。这里你可以有各种各样的选择，甚至选择多到把你淹没**。你会听到各种各样的建议，来自老师、学长学姐、家里的长辈，每个人似乎都说的对，每种未来都那么熠熠生辉。在无数种“光明”的未来中，你会怎么选择自己的路呢？ 明白每个阶段自己的能力边界在哪里，勇敢放弃边界外的机会，并在边界中最大化自己的价值。迈入大学最大的冲击就是周围的选项与诱惑突然以爆炸的形式出现在你眼前，很多人要不会迷失于诱惑，或者迷失于如何选择。全都要[哈哈哈] 世间风景万千，唯有错过才会取得。 做一个算法工程师，代码能力，整合能力，学术基础，沟通能力每个都很重要，但都不是绝对的条件。谋而后动，多思考，少抱怨，方法总比困难多。 开放一个别人可以与我互动的渠道，人总要有一定的出现频率，才能形成圈子。 教育的本质，应该是让每个受教育者能过得更好一些。 参考文档（API Reference）对于使用API的重要性，而大部分参考文档其实是自动生成的。而我的第一份实习主要就是做一件事，修复自动文档生成中的error和warning。举个简单的例子，下面是一个简单的求两数之和的函数，并加上了字符串介绍函数的功能以及相关变量和返回值。API参考文档的意义是什么？ 代码覆盖的重要性就是提高我们对于新代码的信息，让我们知道这些新的代码是有保证和重复测试的。 对着代码看了整整一上午都没看出问题，直到后来原来负责这个模块的工程师看过才发现了我们的代码少处理了一个特例（corner case），而单元测试也没有写逆向测试，所以无法通过软件的编译。那个时候我才知道，测试不仅要看是否按照预期运行，还要检测失败后应该是什么情况，并让它失败。 后来我就彻底告别了软件开发行业，也基本不用C++了，学了两天Python就开始一招走遍天下。我以为曾经给过我教训的这些软件工程知识估计用不上了，而编程经验对于我最大的帮助就是可以短时间上手Python。 去年在机缘巧合下开始参与了一些开源软件开发，也开发了一些自己的算法工具库。当时完全摸不着头脑，但从网上一搜如何做开源工具库，发现都是我很熟悉的概念： 写好测试，并使用自动测试模块，关注代码覆盖率 写好参考文档，使用字符串和文档生成工具 注意版本控制，做好regression testing 作为一个完全没做过开源的工具库的人，我只花了一周就完成了我的第一个算法工具包，文档、测试、代码覆盖一应俱全，也获得了一些小同行的关注。如果我不曾学习软件工程，那我肯定无法快速开发出可用的工具库，可能空有好点子却无法实现。 编程它就是个工具，它可以帮助你很快实现各种你看到的新点子。从这个角度来看，不管你是机器学习、优化以及其他方向，多学点编程肯定不吃亏。即使你最后没能做机器学习，这编程能力是你的谁也拿不走，还有广阔的就业市场。** 编程能力对于机器学习即使不是雪中送炭，也一定可以锦上添花。有大概率我们最终当不了科学家，而学好编程做个工程师是很好的替代选择。 现实一点看，少跟数学死磕，多花时间动手实现，拥有良好的编程能力，可以是就业的一道保障。找不到机器学习岗位，还可以去写JAVA去做手游嘛。 你可以选择跳槽，但工作也会筛选你。动机很重要，如果你的目标是赚个“快钱”，可能很快工作就会把你逼离这个岗位。因为初级的工作不仅没有高薪，还有很大的挫败感。你可能会觉得什么都不懂，什么都不做好，然后后悔自己要转行。而转行中最难得的，就是能感觉到“有意思”**。这不仅仅是鸡汤，你对一个领域的热情可以反映在写论文、玩博客、出书，也可以体现在主动揽活，业余时间自学。热情是骗不了人的。 我的天哪，做着自己喜欢的事情，还有钱拿。还有比这更爽的事情吗？ 每个人都有转行的权利。但建议转的步子小一点，别一口吃成个胖子。这不仅仅是给自己一个余地，也是对公司负责。胡言乱语说了一堆，诸君就当个段子就好。 调整心理期待，明白网络是找乐子的地方。 笔记应该是“索引”，而不是摘要。索引是你自己的，摘要是作者的。作为一个普通人，想要记住所有的paper内容和精髓是不现实的。 深度学习、机器学习的论坛 Reddit的ml板块（Machine Learning • r/MachineLearning），资讯为主 Reddit的ai板块（Artificial Intelligence • r/artificial） Quora机器学习（Machine Learning） stack exchange统计版（Cross Validated ），更多是统计相关 stack exchange数据科学版（Data Science Stack Exchange），帖子不多 stack overflow（偏向编程）。如果需要特别关注深度学习，就得加上标签搜索。 Reddit和Quora更偏向资讯交互，解决具体技术问题的讨论较少，偏方法论。后三个偏向解决具体问题，很多非常具体。Quora和stackexchange上不乏有大佬出没。 躺平就完事了 我们大部分人这辈子就是混口饭吃，能够一步步计划并实施的人真的太少了，大部分时候就是头脑一热。这种冲动，尤其是是年轻时候的冲动是非常值得尊重的。科技迭代是一轮一轮的。如果你今天以较低的成本赶上了这一轮热潮，也一定要赶快补足深度，不然下轮死在沙滩上的就是你。 数学作用规范表达，具体问题抽象为数学问题后，往往信息得到了压缩，仅仅是最重要的部分得以保留，这是非常适合信息交换与流通的。 数据储存与安全 明白的数据的价值 Break the loop（打破循环） 没有学历，没有技能，没有人脉，也没有财产，最终沦为底层。需要打破循环，但往往需要借助外力,当你感到困扰，需要突破时，不妨多多向外求助，比自我纠结效果会好很多。 成功的开源项目 核心代码群，且必须有合适的docstring和注释，用于生成文档。 配套的单元测试，以及自动测试（比如travis ci）和代码覆盖率（code coverage） 配套的文档以及例子，比如托管在readthedocs上，以及在binder上做一个jupyter notebooks。 封装并上传到pypi和conda上，方便大家下载更新。 写一个吸引人的README，使读者有兴趣使用你的工具。最好在Stack Overflow等网站上宣传。 上面每一点都有无数的坑需要趟，绝不是想的那么容易。大部分所谓的开源工具连个介绍文档都没有，怎么可能吸引别人来用呢？更别提被人star了。很多人仅仅是做了第一点，只做了核心模型，但其他部分全部都是缺失的，那么这种“所谓的硬核”工具库其实真不如资源收集贴更有实际意义。 至少应该等同于开发时间精力在写文档和宣传上，这样才算是个合格开源工具。从这个角度看，资源repo获得更多star也不奇怪，因为它的阅读门槛低，内容是可自解释的（self-explanatory &amp; self-contained），所以读者没有阅读障碍。 其实退一步来看，开源项目的初衷是分享，被别人star/fork/watch是一种肯定，这没错。但也不必凡事都论成就大小，那就有点舍本逐末的意思了。 找实习 根据往届情况进行精准定位 调整心理预期，放宽搜索域 找到你的“闪光点 先进实验室，再去实习 大部分简历都活不过人事那一关，你有再强的技术也走不到面试官面前 埋首故纸堆不是错，但你要相信条条大路通罗马。 了解算法，但不死抠算法 越往前走，我就越发现“磨练技术”和“培养软实力”并不矛盾，一个好的工程师或者科学家也需要“讲故事”和“混圈子”。说了这么多，只是想在一贯的技术分享以外，提供一些容易被我们这些书呆子忽略的事情。","categories":[{"name":"People that affect me","slug":"People-that-affect-me","permalink":"http://muxueweiyu.github.io/categories/People-that-affect-me/"}],"tags":[{"name":"affect","slug":"affect","permalink":"http://muxueweiyu.github.io/tags/affect/"},{"name":"people","slug":"people","permalink":"http://muxueweiyu.github.io/tags/people/"}]},{"title":"Random-Thoughts","slug":"Random Thoughts/2018/2018-11","date":"2018-11-01T03:48:15.000Z","updated":"2021-03-30T13:24:47.221Z","comments":true,"path":"2018/11/01/Random Thoughts/2018/2018-11/","link":"","permalink":"http://muxueweiyu.github.io/2018/11/01/Random%20Thoughts/2018/2018-11/","excerpt":"表达算个屁, 天才在于判断力,品味才是牛","text":"表达算个屁, 天才在于判断力,品味才是牛 1date: 2018-11-01 要知道，这个国家要实现的，是“中华民族的伟大复兴”，其中就包括“文化自信”，来于生活而高于生活的，群众喜闻乐见的文学艺术作品，当然是实现民族伟大复兴的重要组成部分。 要知道这个国家所追求的，是“全面迈进小康社会”，是先富带动后富，绝不是任何一个资本寡头的一言堂和圈地运动。 大家要相信：自己才是社会主义铁拳所保护的群体。 1date: 2018-11-06 很多企业业务最终面对的是个人用户，而且把精力和资源太多地放进了这些面向个人用户的业务中，即虚耗了企业运营的成本，也增加了企业潜在的风险。 更健康的科技企业，应该是 “面向解决问题的开发”，这里的问题，不仅仅是互联网的问题，不仅仅是民生问题，也包括了自然科学、共性基础科技难题、面向不同领域提供分析处理软件等的开发。 “面向解决问题的开发”：一个再小的真.科技企业，只要他解决好一个问题并且成为解决这个问题的领域中最牛逼的那位……它几乎就稳稳地就可以靠这一手“绝学”一直吃下去： 什么“拥抱变化”，不需要的。 office、PS需要一周一小变、一月一大变么？ 什么产品运营，不需要的，你见过PS七夕活动P满20张图领礼物、首充优惠么？ 最顶尖的人才往往有与世俗不同的价值追求，给他们个足够难的puzzle能带给他们极大的愉悦。 甚至于跳开已有的解决方案不说，如果是做创新，那么读博的同学都知道有个词叫做“research taste” (研究品味)，真正的科技企业，几乎可以说在它决定要要去解决哪个领域的哪一个问题的时候，就已经注定会成为行业翘楚了。这才是IT业真正能超越马克思的生产关系的地方：一次性的投入，几乎无尽地产出。 1date: 2018-11-11 “只要幻想存在于这个世界，迪士尼乐园就永远不会完工。”Disneyland will never be completed, as long as there is imagination left in the world.—— 华特·迪士尼 电影对塑造年轻人的生活有着巨大影响，通过娱乐的方式，能帮他们找到理想和人生目标。 *Movies can and do have tremendous influence in shaping young lives in the realm of entertainment towards the ideals and objectives of normal adulthood. “建立童话与现实世界的联系”也成了迪士尼企业不断开拓创新的核心动机。 探索世间万物的运行法则、掌握它们观感背后的物理规律和数学运算法则，用计算机来重现这一切的视觉观感。 华特·迪士尼：“做‘不可能的事’，是一种快乐！” 在计算机的世界中，能通过数学模型就计算出“星辰大海” 通过计算和动画的设计也可以让万物生灵“生生不息”。 “艺术挑战技术，技术启发艺术”（Art challenges technology and technology inspires art），这是皮克斯的座右铭，也是迪士尼不断探索技术边界的目标——讲更好的故事，让童话故事变成你的现实。 世界闻名的迪士尼研究院（Disney Research），更是用纯粹的科技， 践行着他们的理想。 人类的知识从自然而来，从自然中领悟科学，再用科学来把美好的童话故事变成现实。 老华特·迪士尼给这个世界留下最宝贵的东西，就是这种艺术与科技结晶背后所代表的“以创造现实童话、引人向善为己任”的精神遗产 1date: 2018-11-22 局限,确实是局限,发一封邮件问一个前线的研发人员对现有的学术研究的看法,逛一逛所学专业的专业论坛,总结下人们都在关注什么问题能得以解决, 和该领域更有见地的人喝杯咖啡聊聊天. 计算机图形学(物理模拟方面)需要学习哪些课程固体: linear complementary problem, multibody dynamics (LCP) continues collision detection, cloth simulation robert bridson. 流体: stable fluids, fluids ron fedkiw, animating sand as fluid, fast variational approach for fluid simulation, parallel Multigrid fluid simulation McAdams, APIC jiangchen fanfu, narrow band FLIP, Nils Thuerey, Christ Wojtan. 数学及工具: FFT, Graph Laplacian, reduced space simulation, Multigrid methods, conjugate gradient methods, nonlinear optimization, distributed computing, parallel programming, cuda programming, Poisson’’s equation, 做物理计算研究, 通常是不调包的, 线性代数系统的求解是同数据结构耦合的所以得要自己写. 弹性体: Efficient Elasticity for Character Skinning with Contact and Collisions, mcadams vega, jernej barbic. SimIt: Shinjiro Sueda reinforcement learning + physical simulation. —&gt; 基于虚拟物理仿真平台的机器人智能强化学习. 关键字有: jason peng, Michael Vann De pann, karen liu, greg turk, etc….. 1date: 2018-11-30 学校教你的那点课程最多能骗过外行。 十年编程 没有取巧的就是一道道的刷, 然后就是刷题不能停,这是真理啊,CS的很多事情只需要简单的长期坚持,便有奇效. 现实现实现实 技术是为了解决实际问题,技术是否重要和实用,看它所解决的问题,它所依赖的平台. 洗白名头, CS是实践性学科,所有期理论和做法,都是以实现为基础的,与其花费时间理解理论,不如理论与现实相结合, 认真去做project并且了解每一个细节,抄袭别人的代码是不可取的 什么叫做学会,只有真正写程序,做project ,才算真会,无论看多少书,背多少定义和答案,往往真正记得最牢,最能解释清楚的,就是自己写过做过的东西,做过没做过很容易区分, 幸运或不幸,很难重复,时代不同了, 改行CS 的误区, 我基础差, 先学会原理,再写程序事半功倍. 往往是因为本能的惧怕写程序而再为自己找借口,正确的做法是,直接写程序,同时理解原理,通过程序,而不是读书,来理解原理,上文所强调的— 一切通过程序和例子. Javascript 等在求职中比较有用,大量的职位需求,难度不高,属于投入小收益大的方向, 为了现实暂时屈从一个一般的公司,要求技能对口,尽量能快速干活,前端肯定是有利的 CS不是上课越多越好,绝大数知识都是自己学习的,过多的课程只会疲于奔命. 做project 优先上 选好一门好课也需要大量的时间精力才能有所收获 现实问题:信息完全网络化后,几乎可以100%依赖网络进行学习和获取信息之后,做事情,做决定,学习和工作是否更容易甚至无门槛了 用俗话说，以前是获取不到信息，人们需要开拓渠道；如今是过多的信息，人们需要判断，并且去评价信息的可靠性，然后吸收。 发现临渊羡鱼者众，退而结网者少。 没有动力和勇气去尝试,或是更可惜地—尝试了,却没有100%地去坚持和努力. 我有种思路返璞归真的感觉，就是再好的计划，再好的专业，再有利的条件，也没有个人坚持和努力重要。这种个人努力不是996，不是熬夜苦读，而是专注和去实际操作，理性地。 与时间赛跑！最难之处，是在短短2年左右时间内有效率地磨练自己，达到找到工作的水平。这里的关键词是“有效率地”。","categories":[{"name":"Random Thoughts","slug":"Random-Thoughts","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/"},{"name":"2018","slug":"Random-Thoughts/2018","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/2018/"}],"tags":[{"name":"Essay","slug":"Essay","permalink":"http://muxueweiyu.github.io/tags/Essay/"}]},{"title":"推荐","slug":"People that affect me/推荐","date":"2018-10-18T05:24:49.000Z","updated":"2021-03-21T06:47:17.034Z","comments":true,"path":"2018/10/18/People that affect me/推荐/","link":"","permalink":"http://muxueweiyu.github.io/2018/10/18/People%20that%20affect%20me/%E6%8E%A8%E8%8D%90/","excerpt":"许多事情并不是立竿见影的影响，而是不断经历失败后再次看到之后才发觉原来如此。","text":"许多事情并不是立竿见影的影响，而是不断经历失败后再次看到之后才发觉原来如此。 Why Functional Programming Matters 阅读笔记 本文是 Why Functional Programming Matters（为什么函数式编程很重要）的阅读笔记，用相对通俗的语言解读了这篇论文，并对我觉得重要的一些点做了一些解释。 为什么函数式编程很重要?随着软件变得越来越复杂，良好地组织软件也越来越重要。一个组织良好的软件更容易编写调试，这种软件提供了一组可以复用的模块（module），这也降低了未来编写代码的代价。本文将说明，函数式编程语言的特色，尤其是高阶函数和惰性求值（high-order function and lazy evaluation），将会对模块化非常有利。因为模块化是软件开发成功的关键，所以函数式编程会在软件开发过程中具备很大的优势。 模块化的过程是将问题分解成子问题，求解子问题，再将子问题的解结合（glue）起来的过程。怎么分解直接依赖于编程语言提供了怎样的结合方法。所以要增强模块化能力，需要提供新的结合方法。 模块化对编程很重要，模块化（modularity）不仅仅是模块（module）。 Teach Yourself Programming in Ten Years为什么每个人都这么着急？走进任何书店，您将看到如何在24小时内自学Java，以及无穷无尽的变体，可以在几天或几小时内教授C，SQL，Ruby，算法等。 结论是要么人们急于学习编程，要么编程比其他任何东西都更容易学习。Felleisen 等。 在他们的书《*如何设计程序》中对这种趋势表示赞同，当他们说“错误的编程很容易。白痴可以在21天内学习它，即使他们是傻瓜*。” Abtruse Goose漫画也受到了欢迎。 自学： 在24小时内，您将没有时间编写几个重要的程序，并从它们的成功和失败中学习。您将没有时间与经验丰富的程序员一起工作，也不了解在C ++环境中生活的感觉。简而言之，您将没有时间学习很多东西。因此，这本书只能说是肤浅的熟悉，而不是深刻的理解。正如亚历山大·波普（Alexander Pope）所说，学一点东西是一件危险的事情。 C++： 在24小时内，您可能可以学习C ++的某些语法（如果您已经知道另一种语言），但是您对如何使用该语言的了解却不多。简而言之，如果您是一名Basic程序员，则可以学习使用C ++语法以Basic风格编写程序，但是您将无法了解C ++的优点（或缺点）。那有什么意义呢？ 艾伦·珀利斯（Alan Perlis）曾经说过：“一种不影响您对编程的思考方式的语言，是不值得了解的”。一个可能的观点是，您必须学习一小部分C ++（或更可能是JavaScript或Processing之类的东西），因为您需要与现有工具交互以完成特定任务。但是，那时您不会学习编程。您正在学习完成该任务。 十年自学编程在下棋，音乐等众多领域中发展专业知识大约需要十年的时间。写作，电报操作，绘画，钢琴演奏，游泳，网球以及神经心理学和拓扑学研究。关键是商议 练习：不仅要一遍又一遍地做，还要挑战一项超越您当前能力的任务来挑战自己，尝试一下，分析执行前后的表现，并纠正任何错误。然后重复。再重复一次。似乎没有真正的捷径：即使是4岁的音乐天才莫扎特，也花了13年的时间才开始创作世界一流的音乐。在另一种类型中，甲壳虫乐队似乎爆出一连串的＃1热门歌曲，并在1964年的埃德·沙利文（Ed Sullivan）演出中露面。但是自1957年以来，他们一直在利物浦和汉堡的小型俱乐部里打球，尽管他们颇具吸引力在早期，他们的第一个重大成功就是Sgt。Peppers于1967年发行。 马尔科姆·格拉德威尔尽管他专注于10,000小时（而不是10年），但他已经推广了这个想法。亨利·卡蒂埃·布雷森（Henri Cartier-Bresson，1908-2004年）的另一个标准是：“您的前10,000张照片是最糟糕的。” （他没想到数码相机会在一个星期内达到这个目标。）真正的专业知识可能需要一辈子：塞缪尔·约翰逊（Samuel Johnson（1709-1784））说：“任何部门的出色表现，只有靠一生；不应以较低的价格购买。” 乔uc（1340-1400）抱怨说：“莱夫（lyf）太短了，手工艺品那么久了。” 希波克拉底（约公元前400年）以“ ars longa，vita brevis”的摘录而闻名，它是“ Ars longa，vita brevis，occasio praeceps，experimentum perculosum，iudicium difficile”较长引语的一部分，在英语中译为“生命”。是短， 当然，没有一个数字可以作为最终答案：假设所有技能（例如编程，下棋，下棋和玩音乐）可能都需要完全相同的时间来掌握，这似乎是不合理的，也不会所有人都花费完全相同的时间。正如K.Anders Ericsson教授所说：“在大多数领域，即使是最有才华的个人也需要多少时间才能达到最高水平。令人难以置信的是，10,000小时的小时数使您感觉我们正在谈论多年每周10至20个小时，有些人会说这些是天赋最才华的人，仍然需要达到最高水平。” 我想成为一名程序员 获取感兴趣的，因为他很有趣，确保保持足够的乐趣，以便令我愿意投入十年/10,000小时的时间。 程序学习的最好方法就是边做边学。从技术上讲，“在一定范围内，个人的最高绩效不会根据扩展的经验而自动获得，但是，即使是经验丰富的个人，也可以通过有意改进来提高绩效水平。 ” 最有效的学习需要对特定个体具有适当难度级别的明确定义的任务，信息反馈以及重复和纠正错误的机会。 与程序员交流，阅读其他程序，这比任何书籍或培训课程都重要。 如果需要，可以在大学学习期间获得一些实习，无论如何，仅靠书籍学习是不够的。“计算机科学教育不能使任何人成为专业程序员，就像学习画笔和颜料怎么可能使某人成为专家画家一样。” 缺乏创意吗？与其他程序一起从事项目。在某些项目中成为最好的程序员；在其他人身上最糟糕。当您处于最佳状态时，就可以测试自己领导项目的能力，并用自己的远见激发他人。在最坏的情况下，您将学习大师的所作所为，并了解他们不喜欢做的事情（因为他们让您为他们做）。 了解别人编写的程序。看看当原始程序员不在时需要理解和修复它的过程。考虑如何设计您的程序，使那些在您之后维护它们的人更轻松。 学习至少六种编程语言，包括一种强调类抽象的语言（例如Java或C ++），一种强调功能抽象的语言（例如Lisp或ML或Haskell），一种支持语法抽象的语言（例如Lisp），一种支持声明性规范的语言（例如Prolog或C ++模板）。 ，并且强调并行性（例如Clojure或Go）。 计算机科学，了解计算机执行一条指令，从内存中获取一个单词（有或没有缓存未命中），从磁盘读取连续的单词以及在磁盘上寻找新位置需要多长时间。 语言的标准化，良好的意识，尽快开始语言标准化工作。考虑到所有这些，仅通过学习书籍就能取得多大的成绩值得怀疑。在我的第一个孩子出生之前，我阅读了所有“ 如何做”书，仍然感到自己是一个笨手笨手的新手。30个月后，当我的第二个孩子到期时，我是否又回到书店复习了？否。相反，我依靠自己的个人经验，事实证明，与专家撰写的成千上万页相比，这对我来说更加有用和令人放心。 弗雷德·布鲁克斯（Fred Brooks）在他的论文《*无银子弹》中* 确定了一个由三部分组成的计划，以寻找优秀的软件设计师： 尽早系统地确定顶级设计师。 指派职业指导者负责潜在客户的发展，并仔细保存职业档案。 为成长中的设计师提供互动和相互刺激的机会。 假设某些人已经具备成为优秀设计师所需的素质；工作是适当地哄骗他们。更简洁地说：“每个人都可以雕刻：米开朗基罗必须被教导如何不做。伟大的程序员也是如此。” 佩利斯（Perlis）说，伟人的内在素质超越了他们的训练。但是质量从何而来？是天生的吗？还是他们通过勤奋发展？正如奥古斯特·古斯托（Ratatouille的虚构厨师 ）所说，“任何人都可以做饭，但只有无所畏惧的人才能做得好。” 我将其更多地视为愿意将一生的大部分时间投入到思考实践中。但也许 无所畏惧是一种概括的方式。或者，正如古斯托（Gusteau）的批评家安东·埃戈（Anton Ego）所说：“并非每个人都能成为一名伟大的艺术家，但是伟大的艺术家可以来自任何地方。” 因此，继续购买那本Java / Ruby / Javascript / PHP书；您可能会从中受益。但是您不会在24小时或21天内改变自己的生活，也不会改变自己真正的整体专业知识。如何努力在24个月内不断改进？好吧，现在您开始有所建树… 参考文献 本杰明·布鲁姆（ed）*《年轻人的发展才能》*，巴兰廷，1985年。 布鲁克斯，弗雷德，《*无银子弹》*，IEEE计算机，第1卷。20号 1987年第4期，第4页。10-19。 Bryan，WL＆Harter，N.“关于电报语言的研究：习性等级的习得。Psychology Review，1899，8，345-375 海斯（John Hayes），《*完成问题解决者》（* Lawrence Erlbaum），1989年。 Lave，Jean，《实践中的认知：日常生活中的思维，数学和文化》，剑桥大学出版社，1988年。 附录：语言选择先学习哪种编程语言。是没有答案，但可以考虑以下几点： 使用你的朋友*。当被问及“我应该使用哪种操作系统，Windows，Unix或Mac？”时，我的回答通常是：“使用您的朋友使用的任何软件”。从朋友那里学习所获得的优势将抵消操作系统之间或编程语言之间的任何内在差异。还请考虑您的未来朋友：如果继续，您将成为程序员社区的一部分。您选择的语言是一个正在成长的大型社区还是一个濒临灭绝的社区？是否有书籍，网站和在线论坛可提供答案？您喜欢那些论坛中的人吗？ 保持简单*。诸如C ++和Java之类的编程语言是由经验丰富的程序员组成的大型团队设计的，这些团队关心其代码的运行时效率。结果，这些语言具有针对这些情况设计的复杂部分。您担心要学习编程。您不需要那种麻烦。您需要一种被设计为易于由单个新程序员学习和记住的语言。 玩。宁愿学习弹钢琴的方式：通常的互动方式，即敲击琴键后便会听到每个音符，或者是“批处理”模式，即在完成整首歌曲后才听到音符？显然，交互式模式使钢琴和编程学习变得更加容易。坚持使用交互式模式的语言并使用它。 给定这些条件，我对第一种编程语言的建议是**Python**或 **Scheme**。另一个选择是Javascript，不是因为它是为初学者精心设计的，而是因为有许多在线教程供您使用，例如 Khan Academy的教程。但是您的情况可能会有所不同，还有其他不错的选择。如果您的年龄是个位数，则您可能更喜欢 Alice或Squeak 或Blockly（年龄较大的学习者可能会喜欢）。重要的是您选择并开始。 书籍和其他资源 计算机程序的结构和解释（Abelson和Sussman）可能是计算机科学的最好入门，它确实教授编程作为理解计算机科学的一种方式。您可以在本书中在线观看讲座视频，以及在线全文。这本书具有挑战性，将淘汰一些可能通过另一种方法成功的人。 如何设计程序（Felleisen 等人）是有关如何以优雅和实用的方式实际设计程序的最佳书籍之一。 Python：Python编程：CS入门（Zelle）是使用Python的不错的入门。 Python：Python.org 上提供了一些在线教程。 计算机编程的概念，技术和模型（Van Roy和Haridi） 被某些人视为Abelson＆Sussman的现代继任者。这是一门编程的大创意，涵盖了比Abelson＆Sussman更大的范围，同时也许更易于阅读和遵循。它使用一种广泛使用的语言Oz，但它是学习其他语言的基础。","categories":[{"name":"People that affect me","slug":"People-that-affect-me","permalink":"http://muxueweiyu.github.io/categories/People-that-affect-me/"}],"tags":[{"name":"affect","slug":"affect","permalink":"http://muxueweiyu.github.io/tags/affect/"},{"name":"people","slug":"people","permalink":"http://muxueweiyu.github.io/tags/people/"}]},{"title":"Random-Thoughts","slug":"Random Thoughts/2018/2018-10","date":"2018-10-01T03:48:15.000Z","updated":"2021-03-30T12:52:16.336Z","comments":true,"path":"2018/10/01/Random Thoughts/2018/2018-10/","link":"","permalink":"http://muxueweiyu.github.io/2018/10/01/Random%20Thoughts/2018/2018-10/","excerpt":"你对一个领域的热情可以反映在写论文、玩博客、出书、也可以体现在主动揽活，业余时间自学。热情是骗不了人的：","text":"你对一个领域的热情可以反映在写论文、玩博客、出书、也可以体现在主动揽活，业余时间自学。热情是骗不了人的： 1date: 2018-10-01 避免焦虑的最佳方法不是担心市场饱和，而是把自己从低端向中端，甚至高端提升。 大学之道，在明德，在亲民，在止于至善。 知止而后有定，定而后能静，静而后能安，安而后能虑，虑而后能得。 你对一个领域的热情可以反映在写论文、玩博客、出书、也可以体现在主动揽活，业余时间自学。热情是骗不了人的： 去阅读一本书或一篇paper肯定是带着问题驱动型读，不会是为读而读，这样挺水的。也会阅后即忘 1date: 2018-10-9 重复制造轮子和重复发明轮子是不一样的。发明是researching，制造是engineering，不能混为一谈。我们说，不要重复发明轮子，但是没有说，不要重复制造轮子。 重复制造它的意义有两个 1：你的到了锻炼 2：你牛逼的话可以比前人造的更好，间接造福了全世界 1date: 2018-10-10 绝大部分人真的很水,这也算是得益于国内网络环境的越来越糟糕,使得如果我能够用到我一半的热情于主要的学科之中,那么剩下的热情我可以全身心的投入到我所喜欢的内容了,谢谢,这是最好的时代,这是最差的时代.非常感谢. 学习一种和以往不同的思考方式。你会的思考方式越多。你就越可以自由的思考。不会被以往接触过的某些东西禁锢住。 1date: 2018-10-14 函数式程序员生产力比传统程序员高一个数量级,因为函数式程序要短一个数量级,传统的程序由90%的幅值语句构成,在功能性程序这些可以省略,没有质量标准,因此没有理想的目标,只有这些不够,必须找到一些东西来代替,不仅仅是强大功能,还要有乐趣所在,结构化程序是以模块化方式设计的,极大提高了生产率,小模块编码快速,通用模块可以重复使用,可以独立测试,减少调试时间,有助于”小心编程” 分解原始问题的方法直接取决于粘合的方式,提高一个人模块化问题的能力,从概念上,必须在编程语言中提供新的粘合剂,复杂的范围规则和单独编制的规定只能帮助文书细节ーー他们永远不可能对模块化做出重大贡献。 程序可以以新的方式模块化，从而可以简化。 这是函数式编程能力的关键ーー它允许改进的模块化。 这也是函数式程序员必须为之奋斗的目标ー更小、更简单、更通用的模块，与新的模块粘在一起我们要描述的胶水。 1date: 2018-10-24 高校计算机教育 意义不明确 目的不明确 课后作业少 教材太差劲 很多大学的教学大纲上来就是C语言，汇编，一堆概念先来一套，不管你是否理解，先背下来再说。导致一门理工科课程沦为了像文科一样把背概念作为考核标准。很多高校的考试试卷至今还在考：计算机由哪几部分组成，到底是填由显示器主机组成呢，还是填由CPU，内存，输入输出设备呢？考这种东西的意义是什么？考背书能力吗？ 计算机组成原理这门课程是很多CS专业的必修课程，但是打开这些专业的书本的前几章，基本上都是给几个公式，反码，补码的计算公式，浮点数计算公式等等。如果问一个刚刚学完补码计算规则的人：补码有什么用？为什么补码是这样计算的？不知道能有多少人回答出来呢？看看国外的一本名书《编码》是如何阐述这些问题的吧。先从最简单的开灯关灯电路，然后是继电器电路，多个继电器组成逻辑门电路，多个门电路组成单位加法器，多个单位加法器组成一个多位加法器。他的目的非常明确，告诉你最简单的电灯是如何工作的，告诉你继电器是如何工作的，顺着这个目的一步一步下去，最后就能了解CPU是如何工作的，了解为什么计算机的运算需要补码来参与，而不是正常人所用的原码。他的每一个步骤都带着一个很有趣但是也很明确的目的性来学习。 仔细看一下国内的计算机组成原理教材和国外的CSAPP，你会发现国内的书的习题以及引用资料可以说是少得可怜。本来大学生经过高考之后就已经很松懈了，大学本身又是放羊式的教学和管理，课后作业要么copy代码，要么网上抄，作业难度和质量也不高。 很多大学老师为了评职称，过考核，自己水平不够还强行写一堆学术垃圾，最后还在校内强制推广。这个就不说了，其实大家心里都有个数。 1date: 2018-10-30 现在要做的是站在前人的肩膀上制造轮子,加深理解了 12345678910第五条 任何单位和个人不得利用国际联网制作、复制、**查阅**和传播下列信息：（一）煽动抗拒、破坏宪法和法律、行政法规实施的；（二）煽动颠覆国家政权，推翻社会主义制度的；（三）煽动分裂国家、破坏国家统一的；（四）煽动民族仇恨、民族歧视，破坏民族团结的；（五）捏造或者歪曲事实，散布谣言，扰乱社会秩序的；（六）宣扬封建迷信、淫秽、色情、赌博、暴力、凶杀、恐怖，教唆犯罪的；（七）公然侮辱他人或者捏造事实诽谤他人的；（八）损害国家机关信誉的；（九）其他违反宪法和法律、行政法规的 制作、复制、传播我就不说了。查阅是什么意思知道吧？「找出来阅读」。说白了就是，不准看。 《计算机信息网络国际联网安全保护管理办法》的这个第五条，称得上是魔幻科幻迷幻玄幻，单这一条就为我国贡献了数以亿计的违法人员。","categories":[{"name":"Random Thoughts","slug":"Random-Thoughts","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/"},{"name":"2018","slug":"Random-Thoughts/2018","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/2018/"}],"tags":[{"name":"Essay","slug":"Essay","permalink":"http://muxueweiyu.github.io/tags/Essay/"}]},{"title":"硅胖语录集合","slug":"People that affect me/硅胖","date":"2018-09-01T05:23:55.000Z","updated":"2021-03-21T06:46:53.322Z","comments":true,"path":"2018/09/01/People that affect me/硅胖/","link":"","permalink":"http://muxueweiyu.github.io/2018/09/01/People%20that%20affect%20me/%E7%A1%85%E8%83%96/","excerpt":"磨练心智，开阔视野，了解彼岸的信息。","text":"磨练心智，开阔视野，了解彼岸的信息。 了解论坛 最早期获取未知信息的来源，知道了一亩三分论坛的，快速高效，隐私保护是个难题。收费变现，让大量人员流失。毕竟社交平台的程序和服务器谁都会弄，其真正价值还在于贡献者和内容——Google所以伟大，不是因为Google只有搜索引擎，还是因为它的搜索引擎可以index世界上所有的网页，那些网页才是真正的贡献者。 真正的贡献者其实是发面经和帖子的人。 严格来讲，发面经是违反NDA的。 从商业角度，这就是个建设“平台”还是“产品”的问题 英文平台的崛起。可以参考Levelsfyi；公司小道消息和八卦，可以看Blind 大趋势上，论坛逐渐被公众号和知乎以及各种知识分享的App所取代。长远来讲，留学、移民话题也可能如此，被新方式取代。 用硅谷商业模式碾压“躺在技术壁垒中不思进取只想着割韭菜的臃肿缓慢官僚保守的传统车厂”，这才是电动汽车的根本优势所在。 专业and职业供需始终在动态变化，每个人的路都是要自己孤独去走的。但我一直认为，如今改行学计算机，依然是正道之一，无论国内国外。只不过，暂时可能会面临经济危机、疫情危机、人数过多等问题，可能要有几年的低谷了。 经济危机往往是谷底，也就是上升的开始。而且，这世界上的事情被说得很复杂，有时候却简单得残酷：没有别的选择，尤其是某些人。 出国考个GRE,学CS都是顺理成章的事情，没什么可纠结的。 那么多培训机构和专业人员，全职教学尚且困难，讲的东西很多也只是皮毛，又何德何能，靠业余时间一个人筑起一座城市. 很多东西，“懂”和能把人“教懂”是两个概念，“教懂”是需要大量而长期的实践的，是我暂时所不具备的。如果能够面对面说话、有白板，还更好一些，通过文字，表达力就更差一层了。 现实也是个问题。中文互联网的现实状况，使得原创并没有太多的直接利益，所以缺乏内在驱动力。 大量垃圾信息流的出现也就是在那段野蛮时期。由针对问题和现实，到针对个人和立场。太快了。 自我变化曾经的文学梦，现在也做到了每天码字。可以说某种意义上已经开始了。 这次疫情，被迫尝试了不同的生活和工作方式，也有时间思考，恍如隔世，仿佛昨日还是意气风发。 发现自己总是有很强的心理暗示和心理依赖效应。就像我总暗示自己在家上班效率不高，但事实上是错的，这不过是一种心理上的舒适区而已。真被迫在家上班，我也可以工作得非常好。 对社交网络的依赖感越来越轻了， 码农工作本身从最初拥有自己的个人计算机开始，就有一种感觉，一定要进入这个行业。不管是为了更好的技术，创作的成就感。一切的前提就是对于一切未知的求知欲“这玩意到底怎么回事，我得搞清楚。我不是加班，只是好奇而已。” 对整个行业的态度，我当然没有改变多少：计算机过去是、现在是、未来也一直是会解决实际问题的创新行业，因此给勤劳好学能吃苦的人以更多的机会，能够改变自己阶层和环境的机会。我完全支持很多人拿计算机作为跳板和谋生手段的做法，至于能否喜爱不必奢求。 非常有趣，不会觉得乏味和单调。日复一日，年复一年。","categories":[{"name":"People that affect me","slug":"People-that-affect-me","permalink":"http://muxueweiyu.github.io/categories/People-that-affect-me/"}],"tags":[{"name":"affect","slug":"affect","permalink":"http://muxueweiyu.github.io/tags/affect/"},{"name":"people","slug":"people","permalink":"http://muxueweiyu.github.io/tags/people/"}]},{"title":"Random-Thoughts","slug":"Random Thoughts/2018/2018-09","date":"2018-09-01T03:48:15.000Z","updated":"2021-03-30T12:41:24.278Z","comments":true,"path":"2018/09/01/Random Thoughts/2018/2018-09/","link":"","permalink":"http://muxueweiyu.github.io/2018/09/01/Random%20Thoughts/2018/2018-09/","excerpt":"这就开始了 要提升自己的层次的呀，否则就会陶醉在菜鸡互啄之中。","text":"这就开始了 要提升自己的层次的呀，否则就会陶醉在菜鸡互啄之中。 1date: 2018-09-01 人的成长实际上是一个不断努力探索，发现自我的过程。我们不断地努力学习、工作，不断地接受新的事物、新的观点、新的思想的过程，其实也是一步一步塑造巩固自身信念，看清自己的原本面目，接受并且成全自己的过程。 没有什么捷径可走，任何一个概念和技术都是在大量实践的基础上、从内心深处理解才会有所领悟。而且，他人的观点未必就是正确的，即使正确，也未必是我所理解的那个意思。 算法部分 123456789二分搜索 Binary Search 分治 Divide Conquer 宽度优先搜索 Breadth First Search 深度优先搜索 Depth First Search回溯法 Backtracking 双指针 Two Pointers 动态规划 Dynamic Programming 扫描线 Scan-line algorithm快排 Quick Sort 数据结构部分 123456789栈 Stack队列 Queue链表 Linked List 数组 Array 哈希表 Hash Table二叉树 Binary Tree 堆 Heap并查集 Union Find字典树 Trie 对算法题来说有两大法宝，“拿到题选什么算法”和“如何实现这个算法”，后者会更容易一些，所以可以先从实现算法开始练起 *剑指 Offer几乎包含所有常见的、经典的面试题，是应对面试的必读书籍*编程之美适合准备面试FLAG大厂时候用来刷题 1date: 2018-09-10 任何一段程序，都包含输入输出：自己调用参数是输入，返回值和传递给下层模块的调用参数是输出。一段程序要能正常工作，他肯定不是随便什么输入都能接受的，而是要求输入的参数满足一定的约束，比如说某个参数必须是整数类型，必须大于0，另一个参数必须是回调函数，回调函数的结果一定要符合某个特性，等等。输出也不是什么乱七八糟的都能输出，必须要符合配方的需要，这些输出结果所具有的特性称为保证。 逻辑性的写作，写写感想吧。回顾整个学生生涯，没有一个老师深刻地让我了解到基础的重要性，学习就是做题；而这个道理我到大学才自己悟了出来，不只是我愚笨还是我们教育的悲哀 另一方面，好的教育必定是昂贵的，认识世界的方式，缺乏一种解构的视角，这不仅仅是程序语言的问题。 我不理解怎么保证写是对的，怎么保证在合适的地方想到它并且应用呢…… 学习是不断迭代的过程，只有积累积累再积累 1date: 2018-09-15 学习嘛，要么氪，要么肝。 工科嘛，学习是为了解决问题的，考的是经验，需要不断地学习不断地思考，不断地改进。 熟悉程度不一样，一个有大量经验的人，自然一眼就能看出来，现在这个问题里，哪些是常规部分，哪些是非常规部分。如果全部都是常规的，那怎么可能解决不了呢？最后思路就变成了如何将非常规的部分转化成一个常规问题，而至于那些常规的部分，根本不需要仔细考虑，都是有现成的解决方案的。新手没有这种视角，往往在大量常规的细节上浪费时间，而抓不住导致问题的非常规的重点。 1date: 2018-09-20 先写再看书。对于像编译原理这种略微高深的知识，总要自己写过几遍，吃了一些苦头，才能知道为什么书里非要把算法那么设计结构那么安排。 光写代码也是没用的。同人于野一篇讲成年人还能不能进步的博客说得很好，知识分为舒适区，学习区和恐慌区。舒适区的意思就是，你很容易就可以做完。学习区的意思就是，你需要花费大量的智力才可以做完。恐慌区的意思就是，你根本不知道如何下手。当你在为了练习编写大量的代码的时候，你要尽量把题目都安排在学习区这里，这样才能让你进步快的同时，还不会被问题打倒，可以继续积累成就感了。 学生做这个最方便了，工作之后，如果刚好遇上个黑心公司要你天天加班，你反而没时间做学习区的内容了，公司给你的肯定是舒适区的苦力活。 对于像设计模式这种需要大量经验才可以领悟到的知识，如果你从来没独立写过一个上万行的程序，你觉得你能理解设计模式在讲什么吗？我觉得这种时候能做的也就是背下来，理解什么的都是扯淡。 先去写然后才能理解这是为什么 这句话我深表认同 Every program you write should be the hardest you’ve ever written(你写的每一个程序都应是昵称写过的最难的程序) 上学是为了在一个环境中更好的了解自我，换句话说如果我知道我接下来该做什么，那要不要继续读就无关紧要了. 1date: 2018-09-30 123456789乱哄哄你方唱罢我登场反认他乡是故乡甚荒唐到头来都是为他人做嫁衣裳 避免焦虑的最佳方法不是担心市场饱和，而是把自己从低端向中端，甚至高端提升。 大学之道，在明德，在亲民，在止于至善。 知止而后有定，定而后能静，静而后能安，安而后能虑，虑而后能得。 你对一个领域的热情可以反映在写论文、玩博客、出书、也可以体现在主动揽活，业余时间自学。热情是骗不了人的： 去阅读一本书或一篇paper肯定是带着问题驱动型读，不会是为读而读，这样挺水的。也会阅后即忘。","categories":[{"name":"Random Thoughts","slug":"Random-Thoughts","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/"},{"name":"2018","slug":"Random-Thoughts/2018","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/2018/"}],"tags":[{"name":"Essay","slug":"Essay","permalink":"http://muxueweiyu.github.io/tags/Essay/"}]}],"categories":[{"name":"professional","slug":"professional","permalink":"http://muxueweiyu.github.io/categories/professional/"},{"name":"effience","slug":"professional/effience","permalink":"http://muxueweiyu.github.io/categories/professional/effience/"},{"name":"People that affect me","slug":"People-that-affect-me","permalink":"http://muxueweiyu.github.io/categories/People-that-affect-me/"},{"name":"Program","slug":"Program","permalink":"http://muxueweiyu.github.io/categories/Program/"},{"name":"C++","slug":"Program/C","permalink":"http://muxueweiyu.github.io/categories/Program/C/"},{"name":"Random Thoughts","slug":"Random-Thoughts","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/"},{"name":"2021","slug":"Random-Thoughts/2021","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/2021/"},{"name":"math","slug":"professional/math","permalink":"http://muxueweiyu.github.io/categories/professional/math/"},{"name":"话题集","slug":"Random-Thoughts/话题集","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/%E8%AF%9D%E9%A2%98%E9%9B%86/"},{"name":"法律","slug":"professional/法律","permalink":"http://muxueweiyu.github.io/categories/professional/%E6%B3%95%E5%BE%8B/"},{"name":"工作","slug":"professional/工作","permalink":"http://muxueweiyu.github.io/categories/professional/%E5%B7%A5%E4%BD%9C/"},{"name":"仰望星空","slug":"professional/仰望星空","permalink":"http://muxueweiyu.github.io/categories/professional/%E4%BB%B0%E6%9C%9B%E6%98%9F%E7%A9%BA/"},{"name":"SQL","slug":"Program/SQL","permalink":"http://muxueweiyu.github.io/categories/Program/SQL/"},{"name":"JS","slug":"Program/JS","permalink":"http://muxueweiyu.github.io/categories/Program/JS/"},{"name":"code practice","slug":"Program/code-practice","permalink":"http://muxueweiyu.github.io/categories/Program/code-practice/"},{"name":"C#","slug":"Program/C","permalink":"http://muxueweiyu.github.io/categories/Program/C/"},{"name":"CF计划","slug":"Program/CF计划","permalink":"http://muxueweiyu.github.io/categories/Program/CF%E8%AE%A1%E5%88%92/"},{"name":"Linux","slug":"Program/Linux","permalink":"http://muxueweiyu.github.io/categories/Program/Linux/"},{"name":"硬件编程","slug":"Program/硬件编程","permalink":"http://muxueweiyu.github.io/categories/Program/%E7%A1%AC%E4%BB%B6%E7%BC%96%E7%A8%8B/"},{"name":"Python","slug":"Program/Python","permalink":"http://muxueweiyu.github.io/categories/Program/Python/"},{"name":"design-document","slug":"professional/design-document","permalink":"http://muxueweiyu.github.io/categories/professional/design-document/"},{"name":"Java","slug":"Program/Java","permalink":"http://muxueweiyu.github.io/categories/Program/Java/"},{"name":"本专业吧","slug":"professional/本专业吧","permalink":"http://muxueweiyu.github.io/categories/professional/%E6%9C%AC%E4%B8%93%E4%B8%9A%E5%90%A7/"},{"name":"2020","slug":"Random-Thoughts/2020","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/2020/"},{"name":"2019","slug":"Random-Thoughts/2019","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/2019/"},{"name":"Tang and Song","slug":"Tang-and-Song","permalink":"http://muxueweiyu.github.io/categories/Tang-and-Song/"},{"name":"2018","slug":"Random-Thoughts/2018","permalink":"http://muxueweiyu.github.io/categories/Random-Thoughts/2018/"}],"tags":[{"name":"软件","slug":"软件","permalink":"http://muxueweiyu.github.io/tags/%E8%BD%AF%E4%BB%B6/"},{"name":"affect","slug":"affect","permalink":"http://muxueweiyu.github.io/tags/affect/"},{"name":"people","slug":"people","permalink":"http://muxueweiyu.github.io/tags/people/"},{"name":"有趣","slug":"有趣","permalink":"http://muxueweiyu.github.io/tags/%E6%9C%89%E8%B6%A3/"},{"name":"编程","slug":"编程","permalink":"http://muxueweiyu.github.io/tags/%E7%BC%96%E7%A8%8B/"},{"name":"Essay","slug":"Essay","permalink":"http://muxueweiyu.github.io/tags/Essay/"},{"name":"心流","slug":"心流","permalink":"http://muxueweiyu.github.io/tags/%E5%BF%83%E6%B5%81/"},{"name":"美学","slug":"美学","permalink":"http://muxueweiyu.github.io/tags/%E7%BE%8E%E5%AD%A6/"},{"name":"教育","slug":"教育","permalink":"http://muxueweiyu.github.io/tags/%E6%95%99%E8%82%B2/"},{"name":"地理，地图","slug":"地理，地图","permalink":"http://muxueweiyu.github.io/tags/%E5%9C%B0%E7%90%86%EF%BC%8C%E5%9C%B0%E5%9B%BE/"},{"name":"美","slug":"美","permalink":"http://muxueweiyu.github.io/tags/%E7%BE%8E/"},{"name":"思考","slug":"思考","permalink":"http://muxueweiyu.github.io/tags/%E6%80%9D%E8%80%83/"},{"name":"专业，素养","slug":"专业，素养","permalink":"http://muxueweiyu.github.io/tags/%E4%B8%93%E4%B8%9A%EF%BC%8C%E7%B4%A0%E5%85%BB/"},{"name":"文学，历史","slug":"文学，历史","permalink":"http://muxueweiyu.github.io/tags/%E6%96%87%E5%AD%A6%EF%BC%8C%E5%8E%86%E5%8F%B2/"},{"name":"隐居","slug":"隐居","permalink":"http://muxueweiyu.github.io/tags/%E9%9A%90%E5%B1%85/"},{"name":"星空","slug":"星空","permalink":"http://muxueweiyu.github.io/tags/%E6%98%9F%E7%A9%BA/"},{"name":"思想","slug":"思想","permalink":"http://muxueweiyu.github.io/tags/%E6%80%9D%E6%83%B3/"},{"name":"思维，逻辑","slug":"思维，逻辑","permalink":"http://muxueweiyu.github.io/tags/%E6%80%9D%E7%BB%B4%EF%BC%8C%E9%80%BB%E8%BE%91/"},{"name":"program","slug":"program","permalink":"http://muxueweiyu.github.io/tags/program/"},{"name":"SQL","slug":"SQL","permalink":"http://muxueweiyu.github.io/tags/SQL/"},{"name":"Tool","slug":"Tool","permalink":"http://muxueweiyu.github.io/tags/Tool/"},{"name":"code","slug":"code","permalink":"http://muxueweiyu.github.io/tags/code/"},{"name":"1","slug":"1","permalink":"http://muxueweiyu.github.io/tags/1/"},{"name":"2","slug":"2","permalink":"http://muxueweiyu.github.io/tags/2/"},{"name":"3","slug":"3","permalink":"http://muxueweiyu.github.io/tags/3/"},{"name":"thinking","slug":"thinking","permalink":"http://muxueweiyu.github.io/tags/thinking/"},{"name":"writing","slug":"writing","permalink":"http://muxueweiyu.github.io/tags/writing/"},{"name":"skill","slug":"skill","permalink":"http://muxueweiyu.github.io/tags/skill/"},{"name":"demo","slug":"demo","permalink":"http://muxueweiyu.github.io/tags/demo/"},{"name":"logic","slug":"logic","permalink":"http://muxueweiyu.github.io/tags/logic/"},{"name":"learn","slug":"learn","permalink":"http://muxueweiyu.github.io/tags/learn/"},{"name":"System","slug":"System","permalink":"http://muxueweiyu.github.io/tags/System/"},{"name":"Linux","slug":"Linux","permalink":"http://muxueweiyu.github.io/tags/Linux/"},{"name":"Program","slug":"Program","permalink":"http://muxueweiyu.github.io/tags/Program/"},{"name":"efficiency","slug":"efficiency","permalink":"http://muxueweiyu.github.io/tags/efficiency/"},{"name":"FQA","slug":"FQA","permalink":"http://muxueweiyu.github.io/tags/FQA/"},{"name":"想法","slug":"想法","permalink":"http://muxueweiyu.github.io/tags/%E6%83%B3%E6%B3%95/"},{"name":"一切可能","slug":"一切可能","permalink":"http://muxueweiyu.github.io/tags/%E4%B8%80%E5%88%87%E5%8F%AF%E8%83%BD/"},{"name":"想法，实践","slug":"想法，实践","permalink":"http://muxueweiyu.github.io/tags/%E6%83%B3%E6%B3%95%EF%BC%8C%E5%AE%9E%E8%B7%B5/"},{"name":"Efficiency","slug":"Efficiency","permalink":"http://muxueweiyu.github.io/tags/Efficiency/"},{"name":"Summary","slug":"Summary","permalink":"http://muxueweiyu.github.io/tags/Summary/"},{"name":"Classical","slug":"Classical","permalink":"http://muxueweiyu.github.io/tags/Classical/"},{"name":"culture","slug":"culture","permalink":"http://muxueweiyu.github.io/tags/culture/"},{"name":"Poetry","slug":"Poetry","permalink":"http://muxueweiyu.github.io/tags/Poetry/"}]}