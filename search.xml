<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Song</title>
    <url>/2019/07/18/Tang%20and%20Song/Song/</url>
    <content><![CDATA[<p>复杂感叹的时代，有太多的遗憾。</p>
<p>少年不识愁滋味，爱上层楼。爱上层楼，为赋新诗强说愁。</p>
<p>而今识尽愁滋味，欲说还休。欲说还休，却道“天凉好个秋”！</p>
<span id="more"></span>

<h2 id="江城子·乙卯正月二十日夜记梦"><a href="#江城子·乙卯正月二十日夜记梦" class="headerlink" title="江城子·乙卯正月二十日夜记梦"></a><a href="https://so.gushiwen.org/shiwenv_567fcf6ffefb.aspx"><strong>江城子·乙卯正月二十日夜记梦</strong></a></h2><p><a href="https://so.gushiwen.org/shiwen/default.aspx?cstr=%E5%AE%8B%E4%BB%A3">宋代</a>：<a href="https://so.gushiwen.org/search.aspx?value=%E8%8B%8F%E8%BD%BC">苏轼</a></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">十年生死两茫茫，不思量，自难忘。千里孤坟，无处话凄凉。纵使相逢应不识，尘满面，鬓如霜。</span><br><span class="line"></span><br><span class="line">夜来幽梦忽还乡，小轩窗，正梳妆。相顾无言，惟有泪千行。料得年年肠断处，明月夜，短松冈。(肠断 一作：断肠)</span><br></pre></td></tr></table></figure>

<h2 id="念奴娇·中秋"><a href="#念奴娇·中秋" class="headerlink" title="念奴娇·中秋"></a><a href="https://so.gushiwen.org/shiwenv_f0640b25bfea.aspx"><strong>念奴娇·中秋</strong></a></h2><p><a href="https://so.gushiwen.org/shiwen/default.aspx?cstr=%E5%AE%8B%E4%BB%A3">宋代</a>：<a href="https://so.gushiwen.org/search.aspx?value=%E8%8B%8F%E8%BD%BC">苏轼</a></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">凭高眺远，见长空万里，云无留迹。桂魄飞来，光射处，冷浸一天秋碧。玉宇琼楼，乘鸾来去，人在清凉国。江山如画，望中烟树历历。</span><br><span class="line"></span><br><span class="line">我醉拍手狂歌，举杯邀月，对影成三客。起舞徘徊风露下，今夕不知何夕？便欲乘风，翻然归去，何用骑鹏翼。水晶宫里，一声吹断横笛。</span><br></pre></td></tr></table></figure>

<h2 id="於潜僧绿筠轩"><a href="#於潜僧绿筠轩" class="headerlink" title="於潜僧绿筠轩"></a><a href="https://so.gushiwen.org/shiwenv_62b5d8ce8eb3.aspx"><strong>於潜僧绿筠轩</strong></a></h2><p><a href="https://so.gushiwen.org/shiwen/default.aspx?cstr=%E5%AE%8B%E4%BB%A3">宋代</a>：<a href="https://so.gushiwen.org/search.aspx?value=%E8%8B%8F%E8%BD%BC">苏轼</a></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">宁可食无肉，不可居无竹。</span><br><span class="line">无肉令人瘦，无竹令人俗。</span><br><span class="line">人瘦尚可肥，士俗不可医。</span><br><span class="line">旁人笑此言，似高还似痴。</span><br><span class="line">若对此君仍大嚼，世间那有扬州鹤？</span><br></pre></td></tr></table></figure>

<p>唐多令 芦叶满汀洲</p>
<p>刘过</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">芦叶满汀洲，寒沙带浅流。二十年重过南楼。柳下系船犹未稳，能几日，又中秋。</span><br><span class="line"></span><br><span class="line">黄鹤断矶头，故人今在否？旧江山浑是新愁。欲买桂花同载酒，终不似，少年游。</span><br></pre></td></tr></table></figure>

<p>摸鱼儿 雁丘词</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">问世间，情是何物，直教生死相许？</span><br><span class="line"></span><br><span class="line">天南地北双飞客，老翅几回寒暑。</span><br><span class="line"></span><br><span class="line">欢乐趣，离别苦，就中更有痴儿女。</span><br><span class="line"></span><br><span class="line">君应有语：渺万里层云，千山暮雪，只影向谁去？</span><br><span class="line"></span><br><span class="line">横汾路，寂寞当年箫鼓，荒烟依旧平楚。</span><br><span class="line"></span><br><span class="line">招魂楚些何嗟及，山鬼暗啼风雨。</span><br><span class="line"></span><br><span class="line">天也妒，未信与，莺儿燕子俱黄土。</span><br><span class="line"></span><br><span class="line">千秋万古，为留待骚人，狂歌痛饮，来访雁丘处。</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tang and Song</category>
      </categories>
      <tags>
        <tag>Classical</tag>
        <tag>culture</tag>
        <tag>Poetry</tag>
      </tags>
  </entry>
  <entry>
    <title>Tang</title>
    <url>/2019/08/18/Tang%20and%20Song/Tang/</url>
    <content><![CDATA[<p>文化之瑰宝，不可弃之于神坛之上，当用心寻之。</p>
<span id="more"></span>

<h2 id="将进酒"><a href="#将进酒" class="headerlink" title="将进酒"></a><a href="https://so.gushiwen.org/shiwenv_ee16df5673bc.aspx"><strong>将进酒</strong></a></h2><p><a href="https://so.gushiwen.org/shiwen/default.aspx?cstr=%E5%94%90%E4%BB%A3">唐代</a>：<a href="https://so.gushiwen.org/search.aspx?value=%E6%9D%8E%E7%99%BD">李白</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">君不见黄河之水天上来，奔流到海不复回。</span><br><span class="line">君不见高堂明镜悲白发，朝如青丝暮成雪。</span><br><span class="line">人生得意须尽欢，莫使金樽空对月。</span><br><span class="line">天生我材必有用，千金散尽还复来。</span><br><span class="line">烹羊宰牛且为乐，会须一饮三百杯。</span><br><span class="line">岑夫子，丹丘生，将进酒，杯莫停。</span><br><span class="line">与君歌一曲，请君为我倾耳听。(倾耳听 一作：侧耳听)</span><br><span class="line">钟鼓馔玉不足贵，但愿长醉不愿醒。(不足贵 一作：何足贵；不愿醒 一作：不复醒)</span><br><span class="line">古来圣贤皆寂寞，惟有饮者留其名。(古来 一作：自古；惟 通：唯)</span><br><span class="line">陈王昔时宴平乐，斗酒十千恣欢谑。</span><br><span class="line">主人何为言少钱，径须沽取对君酌。</span><br><span class="line">五花马、千金裘，呼儿将出换美酒，与尔同销万古愁。</span><br></pre></td></tr></table></figure>

<h2 id="三五七言-秋风词"><a href="#三五七言-秋风词" class="headerlink" title="三五七言/秋风词"></a><a href="https://so.gushiwen.org/shiwenv_169ff9fbafcb.aspx"><strong>三五七言/秋风词</strong></a></h2><p><a href="https://so.gushiwen.org/shiwen/default.aspx?cstr=%E5%94%90%E4%BB%A3">唐代</a>：<a href="https://so.gushiwen.org/search.aspx?value=%E6%9D%8E%E7%99%BD">李白</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">秋风清，秋月明，</span><br><span class="line">落叶聚还散，寒鸦栖复惊。</span><br><span class="line">相思相见知何日？此时此夜难为情！</span><br><span class="line">入我相思门，知我相思苦，</span><br><span class="line">长相思兮长相忆，短相思兮无穷极，</span><br><span class="line">早知如此绊人心，何如当初莫相识。</span><br></pre></td></tr></table></figure>

<h2 id="月下独酌·其二"><a href="#月下独酌·其二" class="headerlink" title="月下独酌·其二"></a><a href="https://so.gushiwen.org/shiwenv_a1361461c793.aspx"><strong>月下独酌·其二</strong></a></h2><p><a href="https://so.gushiwen.org/shiwen/default.aspx?cstr=%E5%94%90%E4%BB%A3">唐代</a>：<a href="https://so.gushiwen.org/search.aspx?value=%E6%9D%8E%E7%99%BD">李白</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">天若不爱酒，酒星不在天。</span><br><span class="line">地若不爱酒，地应无酒泉。</span><br><span class="line">天地既爱酒，爱酒不愧天。</span><br><span class="line">已闻清比圣，复道浊如贤。</span><br><span class="line">贤圣既已饮，何必求神仙。</span><br><span class="line">三杯通大道，一斗合自然。</span><br><span class="line">但得酒中趣，勿为醒者传。</span><br><span class="line"></span><br><span class="line">且乐生前一杯酒，何须身后千载名？</span><br><span class="line"></span><br><span class="line">吾观自古贤达人，功成不退皆殒身。</span><br><span class="line">子胥既弃吴江上，屈原终投湘水滨。</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tang and Song</category>
      </categories>
      <tags>
        <tag>Classical</tag>
        <tag>culture</tag>
        <tag>Poetry</tag>
      </tags>
  </entry>
  <entry>
    <title>工作环境的备份</title>
    <url>/2021/03/23/professional/%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<p>一切以提高效率为基准</p>
<p><a href="https://tantai.lanzous.com/ieFdgnh9c5g">永久背景</a></p>
<span id="more"></span>

<h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><ul>
<li><p><a href="#%E7%94%B5%E8%84%91%E5%8A%9E%E5%85%AC%E7%8E%AF%E5%A2%83%E5%A4%87%E4%BB%BD">电脑办公软件备份</a></p>
</li>
<li><p><a href="#%E4%BC%91%E9%97%B2%E5%A8%B1%E4%B9%90%E9%9B%86%E5%90%88">休闲娱乐集合</a></p>
</li>
<li><p><a href="#%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3%E6%B1%87%E6%80%BB">技术文档汇总</a></p>
</li>
<li><p><a href="#%E7%8E%AF%E5%A2%83%E5%A4%87%E4%BB%BD%E5%8F%8A%E9%85%8D%E7%BD%AE">环境备份及配置</a></p>
</li>
</ul>
<h2 id="电脑办公软件"><a href="#电脑办公软件" class="headerlink" title="电脑办公软件"></a>电脑办公软件</h2><p>从效率提升的角度来考虑事情。</p>
<h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><ul>
<li><p><a href="https://www.microsoft.com/zh-cn/edge/business/download">Microsoft edge</a>最新版下载地址</p>
</li>
<li><p><a href="https://www.mozilla.org/en-US/firefox/all/#product-desktop-release">Firefox</a></p>
</li>
<li><p><a href="https://windowstan.com/software/chrome-msi/">Google Chrome</a></p>
</li>
</ul>
<p>自用的浏览器就是这些了，浏览器内的配置网络之间都可以账号同步，就没必要多说了。</p>
<p>主要插件及<a href="https://greasyfork.org/zh-CN">脚本</a>及脚本使用</p>
<ul>
<li><a href="#https://microsoftedge.microsoft.com/addons/detail/dark-reader/ifoakfbpdcdoeenechcleahebpibofpc?hl=zh-CN">Dark Reader</a></li>
<li><a href="#https://microsoftedge.microsoft.com/addons/detail/ublock-origin/odfafepnkmbhccpbejgmiehpchacaeak?hl=zh-CN">uBlock Origin</a></li>
<li><a href="#https://microsoftedge.microsoft.com/addons/detail/%E6%B2%99%E6%8B%89%E6%9F%A5%E8%AF%8D%E8%81%9A%E5%90%88%E8%AF%8D%E5%85%B8%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91/idghocbbahafpfhjnfhpbfbmpegphmmp?hl=zh-CN">沙拉查词</a></li>
<li><a href="#https://microsoftedge.microsoft.com/addons/detail/tampermonkey/iikmkjmpaadaobahmlepeloendndfphd?hl=zh-CN">Tampermonkey</a></li>
</ul>
<h3 id="效率工具"><a href="#效率工具" class="headerlink" title="效率工具"></a>效率工具</h3><ul>
<li><a href="#https://getquicker.net/">Quicker</a></li>
<li><a href="#https://www.voidtools.com/zh-cn/">Everything</a></li>
<li><a href="#https://netspeedmonitor.net/">netspeedmonitor</a></li>
<li><a href="#https://sourceforge.net/projects/ditto-cp/">ditto</a></li>
<li><a href="#http://www.kbtool.cn/down.php">kaying_tools</a></li>
<li><a href="#https://calibre-ebook.com/download_windows">calibre</a></li>
<li><a href="#https://www.chuyu.me/zh-Hans/">DISM++</a></li>
<li><a href="#https://www.ccleaner.com/ccleaner/download/standard">CCleaner</a></li>
<li><a href="#https://www.7-zip.org/download.html">7-zip</a></li>
<li><a href="#https://www.sumatrapdfreader.org/download-free-pdf-viewer.html">sumatrapdf</a></li>
<li><a href="#https://www.teamviewer.com/en-us/download/windows/">teamviewer</a></li>
<li><a href="#https://pan.baidu.com/download">百度云盘</a></li>
<li><a href="#https://mpv.io/installation/">mpv</a></li>
<li><a href="#https://www.internetdownloadmanager.com/download.html">IDM</a></li>
<li><a href="#https://www.huorong.cn/person5.html">火绒</a></li>
<li><a href="http://potplayer.daum.net/">Potplayer</a></li>
<li><a href="https://qwerty-learner.vercel.app/">Qwerty-Learner</a></li>
<li><a href="https://atom.io/">ATOM</a></li>
</ul>
<h3 id="办公软件"><a href="#办公软件" class="headerlink" title="办公软件"></a>办公软件</h3><ul>
<li><a href="#https://www.microsoftstore.com.cn/software/office">office</a></li>
<li><a href="#https://pc.weixin.qq.com/?t=win_weixin&platform=wx&lang=zh_TW">微信</a></li>
<li><a href="#https://tim.qq.com/download.html">tim</a></li>
<li><a href="#https://www.dingtalk.com/download">钉钉</a></li>
<li><a href="#www.jianguoyun.com">坚果云</a></li>
</ul>
<h3 id="编程工具"><a href="#编程工具" class="headerlink" title="编程工具"></a>编程工具</h3><ul>
<li><a href="#https://code.visualstudio.com/download">VS code</a></li>
<li><a href="#https://visualstudio.microsoft.com/zh-hans/vs/">VS 2019</a></li>
<li><a href="#https://developer.android.com/studio?hl=id">Andriod Studio</a></li>
<li><a href="#https://unity3d.com/cn/get-unity/download">Unity3D</a></li>
<li><a href="#https://www.eclipse.org/downloads/">eclipse</a></li>
<li><a href="#https://typora.io/#windows">Typora</a></li>
<li><a href="#https://www.mongodb.com/try/download/community">Mongo</a></li>
<li><a href="#https://www.microsoft.com/en-us/p/ubuntu/9nblggh4msv6?activetab=pivot:overviewtab">WSL-Ubuntu</a></li>
<li><a href="#https://git-scm.com/download/win">git</a></li>
<li><a href="#http://mingw-w64.org/doku.php/download/win-builds">mingw-w64</a></li>
<li><a href="#https://www.python.org/downloads/">Python</a></li>
<li><a href="#https://nodejs.org/en/">nodejs</a></li>
<li><a href="#https://zhs.moo0.com/">Moo0</a></li>
</ul>
<p>国内使用</p>
<h3 id="镜像站"><a href="#镜像站" class="headerlink" title="镜像站"></a>镜像站</h3><ul>
<li><a href="https://mirrors.huaweicloud.com/">华为开源镜像站</a></li>
<li><a href="https://developer.aliyun.com/special/mirrors/notice">阿里巴巴开源镜像站</a></li>
<li><a href="https://mirrors.tuna.tsinghua.edu.cn/">清华大学开源软件镜像站</a></li>
<li><a href="http://mirrors.163.com/">网易开源镜像站</a></li>
<li><a href="http://mirrors.ustc.edu.cn/">中国科学技术大学开源镜像站</a></li>
<li><a href="http://mirrors.zju.edu.cn/">浙江大学开源镜像站</a></li>
</ul>
<h2 id="休闲娱乐集合"><a href="#休闲娱乐集合" class="headerlink" title="休闲娱乐集合"></a>休闲娱乐集合</h2><ul>
<li><a href="https://www.bilibili.com/">bilibili</a></li>
<li><a href="https://www.minecraft.net/zh-hans/get-minecraft">Minecraft</a></li>
<li><a href="https://store.steampowered.com/about/">Steam</a></li>
<li><a href="https://www.epicgames.com/store/en-US/browse?sortBy=releaseDate&sortDir=DESC&pageSize=30">Epic</a></li>
<li><a href="https://ubisoftconnect.com/zh-CN/">Ubisoft</a></li>
<li><a href="https://www.i4.cn/pro_pc.html">爱思助手</a></li>
</ul>
<h2 id="第三方网盘重备份"><a href="#第三方网盘重备份" class="headerlink" title="第三方网盘重备份"></a>第三方网盘重备份</h2><p><a href="https://tantai.lanzous.com/iS8Jlneafgd">mpv</a><br><a href="https://tantai.lanzous.com/iAMW9neae5g">baa</a><br><a href="https://tantai.lanzous.com/iPIPSneadxi">baaw</a></p>
]]></content>
      <categories>
        <category>professional</category>
      </categories>
      <tags>
        <tag>Efficiency</tag>
        <tag>Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>byvoid</title>
    <url>/2018/12/18/People%20that%20affect%20me/byvoid/</url>
    <content><![CDATA[<p>我希望可以站在前人的肩膀上注目远望，看看这万里风光，是否如我所想的一般。</p>
<span id="more"></span>

<h2 id="时光易逝"><a href="#时光易逝" class="headerlink" title="时光易逝"></a>时光易逝</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">劝君莫惜金缕衣</span><br><span class="line">劝君惜取少年时</span><br><span class="line">花开堪折直须折</span><br><span class="line">莫待无花空折枝</span><br></pre></td></tr></table></figure>

<p>曾经看过张昆玮学长的<a href="http://www.artofproblemsolving.com/blog/54270">一篇日志</a>。一个朋友在他29岁生日的时候，给过他年轻的朋友们一句话：「Gaudeāmus igitur, iuvenēs dum sumus（拉丁文）」，翻译是「在我们还年轻的时候，让我们快乐吧。」，换成一首诗就是「花开堪折直须折，莫待无花空折枝。」想想看，我们正当人生中最美好的岁月，为什么不去做自己喜欢的事情呢？不要被所谓的现实羁绊，试想人在年轻的时候如果还有如此多的「不能」，那么将来的「不能」祗会更多。所以，大胆去做吧，无需后悔。</p>
]]></content>
      <categories>
        <category>People that affect me</category>
      </categories>
      <tags>
        <tag>affect</tag>
        <tag>people</tag>
      </tags>
  </entry>
  <entry>
    <title>vczh</title>
    <url>/2019/02/18/People%20that%20affect%20me/vczh/</url>
    <content><![CDATA[<p>带逛，不需要刻意为之，听其言，观其行做到即可。</p>
<span id="more"></span>

<h2 id="成长"><a href="#成长" class="headerlink" title="成长"></a>成长</h2><p>直觉一半来自于举一反三，举一反三一半来自于那个一，而当你对很多问题都有那个一的时候显然是因为你这些问题都碰过，碰过问题跟只学会知识还不一样，你还要解决他们。那如何才能碰过并解决大量的问题呢？唯一的方法就是熬过那一大段时间，通常是十几二十年。你光是聪明，可以学会很多东西，但是由于实践的时间不够，仍然不足已成为一个牛逼的程序员。<strong>所以牛逼本身不是一个可以速成的东西，它是知识和经验的积累，然后是运用你的知识和经验的熟练程度。</strong></p>
<p>整天搞windows，遇到需要用linux的时候也只是问问人看看说明书（不过linux好像没有说明书）的事情了。因为本质困难的东西你都会了，剩下的这些操作问题，只是熟练不熟练的区别而已。</p>
<p>游戏做完了不能满足于做完，就要开始想模块化的问题了。怎么做一个游戏用的GUI库？怎么做一个游戏用的脚本引擎？怎么给他们制作工具？怎么写一个游戏引擎？怎么写一个RPG Maker？每一个问题想做简单也可以做简单，想做复杂也可以做的很复杂。于是当我问题一个一个的解决之后，都已经来了M$RA了，这也是我为什么后来会做<a href="https://link.zhihu.com/?target=http://www.gaclib.net">GacUI</a> 和各种奇怪的编译器研究各种奇怪的类型系统的原因了。当然现在做到这地步都不是仅仅为了游戏而做，当时当你做出一个游戏可以用得东西之后，你就要开始想怎么把它做成通用的，使得开发软件也可以用。<strong>每一个问题都最终上升了一个台阶，而你觉得容易的问题就不要浪费时间去解决了</strong>。</p>
<p>你需要花时间做什么，取决于这个问题是不是够难，是不是刚刚好你可以做出来，再难一点点你就做不出来了</p>
<p>从一个解决问题的程序员，变成一个研究编程本身的程序员了。</p>
<ul>
<li>学习编程语言，尽量挑选C++等很有用、不好学、不时髦的语言，避免自己分心，有利于克服人类的劣根性。</li>
<li>算法数据结构设计模式编译原理，都有经典书籍。</li>
<li>勤奋的练习。命令行刷几道题练练手感就好了，接下来就是从贪吃蛇和记事本开始抄，你可以一路抄到很远，譬如做一个vscode。</li>
</ul>
<p>自己做vscode的时候有一个要点，除了windows api以外不要使用任何其他东西，需要什么全都自己来，这才是练习。你的目标不是开发一个有用的编辑器，你的目标也不是学习对马上工作有用的技能，你的目标是练习编程。要是真的好用，你可以自己用。</p>
<p>学习编程，就要从磨螺母到锤车床到风洞实验室到光速发动机都自己一路做过来，掌握的技能才扎实，你可以从22岁做到92岁，不管即使发生什么变化，都可以从容应对，轻松跟上世界的发展。只会用别人的工具而不会自己造工具的，只会疲于奔命，在35岁的时候还是只能干应届生的活，因为体力不支惨遭淘汰。</p>
<p>变量名用英文的话，写代码的时候就不要用中文思考。你可以每天下班在家4小时，写自己的开源项目，文档全用英文，锻炼自己的语言能力。</p>
<p>另外，设计模式也是一套词汇表，建议先掌握。这样写出来的代码，同样是懂设计模式的人来看，理解起来轻松很多。</p>
<ul>
<li>one man army</li>
<li>There’s only one way to learn to program: writing a lot of code.</li>
</ul>
]]></content>
      <categories>
        <category>People that affect me</category>
      </categories>
      <tags>
        <tag>affect</tag>
        <tag>people</tag>
      </tags>
  </entry>
  <entry>
    <title>Learn-Linux</title>
    <url>/2021/03/26/Program/Linux/Learn-Linux/</url>
    <content><![CDATA[<p>基础学习<a href="https://linuxjourney.com/">learning</a></p>
<p><a href="https://mirrors.edge.kernel.org/pub/linux/kernel/Historic/old-versions/">kernel</a></p>
<span id="more"></span>
]]></content>
      <categories>
        <category>Program</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>System</tag>
      </tags>
  </entry>
  <entry>
    <title>推荐</title>
    <url>/2018/10/18/People%20that%20affect%20me/%E6%8E%A8%E8%8D%90/</url>
    <content><![CDATA[<p>许多事情并不是立竿见影的影响，而是不断经历失败后再次看到之后才发觉原来如此。</p>
<span id="more"></span>

<h2 id="Why-Functional-Programming-Matters-阅读笔记"><a href="#Why-Functional-Programming-Matters-阅读笔记" class="headerlink" title="Why Functional Programming Matters 阅读笔记"></a>Why Functional Programming Matters 阅读笔记</h2><blockquote>
<p>本文是 Why Functional Programming Matters（为什么函数式编程很重要）的阅读笔记，用相对通俗的语言解读了这篇论文，并对我觉得重要的一些点做了一些解释。</p>
</blockquote>
<p>为什么函数式编程很重要?随着软件变得越来越复杂，良好地组织软件也越来越重要。一个组织良好的软件更容易编写调试，这种软件提供了一组可以复用的模块（module），这也降低了未来编写代码的代价。本文将说明，函数式编程语言的特色，尤其是高阶函数和惰性求值（high-order function and lazy evaluation），将会对模块化非常有利。<strong>因为模块化是软件开发成功的关键，所以函数式编程会在软件开发过程中具备很大的优势。</strong></p>
<p>模块化的过程是将问题分解成子问题，求解子问题，再将子问题的解结合（glue）起来的过程。怎么分解直接依赖于编程语言提供了怎样的结合方法。所以要增强模块化能力，需要提供新的结合方法。</p>
<p>模块化对编程很重要，模块化（modularity）不仅仅是模块（module）。</p>
<h2 id="Teach-Yourself-Programming-in-Ten-Years"><a href="#Teach-Yourself-Programming-in-Ten-Years" class="headerlink" title="Teach Yourself Programming in Ten Years"></a>Teach Yourself Programming in Ten Years</h2><p>为什么每个人都这么着急？走进任何书店，您将看到如何<em>在24小时内自学Java，</em>以及无穷无尽的变体，可以在几天或几小时内教授C，SQL，Ruby，算法等。</p>
<p>结论是要么人们急于学习编程，要么编程比其他任何东西都更容易学习。Felleisen <em>等。</em> 在他们的书《*<a href="http://www.ccs.neu.edu/home/matthias/HtDP2e/index.html">如何设计程序</a><em>》中对这种趋势表示</em><a href="http://www.ccs.neu.edu/home/matthias/HtDP2e/index.html">赞同</a><em>，当他们说“错误的编程很容易。</em>白痴<em>可以在</em>21天内<em>学习它，即使他们是</em>傻瓜*。” <a href="http://abstrusegoose.com/249">Abtruse Goose漫画</a>也受到了欢迎。</p>
<ul>
<li><p>自学：</p>
<p>  在24小时内，您将没有时间编写几个重要的程序，并从它们的成功和失败中学习。您将没有时间与经验丰富的程序员一起工作，也不了解在C ++环境中生活的感觉。简而言之，您将没有时间学习很多东西。因此，这本书只能说是肤浅的熟悉，而不是深刻的理解。正如亚历山大·波普（Alexander Pope）所说，学一点东西是一件危险的事情。</p>
</li>
<li><p>C++：<br>  在24小时内，您可能可以学习C ++的某些语法（如果您已经知道另一种语言），但是您对如何使用该语言的了解却不多。简而言之，如果您是一名Basic程序员，则可以学习使用C ++语法以Basic风格编写程序，但是您将无法了解C ++的优点（或缺点）。那有什么意义呢？</p>
</li>
</ul>
<p>艾伦·珀利斯（Alan Perlis）曾经说过：“一种不影响您对编程的思考方式的语言，是不值得了解的”。一个可能的观点是，您必须学习一小部分C ++（或更可能是JavaScript或Processing之类的东西），因为您需要与现有工具交互以完成特定任务。但是，那时您不会学习编程。您正在学习完成该任务。</p>
<h2 id="十年自学编程"><a href="#十年自学编程" class="headerlink" title="十年自学编程"></a>十年自学编程</h2><p>在下棋，音乐等众多领域中发展专业知识大约需要十年的时间。写作，电报操作，绘画，钢琴演奏，游泳，网球以及神经心理学和拓扑学研究。关键是<em>商议</em> 练习：不仅要一遍又一遍地做，还要挑战一项超越您当前能力的任务来挑战自己，尝试一下，分析执行前后的表现，并纠正任何错误。然后重复。再重复一次。似乎没有真正的捷径：即使是4岁的音乐天才莫扎特，也花了13年的时间才开始创作世界一流的音乐。在另一种类型中，甲壳虫乐队似乎爆出一连串的＃1热门歌曲，并在1964年的埃德·沙利文（Ed Sullivan）演出中露面。但是自1957年以来，他们一直在利物浦和汉堡的小型俱乐部里打球，尽管他们颇具吸引力在早期，他们的第一个重大成功就是<em>Sgt。Peppers</em>于1967年发行。</p>
<p><a href="http://www.amazon.com/Outliers-Story-Success-Malcolm-Gladwell/dp/0316017922">马尔科姆·格拉德威尔</a>尽管他专注于10,000小时（而不是10年），但他已经推广了这个想法。亨利·卡蒂埃·布雷森（Henri Cartier-Bresson，1908-2004年）的另一个标准是：“您的前10,000张照片是最糟糕的。” （他没想到数码相机会在一个星期内达到这个目标。）真正的专业知识可能需要一辈子：塞缪尔·约翰逊（Samuel Johnson（1709-1784））说：“任何部门的出色表现，只有靠一生；不应以较低的价格购买。” 乔uc（1340-1400）抱怨说：“莱夫（lyf）太短了，手工艺品那么久了。” 希波克拉底（约公元前400年）以“ ars longa，vita brevis”的摘录而闻名，它是“ Ars longa，vita brevis，occasio praeceps，experimentum perculosum，iudicium difficile”较长引语的一部分，在英语中译为“生命”。是短， 当然，没有一个数字可以作为最终答案：假设所有技能（例如编程，下棋，下棋和玩音乐）可能都需要完全相同的时间来掌握，这似乎是不合理的，也不会所有人都花费完全相同的时间。正如K.Anders Ericsson教授所说：“在大多数领域，即使是最有才华的个人也需要多少时间才能达到最高水平。令人难以置信的是，10,000小时的小时数使您感觉我们正在谈论多年每周10至20个小时，有些人会说这些是天赋最才华的人，仍然需要达到最高水平。”</p>
<h2 id="我想成为一名程序员"><a href="#我想成为一名程序员" class="headerlink" title="我想成为一名程序员"></a>我想成为一名程序员</h2><ul>
<li>获取感兴趣的，因为他很有趣，确保保持足够的乐趣，以便令我愿意投入十年/10,000小时的时间。</li>
<li>程序学习的最好方法就是边做边学。从技术上讲，“在一定范围内，个人的最高绩效不会根据扩展的经验而自动获得，但是，即使是经验丰富的个人，也可以通过有意改进来提高绩效水平。 ”</li>
<li>最有效的学习需要对特定个体具有适当难度级别的明确定义的任务，信息反馈以及重复和纠正错误的机会。</li>
<li>与程序员交流，阅读其他程序，这比任何书籍或培训课程都重要。</li>
<li>如果需要，可以在大学学习期间获得一些实习，无论如何，仅靠书籍学习是不够的。“计算机科学教育不能使任何人成为专业程序员，就像学习画笔和颜料怎么可能使某人成为专家画家一样。”</li>
<li>缺乏创意吗？与其他程序一起从事项目。在某些项目中成为最好的程序员；在其他人身上最糟糕。当您处于最佳状态时，就可以测试自己领导项目的能力，并用自己的远见激发他人。在最坏的情况下，您将学习大师的所作所为，并了解他们不喜欢做的事情（因为他们让您为他们做）。</li>
<li>了解别人编写的程序。看看当原始程序员不在时需要理解和修复它的过程。考虑如何设计您的程序，使那些在您之后维护它们的人更轻松。</li>
<li>学习至少六种编程语言，包括一种强调类抽象的语言（例如Java或C ++），一种强调功能抽象的语言（例如Lisp或ML或Haskell），一种支持语法抽象的语言（例如Lisp），一种支持声明性规范的语言（例如Prolog或C ++模板）。 ，并且强调并行性（例如Clojure或Go）。</li>
<li>计算机科学，了解计算机执行一条指令，从内存中获取一个单词（有或没有缓存未命中），从磁盘读取连续的单词以及在磁盘上寻找新位置需要多长时间。</li>
<li>语言的标准化，良好的意识，尽快开始语言标准化工作。考虑到所有这些，仅通过学习书籍就能取得多大的成绩值得怀疑。在我的第一个孩子出生之前，我阅读了所有“ <em>如何做”</em>书，仍然感到自己是一个笨手笨手的新手。30个月后，当我的第二个孩子到期时，我是否又回到书店复习了？否。相反，我依靠自己的个人经验，事实证明，与专家撰写的成千上万页相比，这对我来说更加有用和令人放心。</li>
</ul>
<p>弗雷德·布鲁克斯（Fred Brooks）在他的论文《*<a href="http://en.wikipedia.org/wiki/No_Silver_Bullet">无银子弹》中</a>* 确定了一个由三部分组成的计划，以寻找优秀的软件设计师：</p>
<ul>
<li>尽早系统地确定顶级设计师。</li>
<li>指派职业指导者负责潜在客户的发展，并仔细保存职业档案。</li>
<li>为成长中的设计师提供互动和相互刺激的机会。</li>
</ul>
<p>假设某些人已经具备成为优秀设计师所需的素质；工作是适当地哄骗他们。更简洁地说：“每个人都可以雕刻：米开朗基罗必须被教导如何不做。伟大的程序员也是如此。” 佩利斯（Perlis）说，伟人的内在素质超越了他们的训练。但是质量从何而来？是天生的吗？还是他们通过勤奋发展？正如奥古斯特·古斯托（<em>Ratatouille</em>的虚构厨师 ）所说，“任何人都可以做饭，但只有无所畏惧的人才能做得好。” 我将其更多地视为愿意将一生的大部分时间投入到思考实践中。但也许 <em>无所畏惧</em>是一种概括的方式。或者，正如古斯托（Gusteau）的批评家安东·埃戈（Anton Ego）所说：“并非每个人都能成为一名伟大的艺术家，但是伟大的艺术家可以来自任何地方。”</p>
<p>因此，继续购买那本Java / Ruby / Javascript / PHP书；您可能会从中受益。但是您不会在24小时或21天内改变自己的生活，也不会改变自己真正的整体专业知识。如何努力在24个月内不断改进？好吧，现在您开始有所建树…</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li>本杰明·布鲁姆（ed）*<a href="http://www.amazon.com/exec/obidos/ASIN/034531509X">《年轻人的发展才能》</a>*，巴兰廷，1985年。</li>
<li>布鲁克斯，弗雷德，《*<a href="http://citeseer.nj.nec.com/context/7718/0">无银子弹》</a>*，IEEE计算机，第1卷。20号 1987年第4期，第4页。10-19。</li>
<li>Bryan，WL＆Harter，N.“关于电报语言的研究：习性等级的习得。Psychology <em>Review</em>，1899，8，345-375</li>
<li>海斯（John Hayes），《*<a href="http://www.amazon.com/exec/obidos/ASIN/0805803092">完成问题解决者》（</a>* Lawrence Erlbaum），1989年。</li>
<li>Lave，Jean，《<a href="http://www.amazon.com/exec/obidos/ASIN/0521357349">实践中的认知：日常生活中的思维，数学和文化》</a>，剑桥大学出版社，1988年。</li>
</ul>
<h2 id="附录：语言选择"><a href="#附录：语言选择" class="headerlink" title="附录：语言选择"></a>附录：语言选择</h2><p>先学习哪种编程语言。是没有答案，但可以考虑以下几点：</p>
<ul>
<li>使用你的朋友*。当被问及“我应该使用哪种操作系统，Windows，Unix或Mac？”时，我的回答通常是：“使用您的朋友使用的任何软件”。从朋友那里学习所获得的优势将抵消操作系统之间或编程语言之间的任何内在差异。还请考虑您的未来朋友：如果继续，您将成为程序员社区的一部分。您选择的语言是一个正在成长的大型社区还是一个濒临灭绝的社区？是否有书籍，网站和在线论坛可提供答案？您喜欢那些论坛中的人吗？</li>
<li>保持简单*。诸如C ++和Java之类的编程语言是由经验丰富的程序员组成的大型团队设计的，这些团队关心其代码的运行时效率。结果，这些语言具有针对这些情况设计的复杂部分。您担心要学习编程。您不需要那种麻烦。您需要一种被设计为易于由单个新程序员学习和记住的语言。</li>
<li>玩。宁愿学习弹钢琴的方式：通常的互动方式，即敲击琴键后便会听到每个音符，或者是“批处理”模式，即在完成整首歌曲后才听到音符？显然，交互式模式使钢琴和编程学习变得更加容易。坚持使用交互式模式的语言并使用它。</li>
</ul>
<p>给定这些条件，我对第一种编程语言的建议是**<a href="http://python.org/">Python</a>**或 **<a href="http://www.schemers.org/">Scheme</a>**。另一个选择是Javascript，不是因为它是为初学者精心设计的，而是因为有许多在线教程供您使用，例如 <a href="https://www.khanacademy.org/computing/cs/programming">Khan Academy的教程</a>。但是您的情况可能会有所不同，还有其他不错的选择。如果您的年龄是个位数，则您可能更喜欢 <a href="http://alice.org/">Alice</a>或<a href="http://www.squeak.org/">Squeak</a> 或<a href="https://blockly-demo.appspot.com/static/apps/index.html">Blockly</a>（年龄较大的学习者可能会喜欢）。重要的是您选择并开始。</p>
<h2 id="书籍和其他资源"><a href="#书籍和其他资源" class="headerlink" title="书籍和其他资源"></a>书籍和其他资源</h2><p> <a href="http://www.amazon.com/gp/product/0262011530">计算机程序的结构和解释（Abelson和Sussman）</a>可能是计算机科学的最好入门，它确实教授编程作为理解计算机科学的一种方式。您可以在本书中<a href="http://www.swiss.ai.mit.edu/classes/6.001/abelson-sussman-lectures/">在线观看讲座视频</a>，以及<a href="http://mitpress.mit.edu/sicp/full-text/book/book.html">在线全文</a>。这本书具有挑战性，将淘汰一些可能通过另一种方法成功的人。</p>
<p> <a href="http://www.amazon.com/gp/product/0262062186">如何设计程序（Felleisen <em>等人</em>）</a>是有关如何以优雅和实用的方式实际设计程序的最佳书籍之一。</p>
<p>Python：<a href="http://www.amazon.com/gp/product/1887902996">Python编程：CS</a>入门<a href="http://www.amazon.com/gp/product/1887902996">（Zelle）</a>是使用Python的不错的入门。</p>
<p>Python：<a href="http://python.org/">Python.org</a> 上提供了一些在线<a href="http://wiki.python.org/moin/BeginnersGuide">教程</a>。</p>
<p><a href="http://www.amazon.com/gp/product/0262220695">计算机编程的概念，技术和模型（Van Roy和Haridi）</a> 被某些人视为Abelson＆Sussman的现代继任者。这是一门编程的大创意，涵盖了比Abelson＆Sussman更大的范围，同时也许更易于阅读和遵循。它使用一种广泛使用的语言Oz，但它是学习其他语言的基础。</p>
]]></content>
      <categories>
        <category>People that affect me</category>
      </categories>
      <tags>
        <tag>affect</tag>
        <tag>people</tag>
      </tags>
  </entry>
  <entry>
    <title>硅胖语录集合</title>
    <url>/2018/09/01/People%20that%20affect%20me/%E7%A1%85%E8%83%96/</url>
    <content><![CDATA[<p>磨练心智，开阔视野，了解彼岸的信息。</p>
<span id="more"></span>

<h2 id="了解论坛"><a href="#了解论坛" class="headerlink" title="了解论坛"></a>了解论坛</h2><blockquote>
<p>最早期获取未知信息的来源，知道了一亩三分论坛的，快速高效，隐私保护是个难题。收费变现，让大量人员流失。毕竟社交平台的程序和服务器谁都会弄，其真正价值还在于贡献者和内容——Google所以伟大，不是因为Google只有搜索引擎，还是因为它的搜索引擎可以index世界上所有的网页，那些网页才是真正的贡献者。</p>
</blockquote>
<ul>
<li>真正的贡献者其实是发面经和帖子的人。</li>
<li>严格来讲，发面经是违反NDA的。</li>
<li>从商业角度，这就是个建设“平台”还是“产品”的问题</li>
<li>英文平台的崛起。可以参考Levelsfyi；公司小道消息和八卦，可以看Blind</li>
</ul>
<p>大趋势上，论坛逐渐被公众号和知乎以及各种知识分享的App所取代。长远来讲，留学、移民话题也可能如此，被新方式取代。</p>
<p>用硅谷商业模式碾压“躺在技术壁垒中不思进取只想着割韭菜的臃肿缓慢官僚保守的传统车厂”，这才是电动汽车的根本优势所在。</p>
<h2 id="专业and职业"><a href="#专业and职业" class="headerlink" title="专业and职业"></a>专业and职业</h2><p>供需始终在动态变化，每个人的路都是要自己孤独去走的。但我一直认为，如今改行学计算机，依然是正道之一，无论国内国外。只不过，暂时可能会面临经济危机、疫情危机、人数过多等问题，可能要有几年的低谷了。</p>
<p>经济危机往往是谷底，也就是上升的开始。而且，这世界上的事情被说得很复杂，有时候却简单得残酷：没有别的选择，尤其是某些人。</p>
<p>出国考个GRE,学CS都是顺理成章的事情，没什么可纠结的。</p>
<p>那么多培训机构和专业人员，全职教学尚且困难，讲的东西很多也只是皮毛，又何德何能，靠业余时间一个人筑起一座城市.</p>
<p>很多东西，“懂”和能把人“教懂”是两个概念，“教懂”是需要大量而长期的实践的，是我暂时所不具备的。如果能够面对面说话、有白板，还更好一些，通过文字，表达力就更差一层了。</p>
<p>现实也是个问题。中文互联网的现实状况，使得原创并没有太多的直接利益，所以缺乏内在驱动力。</p>
<p>大量垃圾信息流的出现也就是在那段野蛮时期。由针对问题和现实，到针对个人和立场。太快了。</p>
<h2 id="自我变化"><a href="#自我变化" class="headerlink" title="自我变化"></a>自我变化</h2><p>曾经的文学梦，现在也做到了每天码字。可以说某种意义上已经开始了。</p>
<p>这次疫情，被迫尝试了不同的生活和工作方式，也有时间思考，恍如隔世，仿佛昨日还是意气风发。</p>
<p>发现自己总是有很强的心理暗示和心理依赖效应。就像我总暗示自己在家上班效率不高，但事实上是错的，这不过是一种心理上的舒适区而已。真被迫在家上班，我也可以工作得非常好。</p>
<p>对社交网络的依赖感越来越轻了，</p>
<h2 id="码农工作本身"><a href="#码农工作本身" class="headerlink" title="码农工作本身"></a>码农工作本身</h2><p>从最初拥有自己的个人计算机开始，就有一种感觉，一定要进入这个行业。不管是为了更好的技术，创作的成就感。一切的前提就是对于一切未知的求知欲“这玩意到底怎么回事，我得搞清楚。我不是加班，只是好奇而已。”</p>
<p>对整个行业的态度，我当然没有改变多少：计算机过去是、现在是、未来也一直是会解决实际问题的创新行业，因此给勤劳好学能吃苦的人以更多的机会，能够改变自己阶层和环境的机会。我完全支持很多人拿计算机作为跳板和谋生手段的做法，至于能否喜爱不必奢求。</p>
<p>非常有趣，不会觉得乏味和单调。日复一日，年复一年。</p>
]]></content>
      <categories>
        <category>People that affect me</category>
      </categories>
      <tags>
        <tag>affect</tag>
        <tag>people</tag>
      </tags>
  </entry>
  <entry>
    <title>鲁迅</title>
    <url>/2021/03/29/People%20that%20affect%20me/%E9%B2%81%E8%BF%85/</url>
    <content><![CDATA[<p>“高山仰止，景行行止。虽不能至，然心向往之。”</p>
<span id="more"></span>

<h2 id="序文"><a href="#序文" class="headerlink" title="序文"></a>序文</h2><p>“行山阴道上，千岩竞秀，万壑争流，令人应接不暇”；有这种环境，所以历代有著名的文学家美术家，其中如王逸少的书，陆放翁的诗，尤为永久流行的作品。最近时期，为旧文学殿军的，有李越缦先生，为新文学开山的，有周豫才先生，即鲁迅先生。</p>
<p>鲁迅先生本受清代学者的濡染，所以他杂集会稽郡故书，校嵇康集，辑谢承后汉书，编汉碑帖，六朝墓志目录，六朝造象目录等，完全用清儒家法。惟彼又深研科学，酷爱美术，故不为清儒所囿，而又有他方面的发展，例如科学小说的翻译，中国小说史略，小说旧闻钞，唐宋传奇集等，已打破清儒轻视小说之习惯；又金石学为自宋以来较发展之学，而未有注意于汉碑之图案者，鲁迅先生独注意于此项材料之搜罗；推而至于引玉集，木刻纪程，北平笺谱等等，均为旧时代的考据家赏鉴家所未曾著手。</p>
<p>先生阅世既深，有种种不忍见不忍闻的事实，而自己又有一种理想的世界，蕴积既久，非一吐不快。但彼既博览而又虚衷，对于世界文学家之作品，有所见略同者，尽量的迻译，理论的有卢那卡尔斯基，蒲力汗诺夫之艺术论等；写实的有阿尔志跋绥夫之工人绥惠略夫，果戈理之死魂灵等，描写理想的有爱罗先珂及其他作者之童话等，占全集之半，真是谦而勤了。</p>
<p>“借他人之酒杯，浇自己的块垒”，虽也痛快，但人心不同如其面，环境的触发，时间的经过，必有种种蕴积的思想，不能得到一种相当的译本，可以发舒的，于是有创作。鲁迅先生的创作，除坟，呐喊，野草数种外，均成于一九二五至一九三六年中，其文体除小说三种，散文诗一种，书信一种外，均为杂文与短评，以十二年光阴成此多许的作品，他的感想之丰富，观察之深刻，意境之隽永，字句之正确，他人所苦思力索而不易得当的，他就很自然的写出来，这是何等天才！又是何等学力！</p>
<p>综观鲁迅先生全集，虽亦有几种工作，与越缦先生相类似的；但方面较多，蹊径独辟，为后学开示无数法门，所以鄙人敢以新文学开山目之。然欤否欤，质诸读者。</p>
<p>民国二十七年六月一日蔡元培</p>
]]></content>
      <categories>
        <category>People that affect me</category>
      </categories>
      <tags>
        <tag>affect</tag>
        <tag>people</tag>
      </tags>
  </entry>
  <entry>
    <title>一百天</title>
    <url>/2021/03/27/Program/CF%E8%AE%A1%E5%88%92/%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<p>想知道到底能做到什么程度！</p>
<span id="more"></span>

<h2 id="第一天2021-03-28"><a href="#第一天2021-03-28" class="headerlink" title="第一天2021-03-28"></a>第一天2021-03-28</h2><p><a href="https://www.tutorialspoint.com/cplusplus/">C++ Tutorial</a></p>
<p><a href="http://www.cplusplus.com/">Cplusplus</a></p>
<p><a href="https://linuxjourney.com/lesson/uniq-unique-command">linuxjourney</a></p>
<p><a href="https://mirrors.edge.kernel.org/pub/linux/kernel/Historic/old-versions/">linuxkernel</a></p>
<p>head first C</p>
<p>第一章内容，C语言基础知识入门</p>
<p>C++中文版</p>
<p>第一章预备知识入门</p>
<p>C#深入理解</p>
<p>第一章基础知识</p>
<p>Django基础教程</p>
<p>第一章导言</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">学无止境，学习新的内容，总结旧的知识。实践时必须输入自己输入代码已经过时了重复的劳动无意义，代码存在于一个web站点</span><br></pre></td></tr></table></figure>

<h2 id="第二天2021-03-29"><a href="#第二天2021-03-29" class="headerlink" title="第二天2021-03-29"></a>第二天2021-03-29</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">JavaScript 基础教程</span><br><span class="line"></span><br><span class="line">了解JavaScript</span><br><span class="line"></span><br><span class="line">Java 8实战</span><br><span class="line"></span><br><span class="line">基础知识</span><br><span class="line"></span><br><span class="line">Python web开发</span><br><span class="line"></span><br><span class="line">React 快速上手开发</span><br><span class="line"></span><br><span class="line">SQL基础教程</span><br><span class="line"></span><br><span class="line">SVG深入理解</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>书中世界千变万化，基础上进度继续，Linux 命令基础，还是去阅读Qwerty-Learner的开发issue。</p>
<p>practice practice pracitce 反复练习，熟悉命令熟悉api编写</p>
<p>“为学日益,为道日损,损之又损,以至于无为,无为而无不为”</p>
<p>the spoken word the writer word 语言与文字存在紧密联系。</p>
<h2 id="第三天2021-03-30"><a href="#第三天2021-03-30" class="headerlink" title="第三天2021-03-30"></a>第三天2021-03-30</h2><p>整理往期的内容，学习造轮子了</p>
<h2 id="第四天2021-03-31"><a href="#第四天2021-03-31" class="headerlink" title="第四天2021-03-31"></a>第四天2021-03-31</h2><p>继续整理，开始英文播客</p>
<p>每天读点历史，让思路清晰</p>
<p>剑桥中国史</p>
<p>哈佛中国史</p>
<p>中国近代史</p>
]]></content>
      <categories>
        <category>Program</category>
        <category>CF计划</category>
      </categories>
      <tags>
        <tag>writing</tag>
      </tags>
  </entry>
  <entry>
    <title>Java实战01</title>
    <url>/2021/03/18/Program/Java/Java/</url>
    <content><![CDATA[<p>程序设计由编程语言来表现，Java可能会是借此所找到的第一份工作</p>
<span id="more"></span>
]]></content>
      <categories>
        <category>Program</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>program</tag>
      </tags>
  </entry>
  <entry>
    <title>Random-Thoughts</title>
    <url>/2018/09/01/Random%20Thoughts/2018/2018-09/</url>
    <content><![CDATA[<p>这就开始了</p>
<p>要提升自己的层次的呀，否则就会陶醉在菜鸡互啄之中。</p>
<span id="more"></span>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2018-09-01</span><br></pre></td></tr></table></figure>

<p>人的成长实际上是一个不断努力探索，发现自我的过程。我们不断地努力学习、工作，不断地接受新的事物、新的观点、新的思想的过程，其实也是一步一步塑造巩固自身信念，看清自己的原本面目，接受并且成全自己的过程。</p>
<p>没有什么捷径可走，任何一个概念和技术都是在大量实践的基础上、从内心深处理解才会有所领悟。而且，他人的观点未必就是正确的，即使正确，也未必是我所理解的那个意思。</p>
<p>算法部分</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">二分搜索 Binary Search </span><br><span class="line">分治 Divide Conquer </span><br><span class="line">宽度优先搜索 Breadth First Search </span><br><span class="line">深度优先搜索 Depth First Search</span><br><span class="line">回溯法 Backtracking </span><br><span class="line">双指针 Two Pointers </span><br><span class="line">动态规划 Dynamic Programming </span><br><span class="line">扫描线 Scan-line algorithm</span><br><span class="line">快排 Quick Sort</span><br></pre></td></tr></table></figure>

<p>数据结构部分</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">栈 Stack</span><br><span class="line">队列 Queue</span><br><span class="line">链表 Linked List </span><br><span class="line">数组 Array </span><br><span class="line">哈希表 Hash Table</span><br><span class="line">二叉树 Binary Tree  </span><br><span class="line">堆 Heap</span><br><span class="line">并查集 Union Find</span><br><span class="line">字典树 Trie</span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-26e03e24d67c0b6d89f3097af95ecc5f_720w.jpg" alt="img"></p>
<p>对算法题来说有两大法宝，<strong>“拿到题选什么算法”和“如何实现这个算法”</strong>，后者会更容易一些，所以可以先从实现算法开始练起</p>
<p>*<a href="https://tantai.lanzous.com/ibkc1nhe67c">剑指 Offer</a>几乎包含所有常见的、经典的面试题，是应对面试的必读书籍<br>*<a href="https://tantai.lanzous.com/iuN9pnhegd">编程之美</a>适合准备面试FLAG大厂时候用来刷题</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2018-09-10</span><br></pre></td></tr></table></figure>

<p>任何一段程序，都包含输入输出：自己调用参数是输入，返回值和传递给下层模块的调用参数是输出。一段程序要能正常工作，他肯定不是随便什么输入都能接受的，而是要求输入的参数满足一定的约束，比如说某个参数必须是整数类型，必须大于0，另一个参数必须是回调函数，回调函数的结果一定要符合某个特性，等等。输出也不是什么乱七八糟的都能输出，必须要符合配方的需要，这些输出结果所具有的特性称为保证。</p>
<ul>
<li>逻辑性的写作，写写感想吧。回顾整个学生生涯，没有一个老师深刻地让我了解到基础的重要性，学习就是做题；而这个道理我到大学才自己悟了出来，不只是我愚笨还是我们教育的悲哀</li>
<li>另一方面，好的教育必定是昂贵的，认识世界的方式，缺乏一种解构的视角，这不仅仅是程序语言的问题。</li>
<li>我不理解怎么保证写是对的，怎么保证在合适的地方想到它并且应用呢……</li>
<li>学习是不断迭代的过程，只有积累积累再积累</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2018-09-15</span><br></pre></td></tr></table></figure>

<ul>
<li>学习嘛，要么氪，要么肝。</li>
<li>工科嘛，学习是为了解决问题的，考的是经验，需要不断地学习不断地思考，不断地改进。</li>
<li>熟悉程度不一样，一个有大量经验的人，自然一眼就能看出来，现在这个问题里，哪些是常规部分，哪些是非常规部分。如果全部都是常规的，那怎么可能解决不了呢？最后思路就变成了如何将非常规的部分转化成一个常规问题，而至于那些常规的部分，根本不需要仔细考虑，都是有现成的解决方案的。新手没有这种视角，往往在大量常规的细节上浪费时间，而抓不住导致问题的非常规的重点。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2018-09-20</span><br></pre></td></tr></table></figure>

<p>先写再看书。对于像编译原理这种略微高深的知识，总要自己写过几遍，吃了一些苦头，才能知道为什么书里非要把算法那么设计结构那么安排。</p>
<p>光写代码也是没用的。同人于野一篇讲成年人还能不能进步的博客说得很好，知识分为舒适区，学习区和恐慌区。舒适区的意思就是，你很容易就可以做完。学习区的意思就是，你需要花费大量的智力才可以做完。恐慌区的意思就是，你根本不知道如何下手。当你在为了练习编写大量的代码的时候，你要尽量把题目都安排在学习区这里，这样才能让你进步快的同时，还不会被问题打倒，可以继续积累成就感了。</p>
<p>学生做这个最方便了，工作之后，如果刚好遇上个黑心公司要你天天加班，你反而没时间做学习区的内容了，公司给你的肯定是舒适区的苦力活。</p>
<p>对于像设计模式这种需要大量经验才可以领悟到的知识，如果你从来没独立写过一个上万行的程序，你觉得你能理解设计模式在讲什么吗？我觉得这种时候能做的也就是背下来，理解什么的都是扯淡。</p>
<p>先去写然后才能理解这是为什么</p>
<p>这句话我深表认同 Every program you write should be the hardest you’ve ever written(你写的每一个程序都应是昵称写过的最难的程序)</p>
<ul>
<li>上学是为了在一个环境中更好的了解自我，换句话说如果我知道我接下来该做什么，那要不要继续读就无关紧要了.</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2018-09-30</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">乱哄哄</span><br><span class="line"></span><br><span class="line">你方唱罢我登场</span><br><span class="line"></span><br><span class="line">反认他乡是故乡</span><br><span class="line"></span><br><span class="line">甚荒唐</span><br><span class="line"></span><br><span class="line">到头来都是为他人做嫁衣裳</span><br></pre></td></tr></table></figure>

<p>避免焦虑的最佳方法不是担心市场饱和，而是把自己从低端向中端，甚至高端提升。</p>
<p>大学之道，在明德，在亲民，在止于至善。 知止而后有定，定而后能静，静而后能安，安而后能虑，虑而后能得。</p>
<p>你对一个领域的热情可以反映在写论文、玩博客、出书、也可以体现在主动揽活，业余时间自学。热情是骗不了人的：</p>
<p>去阅读一本书或一篇paper肯定是带着问题驱动型读，不会是为读而读，这样挺水的。也会阅后即忘。</p>
]]></content>
      <categories>
        <category>Random Thoughts</category>
        <category>2018</category>
      </categories>
      <tags>
        <tag>Essay</tag>
      </tags>
  </entry>
  <entry>
    <title>JS学习工具</title>
    <url>/2021/03/26/Program/JS/JS%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p><a href="https://nodejs.org/api/">node</a>用这个来搭建博客<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">JavaScript参考文档</a></p>
<span id="more"></span>]]></content>
      <categories>
        <category>Program</category>
        <category>JS</category>
      </categories>
      <tags>
        <tag>program</tag>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>硬件开发</title>
    <url>/2021/03/26/Program/%E7%A1%AC%E4%BB%B6%E7%BC%96%E7%A8%8B/%E7%A1%AC%E4%BB%B6%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<p><a href="https://phodal.github.io/make/">硬件编程</a><br><a href="http://www.lumit.org/LASO/">源码开放学ARM</a></p>
<span id="more"></span>]]></content>
      <categories>
        <category>Program</category>
        <category>硬件编程</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Program</tag>
      </tags>
  </entry>
  <entry>
    <title>FQA</title>
    <url>/2021/03/25/Program/Python/FQA/</url>
    <content><![CDATA[<p> 列出在使用Pythonh中解决的问题</p>
<span id="more"></span>

<h2 id="Python-设立虚拟环境"><a href="#Python-设立虚拟环境" class="headerlink" title="Python 设立虚拟环境"></a>Python <a href="https://docs.python.org/zh-tw/3/tutorial/venv.html">设立虚拟环境</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 -m venv tutorial-env</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Program</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>program</tag>
        <tag>FQA</tag>
      </tags>
  </entry>
  <entry>
    <title>Random-Thoughts</title>
    <url>/2018/12/01/Random%20Thoughts/2018/2018-12/</url>
    <content><![CDATA[<p>当你真正的去制造一个轮子,就能真正明白了,而不是看多少书,这就是学和做的区别.</p>
<span id="more"></span>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2018-12-01</span><br></pre></td></tr></table></figure>

<p>学校之外地东西,才是真正区分一个程序员地水平地关键</p>
<p>作为一个改行者，一定要牢记：<strong>学校最多只能教你不到30%的知识，剩下70%完全要靠自己。</strong></p>
<p>其实在公司工作的模式就是这样的：很少有公司有详尽的文档或是培训——因为公司发展太快，大多数是自己看看文档，然后就直接看代码去理解，不明白的稍微请人问下，但主要还是靠自己学习和查询，不太可能有系统和长时间的培训。</p>
<p>所以这种看似短促的突击式学法，其实是大公司工作所常用的。“知其然”就足够了然后就去做事，“知其所以然”是在做完事情、经验慢慢积累后再逐渐跟进的。公司出钱养人是为了做事情，并不是给机会学习。</p>
<p>换句话说，衡量程序员的最有效的标准就是代码。那么能写出代码的，就是好程序员，“我知道这题这么做，但我不知道为什么”是完全没问题的甚至是高效率的一种表现；涉及到一个知识或是技能，即使不知道它的来龙去脉和理论，但却能用代码表述，这就足够了。</p>
<p>在计算机这个行业,自身的素质和努力是非常非常关键地,面试时几道题一刷,几句话一说,功力深浅在老司机面前立刻无所遁形.</p>
<p>很多行业，眼光、情商、方向更重要，计算机不是说这些不重要，而是拥有这些更多地能走得远走得好甚至完成从一个穷小子到大富翁的逆袭。但决定一个人是否能够走出第一步的，却是自身的硬功夫，也就是静下心来学习、准备面试枯燥无聊的过程。</p>
<p>每个人成长不是固定的,认识自我</p>
<p>单位时间内，主动性越高的人，行动次数越多。</p>
<p>书籍问题在于精深而失于大略, 不知整体为何物, 培训班相反, 只讲究大概,不求甚解</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2018-12-11</span><br></pre></td></tr></table></figure>

<p>精通,从来都是读书+实践地,工业界地代码和设计,其实跟书本不太一样,长期闭门造车尤其是纯理论学习,收效不高.</p>
<p>一类比一下通了,CS就如学乐器,观看别人,和理论书,怎么可能学会呢</p>
<p>我在建立（Build）简历。看看sample（例子），别人是怎么写简历的，UI Developer的简历是怎样的，人会的什么，怎么形容自己的project的；后端的简历是怎样的，机器学习方向的简历是怎样的之类。</p>
<p>技术上，可以说真的是一分积累，一分耕耘，一分收获，半点马虎不得——过去的120年里，总有人试图用刀枪不入这种“邪术”抵抗洋枪洋炮的“正道”。</p>
<p>大部分人没做过具体的large-scale的项目，因为只有互联网公司有large-scale的生态环境，所以大部分人不会；但互联网公司又考察这些，所以就过不了面试。越是不会，越进不去，越进不去，越是不会；而在互联网公司工作的人，却每天在积累这种系统经验。</p>
<p>导致只有少数工程师，越来越精通系统设计；大部分人，因为没有机会，还处于纸上谈兵阶段。</p>
<p>看文档,看开源项目 这就是一个变化</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2018-12-22</span><br></pre></td></tr></table></figure>

<p>人生苦难重重。</p>
<p>这是个伟大的真理，是世界上最伟大的真理之一。它的伟大之处在于，一旦我们领悟了这句话的真谛，就能从苦难中解脱出来，实现人生的超越。只要我们真正理解并接受了人生苦难重重的事实，那么我们就会释然，再也不会对人生的苦难耿耿于怀了。</p>
<p><strong>生活中遇到问题，这本身就是一种痛苦，解决它们的过程又会带来新的痛苦。各种各样的问题接踵而至，使我们疲于奔命，不断经受沮丧、悲哀、痛苦、寂寞、内疚、懊丧、恼怒、恐惧、焦虑和绝望的打击，从而不知道自由和幸福为何物</strong>。这种心灵的痛苦通常和肉体的痛苦一样剧烈，甚至令人更加难以承受。正是由于人生的矛盾和冲突带来的痛苦如此强烈，我们才把它们视为问题；也正是因为各种问题接连不断，我们才觉得人生苦难重重。</p>
<p>躺平就好。</p>
]]></content>
      <categories>
        <category>Random Thoughts</category>
        <category>2018</category>
      </categories>
      <tags>
        <tag>Essay</tag>
      </tags>
  </entry>
  <entry>
    <title>Random-Thoughts</title>
    <url>/2018/10/01/Random%20Thoughts/2018/2018-10/</url>
    <content><![CDATA[<p>你对一个领域的热情可以反映在写论文、玩博客、出书、也可以体现在主动揽活，业余时间自学。热情是骗不了人的：</p>
<span id="more"></span>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2018-10-01</span><br></pre></td></tr></table></figure>

<p>避免焦虑的最佳方法不是担心市场饱和，而是把自己从低端向中端，甚至高端提升。</p>
<p>大学之道，在明德，在亲民，在止于至善。 知止而后有定，定而后能静，静而后能安，安而后能虑，虑而后能得。</p>
<p>你对一个领域的热情可以反映在写论文、玩博客、出书、也可以体现在主动揽活，业余时间自学。热情是骗不了人的：</p>
<p>去阅读一本书或一篇paper肯定是带着问题驱动型读，不会是为读而读，这样挺水的。也会阅后即忘</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2018-10-9</span><br></pre></td></tr></table></figure>

<p>重复制造轮子和重复发明轮子是不一样的。发明是researching，制造是engineering，不能混为一谈。我们说，不要重复发明轮子，但是没有说，不要重复制造轮子。</p>
<p>重复制造它的意义有两个</p>
<p>1：你的到了锻炼</p>
<p>2：你牛逼的话可以比前人造的更好，间接造福了全世界</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2018-10-10</span><br></pre></td></tr></table></figure>

<p>绝大部分人真的很水,这也算是得益于国内网络环境的越来越糟糕,使得如果我能够用到我一半的热情于主要的学科之中,那么剩下的热情我可以全身心的投入到我所喜欢的内容了,谢谢,这是最好的时代,这是最差的时代.非常感谢.</p>
<p>学习一种和以往不同的思考方式。<br>你会的思考方式越多。你就越可以自由的思考。<br>不会被以往接触过的某些东西禁锢住。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2018-10-14</span><br></pre></td></tr></table></figure>

<p>函数式程序员生产力比传统程序员高一个数量级,因为函数式程序要短一个数量级,传统的程序由90%的幅值语句构成,在功能性程序这些可以省略,没有质量标准,因此没有理想的目标,只有这些不够,必须找到一些东西来代替,不仅仅是强大功能,还要有乐趣所在,结构化程序是以模块化方式设计的,极大提高了生产率,小模块编码快速,通用模块可以重复使用,可以独立测试,减少调试时间,有助于”小心编程”</p>
<p>分解原始问题的方法直接取决于粘合的方式,提高一个人模块化问题的能力,从概念上,必须在编程语言中提供新的粘合剂,复杂的范围规则和单独编制的规定只能帮助文书细节ーー他们永远不可能对模块化做出重大贡献。</p>
<p>程序可以以新的方式模块化，从而可以简化。</p>
<p>这是函数式编程能力的关键ーー它允许改进的模块化。 这也是函数式程序员必须为之奋斗的目标ー更小、更简单、更通用的模块，与新的模块粘在一起我们要描述的胶水。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2018-10-24</span><br></pre></td></tr></table></figure>

<h2 id="高校计算机教育"><a href="#高校计算机教育" class="headerlink" title="高校计算机教育"></a>高校计算机教育</h2><ul>
<li>意义不明确</li>
<li>目的不明确</li>
<li>课后作业少</li>
<li>教材太差劲</li>
</ul>
<p>很多大学的教学大纲上来就是C语言，汇编，一堆概念先来一套，不管你是否理解，先背下来再说。导致一门理工科课程沦为了像文科一样把背概念作为考核标准。很多高校的考试试卷至今还在考：计算机由哪几部分组成，到底是填由显示器主机组成呢，还是填由CPU，内存，输入输出设备呢？考这种东西的意义是什么？考背书能力吗？</p>
<p>计算机组成原理这门课程是很多CS专业的必修课程，但是打开这些专业的书本的前几章，基本上都是给几个公式，反码，补码的计算公式，浮点数计算公式等等。如果问一个刚刚学完补码计算规则的人：补码有什么用？为什么补码是这样计算的？不知道能有多少人回答出来呢？看看国外的一本名书《编码》是如何阐述这些问题的吧。先从最简单的开灯关灯电路，然后是继电器电路，多个继电器组成逻辑门电路，多个门电路组成单位加法器，多个单位加法器组成一个多位加法器。他的目的非常明确，告诉你最简单的电灯是如何工作的，告诉你继电器是如何工作的，顺着这个目的一步一步下去，最后就能了解CPU是如何工作的，了解为什么计算机的运算需要补码来参与，而不是正常人所用的原码。他的每一个步骤都带着一个很有趣但是也很明确的目的性来学习。</p>
<p>仔细看一下国内的计算机组成原理教材和国外的CSAPP，你会发现国内的书的习题以及引用资料可以说是少得可怜。本来大学生经过高考之后就已经很松懈了，大学本身又是放羊式的教学和管理，课后作业要么copy代码，要么网上抄，作业难度和质量也不高。</p>
<p>很多大学老师为了评职称，过考核，自己水平不够还强行写一堆学术垃圾，最后还在校内强制推广。这个就不说了，其实大家心里都有个数。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2018-10-30</span><br></pre></td></tr></table></figure>

<p>现在要做的是站在前人的肩膀上制造轮子,加深理解了</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">第五条　任何单位和个人不得利用国际联网制作、复制、**查阅**和传播下列信息：</span><br><span class="line">（一）煽动抗拒、破坏宪法和法律、行政法规实施的；</span><br><span class="line">（二）煽动颠覆国家政权，推翻社会主义制度的；</span><br><span class="line">（三）煽动分裂国家、破坏国家统一的；</span><br><span class="line">（四）煽动民族仇恨、民族歧视，破坏民族团结的；</span><br><span class="line">（五）捏造或者歪曲事实，散布谣言，扰乱社会秩序的；</span><br><span class="line">（六）宣扬封建迷信、淫秽、色情、赌博、暴力、凶杀、恐怖，教唆犯罪的；</span><br><span class="line">（七）公然侮辱他人或者捏造事实诽谤他人的；</span><br><span class="line">（八）损害国家机关信誉的；</span><br><span class="line">（九）其他违反宪法和法律、行政法规的</span><br></pre></td></tr></table></figure>

<p>制作、复制、传播我就不说了。查阅是什么意思知道吧？「找出来阅读」。说白了就是，不准看。</p>
<p><a href="http://www.gov.cn/gongbao/content/2011/content_1860856.htm">《计算机信息网络国际联网安全保护管理办法》</a>的这个第五条，称得上是魔幻科幻迷幻玄幻，单这一条就为我国贡献了<strong>数以亿计</strong>的违法人员。</p>
]]></content>
      <categories>
        <category>Random Thoughts</category>
        <category>2018</category>
      </categories>
      <tags>
        <tag>Essay</tag>
      </tags>
  </entry>
  <entry>
    <title>Random-Thoughts</title>
    <url>/2018/11/01/Random%20Thoughts/2018/2018-11/</url>
    <content><![CDATA[<p>表达算个屁, 天才在于判断力,品味才是牛</p>
<span id="more"></span>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2018-11-01</span><br></pre></td></tr></table></figure>

<p>要知道，这个国家要实现的，是“中华民族的伟大复兴”，其中就包括“文化自信”，来于生活而高于生活的，群众喜闻乐见的文学艺术作品，当然是实现民族伟大复兴的重要组成部分。</p>
<p>要知道这个国家所追求的，是“全面迈进小康社会”，是先富带动后富，绝不是任何一个资本寡头的一言堂和圈地运动。</p>
<p>大家要相信：自己才是社会主义铁拳所保护的群体。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2018-11-06</span><br></pre></td></tr></table></figure>

<p>很多企业业务最终面对的是个人用户，而且把精力和资源太多地放进了这些面向个人用户的业务中，即虚耗了企业运营的成本，也增加了企业潜在的风险。</p>
<p>更健康的科技企业，应该是</p>
<p>“面向解决问题的开发”，这里的问题，不仅仅是互联网的问题，不仅仅是民生问题，也包括了自然科学、共性基础科技难题、面向不同领域提供分析处理软件等的开发。</p>
<p>“面向解决问题的开发”：一个再小的真.科技企业，只要他解决好一个问题并且成为解决这个问题的领域中最牛逼的那位……它几乎就稳稳地就可以靠这一手“绝学”一直吃下去：</p>
<p>什么“拥抱变化”，不需要的。 office、PS需要一周一小变、一月一大变么？</p>
<p>什么产品运营，不需要的，你见过PS七夕活动P满20张图领礼物、首充优惠么？</p>
<p>最顶尖的人才往往有与世俗不同的价值追求，给他们个足够难的puzzle能带给他们极大的愉悦。</p>
<p>甚至于跳开已有的解决方案不说，如果是做创新，那么读博的同学都知道有个词叫做“research taste” (研究品味)，真正的科技企业，几乎可以说在它决定要要去解决哪个领域的哪一个问题的时候，就已经注定会成为行业翘楚了。这才是IT业真正能超越马克思的生产关系的地方：一次性的投入，几乎无尽地产出。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2018-11-11</span><br></pre></td></tr></table></figure>

<p>“只要幻想存在于这个世界，迪士尼乐园就永远不会完工。”Disneyland will never be completed, as long as there is imagination left in the world.—— 华特·迪士尼</p>
<p>电影对塑造年轻人的生活有着巨大影响，通过娱乐的方式，能帮他们找到理想和人生目标。</p>
<p>*Movies can and do have tremendous influence in shaping young lives in the realm of entertainment towards the ideals and objectives of normal adulthood.</p>
<p><strong>“建立童话与现实世界的联系”</strong>也成了迪士尼企业不断开拓创新的核心动机。</p>
<p><strong>探索世间万物的运行法则、掌握它们观感背后的物理规律和数学运算法则，用计算机来重现这一切的视觉观感。</strong></p>
<p>华特·迪士尼：“做‘不可能的事’，是一种快乐！”</p>
<p>在计算机的世界中，能通过数学模型就计算出“星辰大海”</p>
<p>通过计算和动画的设计也可以让万物生灵“生生不息”。</p>
<p><strong>“艺术挑战技术，技术启发艺术”</strong>（Art challenges technology and technology inspires art），这是皮克斯的座右铭，也是迪士尼不断探索技术边界的目标——<strong>讲更好的故事，让童话故事变成你的现实。</strong></p>
<p>世界闻名的<strong>迪士尼研究院</strong>（Disney Research），更是用纯粹的科技， 践行着他们的理想。</p>
<p>人类的知识从自然而来，从自然中领悟科学，再用科学来把美好的童话故事变成现实。</p>
<p>老华特·迪士尼给这个世界留下最宝贵的东西，就是这种<strong>艺术与科技结晶背后所代表的“以创造现实童话、引人向善为己任”的精神遗产</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2018-11-22</span><br></pre></td></tr></table></figure>

<p>局限,确实是局限,发一封邮件问一个前线的研发人员对现有的学术研究的看法,逛一逛所学专业的专业论坛,总结下人们都在关注什么问题能得以解决, 和该领域更有见地的人喝杯咖啡聊聊天.</p>
<h2 id="计算机图形学-物理模拟方面-需要学习哪些课程"><a href="#计算机图形学-物理模拟方面-需要学习哪些课程" class="headerlink" title="计算机图形学(物理模拟方面)需要学习哪些课程"></a>计算机图形学(物理模拟方面)需要学习哪些课程</h2><p>固体:</p>
<p><a href="https://scholar.google.com.tw/scholar?q=linear+complementarity+problem,+multibody+dynamics&hl=zh-CN&as_sdt=0&as_vis=1&oi=scholart">linear complementary problem, multibody dynamics (LCP)</a></p>
<p><a href="https://www.google.com/search?q=continues+collision+detection,+cloth+simulation+robert+bridson.&sxsrf=ALeKk01qZm9ri4yRjjXpeOMgo8rsznobdw:1617109706174&ei=yiJjYL-NCoqTr7wP8veQeA&oq=continues+collision+detection,+cloth+simulation+robert+bridson.&gs_lcp=Cgdnd3Mtd2l6EANQn4cEWJ-HBGCyigRoAXAAeACAAZACiAGQApIBAzItMZgBAKABAqABAaoBB2d3cy13aXrAAQE&sclient=gws-wiz&ved=0ahUKEwi_muWMi9jvAhWKyYsBHfI7BA8Q4dUDCA0&uact=5">continues collision detection, cloth simulation robert bridson.</a></p>
<p>流体:</p>
<p><a href="https://github.com/zhxx1987?tab=repositories">stable fluids, fluids ron fedkiw, animating sand as fluid, fast variational approach for fluid simulation, parallel Multigrid fluid simulation McAdams, APIC jiangchen fanfu, narrow band FLIP, Nils Thuerey, Christ Wojtan.</a></p>
<p>数学及工具:</p>
<p>FFT, Graph Laplacian, reduced space simulation, Multigrid methods, conjugate gradient methods, nonlinear optimization, distributed computing, parallel programming, cuda programming, Poisson’’s equation, 做物理计算研究, 通常是不调包的, 线性代数系统的求解是同数据结构耦合的所以得要自己写.</p>
<p>弹性体:</p>
<p>Efficient Elasticity for Character Skinning with Contact and Collisions, mcadams</p>
<p>vega, jernej barbic.</p>
<p><em>SimIt:</em> <a href="https://link.zhihu.com/?target=http://faculty.cs.tamu.edu/sueda/">Shinjiro Sueda</a></p>
<p>reinforcement learning + physical simulation. —&gt; 基于虚拟物理仿真平台的机器人智能强化学习. 关键字有: jason peng, Michael Vann De pann, karen liu, greg turk, etc…..</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2018-11-30</span><br></pre></td></tr></table></figure>

<p>学校教你的那点课程最多能骗过外行。</p>
<p>十年编程</p>
<p>没有取巧的就是一道道的刷, 然后就是刷题不能停,这是真理啊,CS的很多事情只需要简单的长期坚持,便有奇效.</p>
<p>现实现实现实 技术是为了解决实际问题,技术是否重要和实用,看它所解决的问题,它所依赖的平台.</p>
<p>洗白名头,</p>
<p>CS是实践性学科,所有期理论和做法,都是以实现为基础的,与其花费时间理解理论,不如理论与现实相结合,</p>
<p>认真去做project并且了解每一个细节,抄袭别人的代码是不可取的</p>
<p>什么叫做学会,只有真正写程序,做project ,才算真会,无论看多少书,背多少定义和答案,往往真正记得最牢,最能解释清楚的,就是自己写过做过的东西,做过没做过很容易区分,</p>
<p>幸运或不幸,很难重复,时代不同了,</p>
<p>改行CS 的误区, 我基础差, 先学会原理,再写程序事半功倍.</p>
<p>往往是因为本能的惧怕写程序而再为自己找借口,正确的做法是,直接写程序,同时理解原理,通过程序,而不是读书,来理解原理,上文所强调的— 一切通过程序和例子.</p>
<p>Javascript 等在求职中比较有用,大量的职位需求,难度不高,属于投入小收益大的方向, 为了现实暂时屈从一个一般的公司,要求技能对口,尽量能快速干活,前端肯定是有利的</p>
<p>CS不是上课越多越好,绝大数知识都是自己学习的,过多的课程只会疲于奔命.</p>
<p>做project 优先上</p>
<p>选好一门好课也需要大量的时间精力才能有所收获</p>
<p>现实问题:信息完全网络化后,几乎可以100%依赖网络进行学习和获取信息之后,做事情,做决定,学习和工作是否更容易甚至无门槛了</p>
<p>用俗话说，以前是获取不到信息，人们需要开拓渠道；如今是过多的信息，人们需要判断，并且去评价信息的可靠性，然后吸收。</p>
<p>发现临渊羡鱼者众，退而结网者少。</p>
<p>没有动力和勇气去尝试,或是更可惜地—尝试了,却没有100%地去坚持和努力.</p>
<p>我有种思路返璞归真的感觉，就是再好的计划，再好的专业，再有利的条件，也没有个人坚持和努力重要。这种个人努力不是996，不是熬夜苦读，而是专注和去实际操作，理性地。</p>
<p><strong>与时间赛跑！最难之处，是在短短2年左右时间内有效率地磨练自己，达到找到工作的水平。这里的关键词是“有效率地”。</strong></p>
]]></content>
      <categories>
        <category>Random Thoughts</category>
        <category>2018</category>
      </categories>
      <tags>
        <tag>Essay</tag>
      </tags>
  </entry>
  <entry>
    <title>Random-Thoughts</title>
    <url>/2019/02/01/Random%20Thoughts/2019/2019-02/</url>
    <content><![CDATA[<p>有的有幸游到了岸边，有的不幸迷失在水里</p>
<p>而有的选择沉了下去，永远消失在这片海里</p>
<span id="more"></span>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-02-01</span><br></pre></td></tr></table></figure>

<p>在工作需要的时候，程序员的学习能力是惊人的，所以根本没必要“保护” 程序员远离新语法。只要有文档，有时间，他们自然能学会。</p>
<p>自己将检查工具做得更聪明。</p>
<p>过早优化是一切罪恶之源，让代码先跑起来再说，正确性比性能重要</p>
<p>概率论，离散数学</p>
<p>统计</p>
<p>代数和线性代数</p>
<p>数理逻辑</p>
<p>信息论和柯氏复杂性</p>
<p>广度优先才是学习数学的正确方法，深度优先是不行的，先打开眼界，了解各种名称，搞清楚什么是什么</p>
<p>学习数学忘记那些算法和证明，去了解那些技术的方方面面：名称，作用，大概是怎么计算的，历史有多悠久。是谁发明的，局限性在哪里，互相之间的关联是什么，数学里的素质教育。</p>
<p>第一步界定问题，最花时间的，当一个问题在手却不知道如何下手的时候。但看出这是一个微分问题，或是凸优化问题，亦或是布尔逻辑问题的话，至少立刻知道从哪着手寻找答案</p>
<p>链式法则就是对“串在一起”的函数求导，在学会求导和积分之前，应该先去学怎么计数和编程。</p>
<p>学习数学的最佳方式是每天花上15~30分钟浏览下维基百科。有各种关于数学分支的文章，数量多达好几千。读去吧，遇到任何不懂得东西，只要点一下链接跳过去读就可以了。一直读，读到觉得乏了累了。大开眼界，摸出一些门道，每一种数学分支都会涉及一个对应复杂多元版本的单变量，而多元版本几乎一定是用矩阵或者一次方程来表示的，至少在应用数学里都是如此，所以线性代数的重要性就会慢慢上升，不弄懂它到底是怎么回事就是不行的时候，自然就会跑去下载教程或者去买本书来读，皆大欢喜。</p>
<p>所谓的数学就是将人们在某些领域里的“常识”形式化数学研究之所以那么迷人就是因为它唯一的极限就是数学本身；形式化模型本身固有的能力、证明、公理系统、以及法则、信息、计算的表示</p>
<p>浏览数学完全不同，尝试去了解人们到底努力解决什么问题，从那堆符号里看出端倪来，他们也不会像天书一样。只是一个循环罢了，一个把值累加，另一个将他们相乘，积分也不过是连续区间的曲线的和而已，习惯以后就不怎么可怕了</p>
<p>原来如此，当数学不可怕时，只要掏出计算器就行了，计算器可以很炫，几乎所有实用的数学在很大程度上都挺容易接受的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-02-10</span><br></pre></td></tr></table></figure>

<p>每天学一点数学，实在是太棒了！</p>
<p>编译原理是一门重要的课程，将之前学过的几乎所有东西都捏合再一起</p>
<p>这个世界上除了PC</p>
<p>还有FC、SFC、MD、PS、N64、NGC、SS、DC、PS2、PSP、GBA、GBASP、NDS、3DS、PS3、PSvita、XBOX、XBOX360、PS4、Wii、NS、XBOXone、PS5、XSX等等</p>
<p>这个世界上除了马化腾</p>
<p>还有William Higginbotham、宫崎英高、小岛秀夫、三上真司、阪口博信、宫本茂、神谷英树、上田文人、Will Wright、Sid Meier、Alexey Pajitnov、John D. Carmack、Gabe Newell等</p>
<p>这个世界上除了腾讯等不生产游戏的搬运商以外</p>
<p>还有Clover Studio、Blizzard Entertainment、Electronic Arts、NEXON、Nintendo、Rockstar、Ubisoft、KONAMI、CAPCOM、Naughty Dog、SCE Santa Monica Studio、SEGA、SNK、Valve、KOEI、CDPR、Paradox Interactive、Namco、BANDAI、BANDAINAMCO、Square、 Enix、Square Enix等（不是重复写，因为是游戏史上著名的合并）</p>
<p>这个世界上除了DNF、cf、LOL以外</p>
<p>还有The Last of Us、Chrono Trigger、Grand Theft Auto、Dark Souls、Super Mario Bros、Monster Hunter、Halo、Castlevania、The Legend of Zelda、Valkyrie Profile、God of war、Final Fantasy、Civilization、The Witcher、Call of Duty、Bloodborne等</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-02-20</span><br></pre></td></tr></table></figure>

<p>坐在计算机前编程，不耐心一步步写出整个程序，确保大体正确，而不是一股脑不管对错，先把代码堆上去，再慢慢修改。书上说，调试是最后步骤。可是这种工作方法看上去却像编程就是在调试，对对对英雄所见略同，把整个程序想清楚的时间点，应该是在编写代码的同时，而不是在编写代码之前，这与作家，画家和建筑师的做法完全一样。编程语言首要特性应该是允许动态扩展，编程语言是用来帮助思考程序的，而不是来表达你已经想好的程序，应该是一支铅笔，而不是钢笔 创作者不同于科学家，这是巨大的诱惑，去解决那些能够用数学公式处理的问题，而不是去解决真正重要的问题。原来如此，一类人，作家和画家没有对数学家的妒忌，大学和实验室不允许黑客做他们想做的事情，适合黑客的地方可能就是企业，程序员被当作技工，职责就是将产品经理的”构想“翻译成代码。肉食者鄙，排斥差异的时候，将失败的可能性排除在外，也将获得高利润的可能性排除在外，生产特别优秀的产品不是他们的获胜手段，大公司只要做到不太烂，就能赢，竞争优势是在软件设计方面，不过机会不容易找到。原来如此，怎么才能做自己喜欢的事情？这个问题的解决方法是一个几乎所有创作者都知道的方法：找一份养家糊口的白天工作day job 从音乐家身上来的，你有一份为了赚钱的工作，还有一份为了爱好的工作。</p>
<p>开源软件的这种工程模式就是正确的模式，因为已经被其他领域的创作者都验证过了， 面试程序员，主要关注的事情就是业余时间他们写了什么软件，如果你不爱一件事，不可能把它做得真正优秀，要是你很热爱编程就不可避免地会开发你自己的项目</p>
<p>摄影技术消灭了画家的白天工作，微软垃圾的原因啊不鼓励雇员为开源项目做贡献，甚至业余时间也不行，如何学习编程，画家学习绘画的方法主要是动手去画，黑客学习编程的方法也理应如此，他们从实践中学习，13岁就自己动手写程序了，即使上了大学，黑客学习编程依然主要通过自己写程序。画家的作品都会保留下来，每幅画所用的技巧，都是建立在上一幅作品学到的东西之上。谋福作品如果有特别出色之处，往往能够在更早的作品上发现一个小规模的初期版本。大多数创作者都是这样学习和工作的，作家和建筑师似乎都如此，对于黑客来说，采取像画家这样的做法很有好处，定期地从头开始，而不要长年累月地在一个项目上不断工作，并且试图把所有的最新想法都以修订版地形式包括进去。黑客通过实践学习编程说明黑客与科学家区别有多大，科学家就不会通过干活来学习科学，而是通过做实验和解题来学习，科学家研究地基础都是现有的很完美地成果，在这个意义上，他们第一步只是在复制别人已经做过的工作，最后他们才会从某一个点开始，进行自己地原创性工作，但是，黑客就不一样，从一开始就是原创性工作，根本没有他人完美地成果可以依靠，出发点原创，最终得到一个优美地结果；而科学家地出发点是别人优美地结果，最终得到原创性。</p>
<p>黑客不能盼望先有一个完美地规格设计，然后再动手编程，这样想是不现实的，学习绘画的创作过程，周期性心理考虑在内，在我厌倦的时候再去做那些比较容易地工作，这是个不错的主意。修bug可以留到以后解决，这个时候编程才变得直接和机械，接近社会大众想象中的编程的样子，消灭bug过程就像解数学题，已知许多约束条件，根据条件对方程求解就可以了。，哪里出错了？知道最后肯定能解决这个问题，如何与他人一起工作，多人共同开发一个软件的正确模式，需要合作，但不要合作过头，一个代码由三四个人共同开发，就没有人真正拥有这块代码，最终变得像一个公用杂物间，又脏又乱，到出堆满冗余代码，正确方法项目分割严格定义的模块，每一个模块由一个人明确负责，模块与模块接口精心设计，如果可能最好把文档说明写的像模块编程语言规范那样清晰。</p>
<p>绘画作品为人类用户准备，所以需要考虑到用户的人性需要。才能做出伟大的产品，必须能够站在用户的角度思考问题，学会“换位思考”。  从他人的角度思考问题正是成功的奥秘所在，“换位思考”并不就意味着你要做自我牺牲。完全是不同的两码事，了解别人对于事情的看法，知己知彼，百战不殆。大多数创作者都是为人类用户而创作，为了吸引用户，必须理解用户需要什么，几乎所有最伟大的绘画作品都是画人的，因为人类总是对自身感兴趣的。</p>
<p>怎样向技术背景的人解释技术问题，我们大概都认识这样一些人，他们在其他方面非常聪明，但是把问题解释清楚的能力却惊人低下。 软件的部分功能就是解释自身，为了写出优秀软件，必须假定用户对你的软件基本一无所知，要明白，用户第一次使用你的软件的时候，不会预先做好功课，没有任何准备就开始用了，所以软件的使用方式最好能符合用户的直觉，别指望用户去读使用手册。在这方面，最佳系统是原始电脑，文本编辑器和编译器不在此列，这些软件的典型用户是自己。</p>
<p>程序写出来是给别人看的，附带能在机器上运行。许多黑客六个月后再读自己的程序。却发现根本看不懂它是怎么运行的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-02-28</span><br></pre></td></tr></table></figure>

<h2 id="好的设计"><a href="#好的设计" class="headerlink" title="好的设计"></a>好的设计</h2><ul>
<li><p>好设计是简单的设计</p>
</li>
<li><p>好设计是永不过时的设计</p>
</li>
<li><p>好设计是解决主要问题的设计</p>
</li>
<li><p>好设计是启发性的设计 简·奥斯汀作品几乎不带有任何描述，不告诉读者每件东西看上去是什么样子，只是把故事讲得非常生动，让读者自己把一切都想象出来同样绘画作品也分为描述性绘画和启发性绘画，后者往往比前者更引人入胜，每个人看到《蒙娜丽莎》都有自己的理解。</p>
</li>
</ul>
<p>一个作品应该允许你按照自己的愿望来使用。想怎么布置就可以怎么布置，过上自己想过的家庭生活，而不是使得你像执行程序一样只能过上建筑师为你安排的生活。</p>
<p>软件上，你应该为用户提供一些基本模块，使得他们可以随心所欲自由组合，</p>
<ul>
<li>好设计通常是有点趣味性的设计  幽默的力量强大的标志轻松面对自己的人生，充满自信的人常常像燕子一样。</li>
</ul>
<p>好设计并非一定要有趣，但是很难想象完全无趣的设计会是好的设计</p>
<ul>
<li><p>好设计是艰苦的设计 功能应当决定形式</p>
</li>
<li><p>好设计是看似容易的设计 完美再现</p>
</li>
</ul>
<p>联系是为了下意识反应，面对难题他能释放你的直觉</p>
<ul>
<li>好设计是对称的设计 重复性对称和递归性对称</li>
</ul>
<p>对称的危险在于它可以用来取代思考，在大量使用重复的时候这种危险性更大。</p>
<ul>
<li><p>好设计是模仿大自然的设计 我的眼睛看着某样东西，手就代表你的思想，</p>
</li>
<li><p>好设计是一种再设计 培养对自己的不满，犯错误是正常的事情，不要把犯错误看成灾难，要勇于承认，勇于改正</p>
</li>
<li><p>好设计是能够复制的设计 把事情做对对比原创更重要。</p>
</li>
</ul>
<p>不知不觉地模仿几乎必然将导致坏设计，如果你不知道自己的想法从何而来，可能就是在模仿另一个模仿者，等到你逐渐对一件事情产生热情的时候，就不会满足于模仿了，品味就进入了第二阶段，开始自觉地进行原创，最伟大的大师最终会达到一种超脱自我的境界，一心想找到正确答案，如果别人已经回答出了一部分，那就没理由不拿来用。足够自信地使用他人地成果，完全不担心因此丧失个人的特点。</p>
<ul>
<li><p>好设计常常是奇特地设计 不仅优美，而且美得很奇特。</p>
</li>
<li><p>好设计是成批出现的 让有天赋的人聚在一起，共同解决某个难题。互相激励比天赋更重要 个人最多对趋势产生一定的影响，但你不可能决定趋势，实际上是趋势决定了你我。</p>
</li>
<li><p>好设计常常是大胆的设计 无法容忍丑陋的东西还不够，只有对这个领域非常熟悉，你才可能发现哪些地方可以动手改进，必须锻炼自己。只有成为某个领域的专家之后，才会听到心里有一个细微的声音说：“这样解决太糟糕了！一定有更好的选择。” 不要忽视这种声音，要培育他们；优秀作品的秘诀就是：非常严格的品味，再加上实现这种品味的能力。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Random Thoughts</category>
        <category>2019</category>
      </categories>
      <tags>
        <tag>Essay</tag>
      </tags>
  </entry>
  <entry>
    <title>Random-Thoughts</title>
    <url>/2019/03/01/Random%20Thoughts/2019/2019-03/</url>
    <content><![CDATA[<p>“子曰：‘笃信好学，守死善道。危邦不入，乱邦不居。天下有道则见，无道则隐。邦有道，贫且贱焉，耻也，邦无道，富且贵焉，耻也。’”</p>
<span id="more"></span>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-03-01</span><br></pre></td></tr></table></figure>

<p>最好的文字来自不停的修改， 编程尤其如此，再多的修改都不过分，为了写出优秀软件，你必须同时具备两种互相冲突的信念。</p>
<p>一方面，你要像出生牛犊一样，对自己的能力信心万丈；另一方面，你又要像历经沧桑的老人一样，对自己的能力抱着怀疑态度。在我的大脑中，有一个声音说”千难万险只等闲“，还有一个声音却说”早岁哪知世事艰“。两种信念并不矛盾，乐观主义和怀疑倾向对解决难题可能性保持乐观，同时对当前解法的合理性保持怀疑。</p>
<p>只有对现状不满，才会早就杰出的成果。任何措施，只要能让”再设计“周而复始进行下去，都是可取的，文章可以修改到满意为止，但软件的修改通常来说可以无休止地进行下去。文章地读者，软件地使用者.</p>
<p>好好睡觉，好好玩耍，好好做题，大道甚夷而民好径。</p>
<p>安排定律：如果大学四年里，你被学校安排得明明白白的，那么毕业后你迟早也会被这个社会安排得明明白白的。</p>
<ul>
<li>一门机器学习基础课程-&gt;对标斯坦福CS229</li>
<li>一门计算机视觉-&gt;对标斯坦福CS231</li>
<li>一门自然语言处理-&gt;对标斯坦福CS224</li>
<li>一门概率图模型-&gt;对标斯坦福CS228</li>
<li>一门强化学习-&gt;对标斯坦福CS234</li>
<li>一门机器学习实践课-&gt;对标斯坦福CS20SI</li>
<li>一门大数据挖掘技术-&gt;对标斯坦福CS246</li>
<li>一门凸优化课程-&gt;对标斯坦福EE364</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-03-11</span><br></pre></td></tr></table></figure>

<p>高质量课题组的论文。如：斯坦福Chris Manning课题组，UIUC韩家炜教授课题组，哈工大刘挺教授课题组（SCIR），南京大学周志华教授课题组（LAMDA），清华大学刘知远教授课题组等等。</p>
<p>人生的竞争就不再是单线程单一维度的了，再也不是那个我比你多考几分我就能全方面碾压你的时代了，越晚想明白这个问题，就越会在深夜里怀疑人生。</p>
<p>我们似乎都没有太大的进步，比如：</p>
<ul>
<li>我们依然没法写出一个世界公认好用的计算机语言，python是荷兰人的，而ruby是日本人的；</li>
<li>我们依然没法做出一个独立的有技术自信的操作系统，当unix最流行的时候，是一个芬兰赫尔辛基大学的学生写出的最早的linux内核，然后影响了全世界；</li>
<li>我们依然没有一个像样的IDE，要不是IBM走投无路把eclipse开源，我们连瓢都画不出来；</li>
<li>我们没有能生产高性能大规模集成电路的流水线，没错天河二号用的还是Intel的至强处理器；</li>
<li>我们还不能设计高性能的便携设备处理器，如果MTK不算做我们民族产业的话。</li>
</ul>
<p>互联网更多是通过财大气粗的方式堆砌起来的，人口红利逐渐变小，基础本来就不扎实，呃不对，基本上没有基础。华为的做法就完全是市场经济的玩法，每年能消化大量计算机高端毕业生的公司，都开始不得不壮士断腕，减少那些无法为企业创造足够价值的人，或许更多的从业者真的要考虑自己的未来</p>
<p>培训机构出来的计算机速成从业人员，本质上还是农民工。</p>
<ul>
<li>越来越来的师弟师妹正义无反顾的走捷径试图走类北大青鸟路线的时候，</li>
<li>众多的科研人员正在聚集在所谓深度学习这种计算机软件理论与应用技术的交叉领域的时候，</li>
<li>计算机的体系结构与组成原理并没有自主化、生产工艺还无法跟上的时候，</li>
<li>个大厂商联合一起组团骗人、坑蒙拐骗的时候</li>
</ul>
<p>我脑子涌现出来的那个木头搭建起来的空中楼阁，怎么能同人家钢筋混凝土的摩天大楼比呢？</p>
<p>当下这个年头，小孩子被游戏迷住，大孩子被IT创业迷住，本质上都是一样的，都是被电脑编程了。</p>
<p>腾讯几乎把握住了当前热门的游戏，要么就收购，不行就抄一个，而且还弄出了电子竞技这么一个伎俩来诱惑小朋友，这种做法和大海中用歌声吸引水手的女妖有区别吗？</p>
<p>在如今的商业环境已经荡然无存，这种创业对计算机事业来说，并不具备太大的意义，我们教给孩子的不应该是一种经过稀释的知识，孩子要学的并不是大人所掌握的知识的小孩版，首先了解小孩的学习机制，才能为其提供很好的教育。</p>
<p>本质上，电脑的普及，并没有让孩子受惠，反而让他们争相成为了奴隶。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-03-22</span><br></pre></td></tr></table></figure>

<p>理解真正的世界，微积分则是已知的认识这个物理世界最好的数学工具之一。微积分的思维本质上就是一致的，通过编程认知世界，编程本身并不能使你成为更懂思考的人，只有当你通过编程，在电脑上做些模拟，然后加深了对世界的理解和认识之后，才真正接触到帕普特说的power ideas.整个世界都日趋复杂的今天，我们更需要懂得这种思维的人，而电脑则是培养这样的思维的最好的工具，电脑程序可供性。</p>
<p>debugging之于思考的意义，写出来的程序不一定能运行良好，需要调试，改变某个参数，或者修改某项指令，改完之后再测试，加入不行，再改，如此反复，直到最后程序按照预期那样运行。</p>
<p>去腾讯化，重要的东西绝对不会放到腾讯系的产品</p>
<p>以国之名，决定我对我自己这些信息的处置方式，接受别的信息导入而不提供信息导出功能的貔貅机制，本来就是一个流氓的做法，有文化的流氓是很可怕的。UNIX，每个程序不要做过多的事情，做好自己的事情就好了，信息化时代也就是这样，不要过多依赖某个程序或产品，</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-03-30</span><br></pre></td></tr></table></figure>

<p>递归和归纳，只是方向不同。“从一般性前提推出个别结论”的是递归，</p>
<p>把握结构是分解问题的关键</p>
<ul>
<li><p>“0”——做出简单规则</p>
</li>
<li><p>“逻辑”——两个世界</p>
</li>
<li><p>“余数”—— 分组</p>
</li>
<li><p>“数学归纳法”——通过2个步骤挑战无穷</p>
</li>
<li><p>“排列组合”——关键在于认清问题的性质</p>
</li>
<li><p>“递归”——在自己中找出自己</p>
</li>
<li><p>“指数爆炸”…… 利用此可将复杂问题简化</p>
</li>
<li><p>“不可解问题”——展示了原理上的界限 所有问题的集合是比可数更多的无穷，那里有我们无法企及的世界。</p>
</li>
</ul>
<p>线性无关= 不压缩</p>
<p>线性相关= 压缩</p>
<p>建立一种感觉，面对那些理所当然的想象时，要能够理所当然做出判断。理解矩阵的秩。</p>
]]></content>
      <categories>
        <category>Random Thoughts</category>
        <category>2019</category>
      </categories>
      <tags>
        <tag>Essay</tag>
      </tags>
  </entry>
  <entry>
    <title>Random-Thoughts</title>
    <url>/2019/01/01/Random%20Thoughts/2019/2019-01/</url>
    <content><![CDATA[<p>这个世界需要英雄,</p>
<p>知道今日事未毕,自然晚睡.</p>
<p>不知明日事何去,自然晚起。</p>
<span id="more"></span>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-01-01</span><br></pre></td></tr></table></figure>

<p>新生你最好从c（pure pp）java（pure oop）haskell（pure fp）这三个语言同时入手，一起学，而不是局限于某一个paradigm，最理想的是把lisp也给搞一下，这四门语言几乎构成了后续所有语言的基础，这四门语言相差甚大，互相之间几乎是正交的，就不存在一个语言能替代另外一个语言的情况，因为写的时候思路是完全不一样的（虽然不是完全不可能，但是你用c的思路去写java或者用java的思路去写haskell，蛋疼异常，可以试试）</p>
<p>大多数所谓的业务，都没有太过于复杂的算法，大多数目前所谓的业务，都是crud，你会发现，这些业务，都没有太复杂的数学在里面，业务部门给你的需求，基本上都能用小学甚至初中的数学表达出来，比如把这个数据放到那边去，把那个数据从那边搬运到这边来，把这个界面给变得红一点等等，为什么会这样？</p>
<p>因为现阶段光是伺候这些需求，都已经耗费了编程师们大部分时间了，你嘴巴上说把一个数据从这里搬运到那边去，说起来简单，但其实因为类型的不一致，会有大量对字段等很傻逼的工作要去做，当然我们可以简化，但是这里面会有不少问题，不同系统之间的数据搬运甚至产生了两个单独的专业，ee的通信和cs的网络工程，就光解决这些数据搬运问题，都有专门的专业来做这事，你就能想出来这里面有多少门道了，当然最理想的状态就是我们写一行代码，机器就按照我们想的方式执行了，但是这不现实，因为现在生产力还没有发展到这个阶段，我们还是需要人去伺候一下机器</p>
<p>底层需要的人会越来越少，不是不需要，只是随着封装程度的加强，需要的人越来越少，但是应用层需要的人会越来越多，就像以前开发游戏机上的游戏，任天堂时候，你需要懂点电子元件你才能开发，还记得任天堂游戏机最早的载体是卡带嘛？后来就变成光盘了，那你不懂电子其实也没啥关系，再后来变成unity那种了，你不造引擎的话，你完全可以选择高层语言来实现</p>
<p>对于<strong>多数</strong>人来说，java甚至python等脚本够用了，我们也发现了，java学得好的人，c很快，相反，如果不会java，只会c的人，往往是上个世纪的毕业生</p>
<p>如果一个人又会java又会c，优秀，可以寄希望于他能贡献openjdk这些开源，可担大任</p>
<p>如果只会java，那这个人可用，技术可用，有发展前景，能满足业务需要，毕业生有这个起点很好</p>
<p>但是一个人如果不会java，那c再好也没啥用，这个人技术多半已经落伍了，对于工业界真正的发展，几乎没有什么概念，多半在闭门造车。</p>
<p>上个世纪的毕业生，很多只会c，拒绝甚至仇视使用java，为什么？因为它需要学习oop的那些理论，它不理解的时候就会愤怒，把自己的无能归咎于社会对他的不公平，我只会c，你凭什么要求我会java，我不会，社会不公平……一些极端的结果就是去跳楼了，了解掉自己的生命，所以技术如果不能适应时代，那结果往往是比较恐怖的，尤其是国内的基本福利还没有充分建立起来的前提下</p>
<p>但这种极端做法于事无补，你应该适应社会，而不是让社会适应你，同样道理，你会发现很多只会spring的java开发，对于fp等毫无概念，让他们学习也往往面临着比较大的阻力，反复论证了前面说的，人是习惯动物，所以你的老师做法有他的道理，就是保底，你会java，至少保证你有了oop的思维方式，至少能满足社会的需要，成为一个对社会有用的人，然后再来谈发展，可能你对于数学的悟性比较高，就可以搞fp语言，可能你对底层比较感兴趣，那可以贡献一下openjdk等等</p>
<p>满足社会需要，把你自己养活了之后，再考虑其他的</p>
<p>oop 重要过 fp 重要过 pp</p>
<p>java 重要过 haskell 重要过 c，lisp可学可不学</p>
<p>三种都会最好</p>
<p>如果三选一，选java（oop）</p>
<p>如果三选二，选java和haskell（oop和fp）//scala微笑着点点头。</p>
<p>社会需要你会java，你就先把java搞定，然后再谈其他的，其他的也是未来优先于过去，fp重要过pp，因为未来更有发展，你选fp的话，就是发文章你也有的写，pp关联的东西，都被人搞烂了，发文章的难度要大得多，你更容易成为炮灰</p>
<p>最后说一下什么时候需要投入c，这个是总理需要操的心，需要政府扶持了，一般是政府扶持下，大企业投入，如果党政军都不支持的话，那光靠情怀这事也很难，毕竟人家做了那么多年了，所以说什么os，芯片这些，还是要看政府的支持力度</p>
<p>其实很多行业都一样，比如基础建设，都是如此，政府如果不扶持高铁，航空航天，民营企业家去搞这些？不可能的事。</p>
<p>oop的话，企业主导，企业自身就有大量的需求</p>
<p>fp的话，大学主导，现在研究机构都在搞人工智能研究</p>
<p>pp的话，政府主导，政府需要考虑摆脱对国外的技术依赖和封锁</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-01-11</span><br></pre></td></tr></table></figure>

<p>这么多年来，无论国内国外，为找工作学java的，就没遇到过后悔的</p>
<p>use it or lose it</p>
<p>计算机只是工具而已, 如果真感兴趣,学就是了,学完用就是了,没有多高级的,去大学里面上几门课就会了, cs 不用转,感兴趣的话,跟英语是一样的技能; 不需要花多少时间.学完Java ,各种东西就可以开始做了,甚至在学习的过程中,就已经开始做各种软件了,学就是,学完用工具这种东西,use it or lose it</p>
<p>大多数程序员并没有在创造世界,很多人连新技术都不敢使用,连升级都不敢升级,还创造什么世界. 为了生存在翔山上继续铲翔而已.</p>
<p>真创造世界，应该有独立自主的意识，就我要做这事，我要按照我的想法去塑造这个软件，这种叫做创造世界，但是大多数程序员并没有这个权力，他们只是在产品等业务方的要求下，去完成一个任务以换取报酬，从这一点上说，比起程序员，产品更有资格说他们在创造世界，因为被创造的软件世界是按照他们的想法去塑造的</p>
<p>都tm0202年了, 技术人员应该尽可能多的解决问题,而不是把自己能做的事情局限在一个小范围内,如果有一天,自己给自己画的边界被人破坏了呢?</p>
<p>如果满大街都是各种全栈,桌面能做的,移动能做,云端也能做的年轻人的时候,我只会后端,前途堪忧啊</p>
<p>绝大部分程序员并不具备这种能力</p>
<p>以前的会计,律师,它们都有事务所,很容易就做到合伙人了,但程序员不是,程序员反而更接近流水线的工人,只懂自己那一小块,对整个流程并不了解,我们认为一般程序员,应该你让他做啥,他都能做,写个游戏,写个网站,使用云计算,写个手机app这种才对嘛；这种才符合我们对于一个程序员的认知</p>
<p>感觉遇到的很少，它们很多人也都没有这个意愿去承担责任，　这个有点危险，资本吃人不吐骨头；四大的家伙从来不认为自己能在四大里面呆一辈子；　意识到了根本不可能在公司里面混一辈子</p>
<p>自己如何搞；我们必须真全栈；像会计师，律师那样去写代码，去主动承担责任；我们是编程师；不是程序员</p>
<p>不以流水线为目的，提升编程师单兵作战能力；　这是设计问题，做到独立开发者.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-01-16</span><br></pre></td></tr></table></figure>

<p>软件开发的核心就是：技术+艺术 -&gt; 软件产品，渠道都建好了</p>
<p>程序员不要每天埋头码,抬头看看码的意义何在,知识是我们的工具你要用工具来武装自己,然后最重要的是,要用工具来产生结果,否则再好的工具,也就是个摆设</p>
<ul>
<li><p><del>微服务框架</del> 进化架构</p>
</li>
<li><p><del>新的编程语言</del> 干净代码，设计模式，DDD</p>
</li>
<li><p><del>最小二乘</del> 精益生产原则</p>
</li>
<li><p><del>Hystrix</del> 容错模式</p>
</li>
<li><p><del>码头工人</del> 持续交付</p>
</li>
<li><p><del>角度的</del> Web，HTTP和REST</p>
</li>
<li><p>编程语言是不同的，但是设计气味是相同的。</p>
</li>
<li><p>框架是不同的，但是相同的设计模式也可以照耀。</p>
</li>
<li><p>开发人员不同，但是与人打交道的规则是统一的。</p>
</li>
<li><p><a href="https://www.amazon.com/gp/product/020161622X/?tag=mustr-20">实用程序员</a></p>
</li>
<li><p><a href="https://www.amazon.com/gp/product/0132350882/?tag=mustr-20">清洁代码</a></p>
</li>
<li><p><a href="https://www.amazon.com/gp/product/0137081073/?tag=mustr-20">清洁编码器</a></p>
</li>
<li><p><a href="https://www.amazon.com/gp/product/0321125215/?tag=mustr-20">域驱动设计</a></p>
</li>
<li><p><a href="https://www.amazon.com/gp/product/0321503627/?tag=mustr-20">不断增长的面向对象软件，以测试为指导</a></p>
</li>
<li><p><a href="https://www.amazon.com/gp/product/0321601912/?tag=mustr-20">持续交付</a></p>
</li>
</ul>
<p>编程师要真的成为一个职业，最重要的还是全栈化，而不是流水线化,一旦有什么东西一个人搞不定，比如前端不会后端，不会数据库，后端不会移动开发,那出产品就需要找别人一起做，那人一多就需要大量的沟通.那想不来坐班，嗯，估计是不可能的，在家里没法沟通</p>
<p>经验就是,学的越多,学得越快.自己需要思考和规划问题</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-01-21</span><br></pre></td></tr></table></figure>

<h2 id="多写文档少些注释"><a href="#多写文档少些注释" class="headerlink" title="多写文档少些注释"></a>多写文档少些注释</h2><ul>
<li>文档：是和代码相分离的，文档通常包括主要的业务逻辑、系统架构、配置、名词解释、核心类使用说明等这些宏观性的东西。</li>
<li>注释：直接写在代码中的，通常都是变量赋值分支循环之类微观的介绍说明。</li>
</ul>
<p>文档能够帮助一个新人尽快的了解项目的整体情况。而且这些东西通常是比较恒定的，变化较少的。写和读都没啥大毛病。</p>
<p>但是注释，滥用的话，问题很多代码质量不够，注释来凑，注释和代码不一致，最坑爹的是因为改动，一开始注释和代码通常都是一致的，但是经不住改啊。太多项目，改来改去就改了代码忘了注释，一旦代码和注释不同步，后面的同学：你觉得是注释错了呢，还是代码错了？¯_(ツ)_/¯</p>
<p>高估了你们的汉语/英语表达能力，写的注释还没有代码好理解哈哈。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-01-30</span><br></pre></td></tr></table></figure>

<h2 id="神逻辑"><a href="#神逻辑" class="headerlink" title="神逻辑"></a>神逻辑</h2><ol>
<li><p>实验做的不好就不吃饭了。(人是铁饭是钢)</p>
</li>
<li><p>以为理论水平高，实验水平就高。(二者至少在前期没有特别明显的相关性)</p>
</li>
<li><p>自以为理论水平高，理论水平就高。(跨一个领域就吃瘪)</p>
</li>
<li><p>以为只要实验做的好一切都会好。(家人好吗？和老板关系好吗？和同学关系好吗？赚钱吗？有对象吗？总有不如意的地方。)</p>
</li>
<li><p>觉得自己是名校毕业生，就一定比双非学生做的好。(前期没区别，后期好像也没什么区别)</p>
</li>
<li><p>觉得文章发的多的PI水平就高。(可能他们更适合学“术”，而不是“学”术)</p>
</li>
<li><p>存在某种迷之鄙视链。如全合成和方法学的人互相鄙视，做化学生物学的和做化学的互相鄙视。(都是小白鼠，应该抱团取暖而不是互相砸饭碗)</p>
</li>
<li><p>摆不正自己学生的位置，觉得自己是博士(候选人)很厉害。(学生就是学生，别掺和的事情太多了。但是那些真正为大家谋福祉的人，请尊重他们做的一切)</p>
</li>
<li><p>对某些事情过于热情。比如第一次学过柱子就喜欢过柱子，结果过了三天柱子过恶心了之后该过柱子的时候反而不去过柱子了(绕口令，雾……要平常心，以后不缺过柱子的时候)</p>
</li>
<li><p>对于某些人过于热情。比如，没有比如，不想比如了。</p>
</li>
<li><p>以为自己可以和导师正面对抗，讨价还价。(你看看你的蛋蛋捏在谁的手里)</p>
</li>
<li><p>对于一些小的新现象就沾沾自喜，结果发现已经被别人报道了就怒不可遏。(心态不端正容易把自己气死)</p>
</li>
<li><p>以为测试中心的技术员，行政部门的公职人员，各大公司的试剂销售商，都是给自己服务的，谁让他们有工资。(他们给你服务的原因，有的是想赚钱，有的是不想得罪你的老板。)</p>
</li>
<li><p>一个问题非要辩倒别人才心甘。(留点唾沫咽下去暖和暖和肠胃不好么)</p>
</li>
<li><p>吃饭的时候聊学术。(不一定所有人都热衷于学术)</p>
</li>
<li><p>和非学术圈的人聊学术。(会让别人觉得无聊)</p>
</li>
<li><p>觉得自己太菜。(其实大家都很菜)</p>
</li>
<li><p>觉得老板太菜。(老板只不过是懒得理你)</p>
</li>
<li><p>一开始就把毕业的事想好了。(变数太大，说不准以后你去扫厕所了呢)</p>
</li>
<li><p>喜欢用一些结论性的语句。如这个肯定发不了好文章，这个肯定是xxx的原理。(打脸可快了，不信你试试)</p>
</li>
<li><p>以为在知乎上看万粉的V的回答能学到经验，其实他只是在吐槽……</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Random Thoughts</category>
        <category>2019</category>
      </categories>
      <tags>
        <tag>Essay</tag>
      </tags>
  </entry>
  <entry>
    <title>Random-Thoughts</title>
    <url>/2019/04/01/Random%20Thoughts/2019/2019-04/</url>
    <content><![CDATA[<p>一切问题都是利益问题，一切冲突都是利益冲突。</p>
<span id="more"></span>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-04-01</span><br></pre></td></tr></table></figure>

<p>为什么大公司愿意招募基础扎实，知识完备的科班出身者，哪怕这人“只会刷题，没有实际经验”，而不去招募“10年工作经验”的人——很多看似工作经验很多的人，如果只是重复低级劳动，或是了解技术层面非常浅薄的话，进入公司后工作经验并没有太大用处，成长性可能还真不如基础扎实的人</p>
<p>这年头木匠都会sketchup了，而有些人还沉醉在翻字典当文化人的梦想当中，</p>
<p>因特网是政府，学校，工业界合作的最成功的示例之一。两点因素最重要：美国政府30年持续不变的投资，以及充满激情的研究人员对麻省理工学院的提出的“粗略一致和能用的代码”的投入。目标是星辰和大海</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-04-11</span><br></pre></td></tr></table></figure>

<p>letter-writing 任何书信的种类、内容和口吻都取决于写信的场合、写信人和收信人的身份。随意还是正式、朴实还是华丽、轻松还是严肃、开心还是沉重、宣泄情感还是就事论事，都取决于这三个条件。</p>
<p>写信最首要、最重要的要求是自然和简单。一封信不应带给读者紧张的阅读感，而应是写信人思想的自然倾泻。我们不喜欢聊天时刻板呆滞的人，同样，读者也不喜欢刻板呆滞的信，如果一封信的口吻如聊天般轻松的话，那么它立马就能吸引读者的注意力。</p>
<p>I beg you will acknowledge receipt and should the owner be found I trust you will notify me, so that I may claim some reward for my honesty.</p>
<p>书信可以分为以下种类：友人和熟人之间的信件、商业关系的信函、公职人员的官方信、教师的教诲信以及那些讲述每日要闻的信，即新闻简报。</p>
<p>语言得体，letters of friendship</p>
<p>business letters</p>
<p>诚信永远是最好的原则</p>
<p>official letters 正式文件</p>
<p>letter designed to teach didactic letter 强调</p>
<p>无他唯熟尔 newsletter　诙谐幽默</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-04-21</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>对你的源码负责</strong></p>
</li>
<li><p><strong>不要容忍破窗</strong>，它们会增大你软件的熵（这个也是要结合实际情况看的）</p>
</li>
<li><p><strong>记住大图景</strong>，注意方向是否有误，不要光低头做事</p>
</li>
<li><p><strong>知道在何时打住</strong>，你不可能做到完美</p>
</li>
<li><p>定期为你的知识资产投资</p>
<p>，就像经济投资一样</p>
<ul>
<li>定期投资</li>
<li>多元化</li>
<li>管理风险，不要把所有技术放在一个篮子里</li>
<li>低买高卖，能看清形势</li>
</ul>
</li>
<li><p>为此，你需要</p>
<ul>
<li><strong>每年至少学习一种新语言</strong></li>
<li><strong>每季度阅读一本技术书籍</strong></li>
<li>也要阅读非技术书籍</li>
</ul>
</li>
<li><p><strong>批判地思考你读到和听到的</strong></p>
</li>
<li><p>如何表达自己很重要</p>
<p>，这会增加你的影响力</p>
<ul>
<li>你想让谁知道</li>
<li>你想让他们知道什么</li>
<li>他们是否感兴趣</li>
<li>他们需要知道细节么</li>
<li>如何促使他们与你交流</li>
</ul>
</li>
<li><p>DRY，不要重复自己</p>
<ul>
<li>强加的重复 =&gt; 使用自动生成，减少是信息冗知识</li>
<li>无意的重复 =&gt; 优良的设计</li>
<li>无耐心的重复 =&gt; 考虑长远</li>
<li>开发者间的重复 =&gt; 加强组内交流，制定代码规范，<strong>制造更容易复用的环境</strong></li>
</ul>
</li>
<li><p>减少无关事物的影响</p>
<p>，非正交 =&gt; 次级效应 =&gt; 补偿行为 =&gt; 经验依赖</p>
<ul>
<li>好处：提高生产率（促进复用）、降低风险（风险隔离，易测试）</li>
<li>分层设计、抽象和接口约定</li>
<li>避免使用全局变量</li>
<li>考虑使用库的代码侵入性</li>
<li>文档和认同正交性</li>
</ul>
</li>
<li><p><em>不存在最终决策</em>，当需求变动频繁的时候，不仅要思考程序架构如何适应这种变动，也要反思是否是设计者没想清楚到底要做什么</p>
</li>
<li><p>使用曳光弹找到目标</p>
<p>，即MVP + 快速迭代 + 即时的反馈</p>
<ul>
<li>逐步逼近，摸着石头过河</li>
<li>曳光弹模式永远包含着一个可用的软件版本</li>
</ul>
</li>
<li><p><strong>原型和便笺</strong>，使用原型去表达和快速验证项目的可行性</p>
</li>
<li><p>靠近问题领域编程</p>
<ul>
<li>使用DSL（Domain Specified Language）</li>
</ul>
</li>
<li><p>估算，以避免意外</p>
<p>，主要用来估计工期、分析风险</p>
<ul>
<li>适当地降低估算速度，慎重思考隐藏的风险</li>
</ul>
</li>
</ul>
<p>工具成为双手和大脑的延伸，优秀的工具可以放大你的才干。</p>
<ul>
<li><p><strong>纯文本以其自解释能力几乎可以永久保存</strong>，XML、JSON就是利用此成为通用的数据表现形式</p>
</li>
<li><p><strong>利用shell的力量</strong>，它是自动化任务避不开的工具</p>
</li>
<li><p>要能烂熟地使用你的编辑器</p>
<p>要使用高级的编辑器</p>
<p>，由于你的所有开发工作都建立在它上面，做好这两点可以节省你大量时间</p>
<ul>
<li>反思一下，在用你的编辑器时，你有遇到过到比较繁琐的操作吗？</li>
<li>是因为你不会高级使用方式，还是编辑器本身不支持？</li>
</ul>
</li>
<li><p><em>总是使用源码控制</em>（这一点早已成为共识）</p>
</li>
<li><p>调试，debug</p>
<ul>
<li><strong>通常认为匪夷所思的bug，都来自健忘、自大和愚蠢</strong></li>
<li>QA角色的重要性之一：帮助复现、找到规律性</li>
<li>橡皮鸭调试法</li>
<li><strong>二分查找法</strong></li>
<li>如果bug来自某人的错误假设，那么需要清除团队其他人的相同误解</li>
</ul>
</li>
<li><p><strong>学习一种文本操纵语言或工具</strong>，例如awk，sed，处理数据和结果时一定能用上</p>
</li>
<li><p>编写代码生成器</p>
<ul>
<li>开发者手动触发，如模板代码</li>
<li>程序自动出发，如scheme to idl，idl to code</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-04-30</span><br></pre></td></tr></table></figure>

<h2 id="偏执编程"><a href="#偏执编程" class="headerlink" title="偏执编程"></a>偏执编程</h2><ul>
<li><p>通过合约设计</p>
<p>，约定好接口，合作方基于接口开发</p>
<ul>
<li>强类型语言更容易实现这一点</li>
</ul>
</li>
<li><p><strong>早崩溃</strong>，这在需要编译的软件开发上比较科学，对于web应用来说却不是这样</p>
</li>
<li><p>使用断言确保某事不会发生</p>
<p>，减少预设条件代理的隐藏bug</p>
<ul>
<li>不要滥用断言</li>
</ul>
</li>
<li><p><strong>只在异常处用异常</strong></p>
</li>
<li><p><strong>一定记住释放请求的资源</strong>，如内存、句柄等，可以通过封装统一的资源类实现自动的资源释放</p>
</li>
</ul>
<h2 id="时间的魔力"><a href="#时间的魔力" class="headerlink" title="时间的魔力"></a>时间的魔力</h2><ul>
<li><p>德墨忒尔法则</p>
<p>，使模块间的依赖减少到最小</p>
<ul>
<li>物理解耦</li>
</ul>
</li>
<li><p>要配置不要hardcode</p>
<p>，使用元数据动态描述你的程序</p>
<ul>
<li><strong>抽象放进代码，细节放进元数据</strong></li>
</ul>
</li>
<li><p>时间耦合：考虑并发和事件的发生顺序</p>
<ul>
<li>在异步代码中，总考虑并发</li>
</ul>
</li>
<li><p>一些GUI的设计模式</p>
<ul>
<li>发布订阅</li>
<li>MVC</li>
</ul>
</li>
<li><p>基于规则/规则集的黑板系统</p>
<ul>
<li>黑板给出统一接口</li>
<li>耦合方通过调用黑板接口避免耦合</li>
<li>黑板通过规则给出输出</li>
</ul>
</li>
</ul>
<h2 id="编码时"><a href="#编码时" class="headerlink" title="编码时"></a>编码时</h2><ul>
<li><p>不要靠巧合编程</p>
<ul>
<li>改动要有文档沉淀</li>
<li>只依靠文档中记录的行为</li>
<li>把你的假设记入文档</li>
</ul>
</li>
<li><p>在大数据量时</p>
<p>，考虑算法数量级</p>
<ul>
<li>兼顾效率和可读性</li>
</ul>
</li>
<li><p>早重构，常重构</p>
<p>，代码是业务设计的近似同构体，常重构才能保证代码完美贴合需求设计</p>
<ul>
<li>重构和功能开发分开进行</li>
<li>重构一定要有测试</li>
</ul>
</li>
<li><p>优秀的代码不是看新增了多少行，而是看删除了多少行</p>
</li>
<li><p>编写易于测试的代码</p>
<ul>
<li>测试你的软件，否则你的用户会代你做测试</li>
</ul>
</li>
</ul>
<h2 id="项目开始前"><a href="#项目开始前" class="headerlink" title="项目开始前"></a>项目开始前</h2><blockquote>
<p>完美，不是在没有什么需要增加，而是在没有什么需要去掉的时候达到的。</p>
</blockquote>
<ul>
<li><p>去挖掘需求，思考用户做特定事情的原因，和如何去做的方式，</p>
<p>让需求成为一种一般性的陈述</p>
<ul>
<li><strong>制作需求文档时的一大危险是太过具体，好的需求文档会保持抽象</strong></li>
<li>经常性复盘</li>
<li>鼓励文档分享和交流</li>
</ul>
</li>
<li><p>巧妙解决看似不能解决的难题</p>
<p>，关键要找到</p>
<p>真正的约束</p>
<p>，去思考</p>
<ul>
<li>有更容易的方法么</li>
<li>你是在解决真正的问题，还是被外围的技术问题转移了注意力</li>
<li>这件事为什么是一个问题</li>
<li>是什么让它难以解决</li>
<li>它必须这么做么</li>
<li>它必须完成么</li>
</ul>
</li>
<li><p><strong>准备好再开始，但不要让它成为你懈怠的借口</strong></p>
</li>
<li><p><strong>不要成为方法学的奴隶</strong></p>
</li>
</ul>
<h2 id="实效项目"><a href="#实效项目" class="headerlink" title="实效项目"></a>实效项目</h2><ul>
<li><p>团队建设</p>
<ul>
<li>不留破窗户（考验leader的管理能力）</li>
<li>经常性的复盘和例会</li>
<li>减少团队成员分工的冗余</li>
<li>自动化项目流程 =&gt; 效率工程团队开发内部工具</li>
<li>制造context，给成员足够空间</li>
</ul>
</li>
<li><p>不要使用手动流程</p>
<p>，它不可控且难以复制</p>
<ul>
<li>shell、crontab</li>
<li>CI和自动化持续集成</li>
<li>代码生成</li>
<li>自动化测试</li>
<li>代码review和源码版本控制流程</li>
</ul>
</li>
<li><p>常测试，早测试，自动化测试</p>
<ul>
<li>单元测试/集成测试/压力测试/回归测试</li>
<li><strong>测试状态覆盖，而不是代码覆盖</strong>，代码覆盖率提供的意义有限</li>
</ul>
</li>
<li><p>关于如何生产文本</p>
<ul>
<li>所有文档都是代码的反映</li>
<li>源码注释应该去把项目里那些难以描述、容易忘记、不能记录在其他地方的东西记载下来</li>
<li>比无意义的名称更糟糕的是<strong>有误导性</strong>的名称</li>
<li>除非有程序或人工维护，否则任何形式的文档都只是<strong>快照</strong></li>
</ul>
</li>
<li><p>温和地超出用户期望</p>
<p>，如</p>
<ul>
<li>友好的新手指引</li>
<li>快捷键</li>
<li>自动化安装</li>
</ul>
</li>
<li><p><strong>自豪地为你的作品签名</strong></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Random Thoughts</category>
        <category>2019</category>
      </categories>
      <tags>
        <tag>Essay</tag>
      </tags>
  </entry>
  <entry>
    <title>Random-Thoughts</title>
    <url>/2019/08/01/Random%20Thoughts/2019/2019-08/</url>
    <content><![CDATA[<p>酒醒只在花前坐，酒醉还来花下眠</p>
<p>半醒半醉日复日，花落花开年复年</p>
<span id="more"></span>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-08-01</span><br></pre></td></tr></table></figure>

<h2 id="青年在选择职业时的考虑"><a href="#青年在选择职业时的考虑" class="headerlink" title="青年在选择职业时的考虑"></a>青年在选择职业时的考虑</h2><p>普鲁士王国莱因省特里尔镇特里尔中学 卡尔·马克思（17 岁）</p>
<p>自然本身给动物规定了它应该遵守的活动范围，动物也就安分地在这个范围内活动，而不试图越出这个范围，甚至不考虑有其它范围存在。神也给人指定了共同的目标──使人类和他自己趋于高尚，但是，神要人自己去寻找可以达到这个目标的手段；神让人在社会上选择一个最适合于他、最能使他和社会变得高尚的地位。</p>
<p>　　这种选择是人比其它创造物远为优越的地方，但同时也是可能毁灭人的一生、破坏他的一切计划并使他陷于不幸的行为。因此，认真地权衡这种选择，无疑是开始走上生活道路而又不愿在最重要的事情上听天由命的青年的首要责任。</p>
<p><strong>每个人眼前都有一个目标，这个目标至少在他本人看来是伟大的，而且如果最深刻的信念，即内心深处的声音，认为这个目标是伟大的，那它实际上也是伟大的</strong>，因为神决不会使世人完全没有引导者；神轻声地但坚定地作启示。</p>
<p>　　但是，这声音很容易被淹没；我们认为是热情的东西可能倏忽而生，同样可能倏忽而逝。也许，我们的幻想蓦然迸发，我们的感情激动起来，我们的眼前浮想联翩，我们狂热地追求我们以为是神本身给我们指出的目标；但是，我们梦寐以求的东西很快就使我们厌恶，于是，我们便感到自己的整个存在遭到了毁灭。</p>
<p>　　因此，我们应当认真考虑：<strong>我们对所选择的职业是不是真的怀有热情？发自我们内心的声音是不是同意选择这种职业？我们的热情是不是一种迷误？我们认为是神的召唤的东西是不是一种自我欺骗？不过，如果不对热情的来源本身加以探究，我们又怎么能认清这一切呢？</strong></p>
<p>　　伟大的东西是闪光的，闪光会激发虚荣心，虚荣心容易使人产生热情或者一种我们觉得是热情的东西；但是，被名利迷住了心窍的人，理性是无法加以约束的，于是他一头栽进那不可抗拒的欲念召唤他去的地方；他的职业已经不再是由他自己选择，而是由偶然机会和假象去决定了。</p>
<p>　　我们的使命决不是求得一个最足以炫耀的职业，因为它不是那种可能由我们长期从事，但始终不会使我们感到厌倦、始终不会使我们劲头低落、始终不会使我们的热情冷却的职业，相反，我们很快就会觉得，我们的愿望没有得到满足，我们的理想没有实现，我们就将怨天尤人。</p>
<p>　　但是，不仅虚荣心能够引起对某种职业的突然的热情，而且我们也许会用自己的幻想把这种职业美化，把它美化成生活所能提供的至高无上的东西。我们没有仔细分析它，没有衡量它的全部分量，即它加在我们肩上的重大责任；我们只是从远处观察它，而从远处观察是靠不住的。</p>
<p>　　在这里，我们自己的理性不能给我们充当顾问，因为当它被感情欺骗，受幻想蒙蔽时，它既不依靠经验，也不依靠更深入的观察。然而，我们的目光应该投向谁呢？当我们丧失理性的时候，谁来支持我们呢？</p>
<p>　　是我们的父母，他们走过了漫长的生活道路，饱尝了人世辛酸。──我们的心这样提醒我们。</p>
<p>如果我们经过冷静的考察，认清了所选择的职业的全部分量，了解它的困难以后，仍然对它充满热情，仍然爱它，觉得自己适合于它，那时我们就可以选择它，那时我们既不会受热情的欺骗，也不会仓促从事。</p>
<p>　　但是，我们并不总是能够选择我们自认为适合的职业；我们在社会上的关系，还在我们有能力决定它们以前就已经在某种程度上开始确立了。</p>
<p>　　我们的体质常常威胁我们，可是任何人也不敢藐视它的权利。</p>
<p>　　诚然，我们能够超越体质的限制，但这么一来，我们也就垮得更快；在这种情况下，我们就是冒险把大厦建筑在残破的废墟上，我们的一生也就变成一场精神原则和肉体原则之间的不幸的斗争。但是，一个不能克服自身相互斗争的因素的人，又怎能抗御生活的猛烈冲击，怎能安静地从事活动呢？然而只有从安静中才能产生出伟大壮丽的事业，安静是唯一能生长出成熟果实的土壤。</p>
<p><strong>尽管我们由于体质不适合我们的职业，不能持久地工作，而且很少能够愉快地工作，但是，为了克尽职守而牺牲自己幸福的思想激励着我们不顾体弱去努力工作。如果我们选择了力不胜任的职业，那么我们决不能把它做好，我们很快就会自愧无能，就会感到自己是无用的人，是不能完成自己使命的社会成员。由此产生的最自然的结果就是自卑。还有比这更痛苦的感情吗？还有比这更难于靠外界的各种赐予来补偿的感情吗？自卑是一条毒蛇，它无尽无休地搅扰、啃啮我们的胸膛，吮吸我们心中滋润生命的血液，注入厌世和绝望的毒液。</strong></p>
<p><strong>如果我们错误地估计了自己的能力，以为能够胜任经过较为仔细的考虑而选定的职业，那么这种错误将使我们受到惩罚。即使不受到外界的指责，我们也会感到比外界指责更为可怕的痛苦。</strong></p>
<p><strong>如果我们把这一切都考虑过了，如果我们的生活条件容许我们选择任何一种职业，那么我们就可以选择一种使我们获得最高尊严的职业，一种建立在我们深信其正确的思想上的职业，一种能给我们提供最广阔的场所来为人类工作，并使我们自己不断接近共同目标即臻于完美境界的职业，而对于这个共同目标来说，任何职业都只不过是一种手段。</strong></p>
<p>　　尊严是最能使人高尚、使他的活动和他的一切努力具有更加崇高品质的东西，是使他无可非议、受到众人钦佩并高出于众人之上的东西。</p>
<p><strong>但是，能给人以尊严的只有这样的职业，在从事这种职业时我们不是作为奴隶般的工具，而是在自己的领域内独立地进行创造；这种职业不需要有不体面的行动（哪怕只是表面上不体面的行动），甚至最优秀的人物也会怀着崇高的自豪感去从事它。最合乎这些要求的职业，并不总是最高的职业，但往往是最可取的职业。</strong></p>
<p>　　但是，正如有失尊严的职业会贬低我们一样，那种建立在我们后来认为是错误的思想上的职业也一定会成为我们的沉重负担。</p>
<p>　　这里，我们除了自我欺骗，别无解救办法，而让人自我欺骗的解救办法是多么令人失望啊！</p>
<p>　　那些主要不是干预生活本身，而是从事抽象真理的研究的职业，对于还没有确立坚定的原则和牢固的、不可动摇的信念的青年是最危险的，当然，如果这些职业在我们心里深深地扎下了根，如果我们能够为它们的主导思想而牺牲生命、竭尽全力，这些职业看来还是最高尚的。</p>
<p>　　这些职业能够使具有合适才干的人幸福，但是也会使那些不经考虑、凭一时冲动而贸然从事的人毁灭。</p>
<p>　　相反，重视作为我们职业的基础的思想，会使我们在社会上占有较高的地位，提高我们自己的尊严，使我们的行为不可动摇。</p>
<p>　　一个选择了自己所珍视的职业的人，一想到他可能不称职时就会战战兢兢──这种人单是因为他在社会上所处的地位是高尚的，他也就会使自己的行为保持高尚。</p>
<p><strong>在选择职业时，我们应该遵守的主要指针是人类的幸福和我们自身的完美。不应认为，这两种利益会彼此敌对、互相冲突，一种利益必定消灭另一种利益；相反，人的本性是这样的：人只有为同时代人的完美、为他们的幸福而工作，自己才能达到完美。</strong></p>
<p>　　如果一个人只为自己劳动，他也许能够成为著名的学者、伟大的哲人、卓越的诗人，然而他永远不能成为完美的、真正伟大的人物。</p>
<p>　　历史把那些为共同目标工作因而自己变得高尚的人称为最伟大的人物；经验赞美那些为大多数人带来幸福的人是最幸福的人；宗教本身也教诲我们，人人敬仰的典范，就曾为人类而牺牲自己──有谁敢否定这类教诲呢？</p>
<p><strong>如果我们选择了最能为人类而工作的职业，那么，重担就不能把我们压倒，因为这是为大家作出的牺牲；那时我们所享受的就不是可怜的、有限的、自私的乐趣，我们的幸福将属于千百万人，我们的事业将悄然无声地存在下去，但是它会永远发挥作用，而面对我们的骨灰，高尚的人们将洒下热泪。</strong></p>
<p>本文原入选苏教版《语文·必修一》，高考改革后，2015年新版教材已删去本文。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-08-11</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Clark，在我求学的时候，我看到了很多比我优秀的人才，无论是智力还是背景，但是你知道吗，我不觉得没钱没背景就是平庸，那是别人贴给你标签。唯有你自己内心的平庸，才是毁掉你人生的平庸。你内心的平庸，就是你失去追求卓越信念的那个瞬间。(Your internal mediocrity is the moment when you lost the faith of being excellent.) 你以后会遇到很多机遇，但你的平庸会毁掉它们。当你觉得自己做的还不错的时候，你已经杀死了那个能够让你做的更好的自己。(When you get the feeling that your work is OK, you have got killed another &#x27;you&#x27; who can make it much better.)</span><br></pre></td></tr></table></figure>

<p>为了写博士论文，自学了Scrivener。</p>
<p>为了画博士论文的图，自学了OmniGraffle。</p>
<p>为了能画出图中城市的地理位置，自学了QGIS和谷歌地图制作。</p>
<p>为了能整理访谈数据，自学了NVivo。</p>
<p>为了能看论文做笔记，自学了Marginnote。</p>
<p>为了能写出好的英语句子，自学了利用正则表达式搜索语料数据库。</p>
<p>为了能整理文献，自学了Papers和DEVONthink。</p>
<p>为了能画思维导图，自学了Scapple和Tinderbox。</p>
<p>为了能背诵单词，自学了Anki。</p>
<p>在如今这个年代，砍柴都是集团化作业，刀磨得再快也架不住别人用人海战术堆出来的高效率。</p>
<p>英语没有学霸一说，因为语言知识工具，熟练到一定程度后就够了，最后它体现的还是语言运用者自己的思维。</p>
<p><strong>哪怕是做到一件小事，背后也需要持之以恒的付出</strong>。玩英文游戏，看英文新闻等等这些日常的小事，背后其实也是成年累月坚持不懈的付出。它们一点也不高上大，但我们绝不该假设它们很容易。</p>
<p>哪怕对于 native speaker来说，英语都是要青少年在记忆里最好的年龄段花上至少四、五年去学习的科目，一个非 native speaker又如何能几个月就掌握它？说穿了，所谓几个月就掌握，是指掌握在中国考英语的技巧，而非这门语言在日常生活中的应用。</p>
<p>摆脱字典看懂英文社科著作，摆脱字典通读经济学人和纽约时报。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-08-11</span><br></pre></td></tr></table></figure>

<p>不要让过去的自己，成为今天的敌人。要让过去的自己，成为今天的战友。</p>
<p>一个人最可怕的敌人，就是自己，因为我们总可以找到无数理由去解释自己为什么被别人击败，但真的很难面对自己被自己击败。多少成年人一生都无法面对，更何况高中生？你能来帮帮我吗？你能接受我吗，</p>
<p>我自己成为一支队伍，一个过去的我，支持现在的我的队伍。这支队伍是我的全部，会犯错，会偷懒，会能力不足，但至少今天面前之有一个敌人。</p>
<p>互联网世界处在一个巨大的矛盾中：一方面是信息数量的爆炸，一方面是信息质量的萎缩。而我更发现，如今对于信息的寻找不再是难题，对于信息的甄别却是一个大难题。于是我们人生中可能会碰到那种什么都懂一点但仍然做不出好的决策的人——他们就是被信息数量钝化了判断力的人。</p>
<p>比如说中国历史，除了中国自己出版的各种版本，同时还有英国人出版的《剑桥中国史》，美国人出版的《哈佛中国史》，美籍华人徐中约写的《中国近代史》等等，这些书的基本质量都是教科书级别的，因此能够保证信息的真实性，但同时他们记载的内容和侧重的视角又有所不同，能过扩展你的思考维度，同时也让你从记载的区别中体察出当今社会运行的一些特质。</p>
<p>后退一步的类比体验法也许是回答这个问题的关键。简单地说，当我们在中文语境下思考表达能力的问题时，也许会因为“身在此山中”而“云深不知处”。那么此时倘若我们后退一步，在英语语境下类比思考这个问题，也许就能看到和抓住关键的矛盾。</p>
<p>我们的认知以为我们可以表达得更好时，现实却很可能是自己根本连最基础的语言能力都没有。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-08-22</span><br></pre></td></tr></table></figure>

<p>别人中文表达很厉害时，由于我们对中文母语天然的理解能力，因此并不会觉得说出这些词这些句子真的厉害的——我也会说嘛！然而，当我们将自己带入到英文语境下时，就会更深刻地体验到当别人能在当下说出一个可能你认识但就是死活憋不出来的词或句子时，别人和自己真正的能力差距在哪里——就是那些我们平时以为自己已经掌握但其实根本没有掌握的基础能力：背了很多遍但仍然背不下来的单词，练了很多遍但仍然写不出来的句子。</p>
<p>中文语境下思考表达能力问题时，我们绝大部分人的自尊心和脸皮死活不会让自己承认基础语言能力的欠缺——我们都是成年人了，中文说了这么多年，怎么可能还缺乏这些小学生练习的初级东西？我们内心期待的答案是更高上大的那一套：一定是因为某种“高级”方法没了解，“高级”技能没学到，“高级”书籍没阅读，“高级”思维没掌握。于是我们的眼珠一边追索着“高级”解决方案——如题主所言哲学书籍——一边嘴里还在抱怨：为什么没效果呢？到底缺了什么呢？</p>
<p>切换到英文语境下思考表达能力问题时，由于挣脱了自尊心和面子的桎梏，一切反而豁然开朗，清楚明白——就是说不出来嘛！</p>
<p>还能怎么样，多读多听多说多背多练呗！</p>
<p>对于「实事求是」的原则的彻底抛弃。</p>
<p>这年头还有谁学理化生啊，靠能力吃饭就数学英语计算机，</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-08-30</span><br></pre></td></tr></table></figure>

<p>学生物的都知道，生物巨型化是进化的死胡同，巨型化的生物甚至不可能上陆地。因为自己会被自己压垮。</p>
<p>学机械的都知道，越庞大的机械系统，就越容易被一丁点的设计上的误差搞崩。因为它会被自己压垮。</p>
<p>学经济的都知道，边际效用在任何系统中都是存在的。庞大的经济系统本身消耗的成本会把自己压垮。</p>
<p>学计算机工程的都知道，人月神话的道理。一个团队无限加人不能提高效能，因为成员合作沟通需要花费的成本成几何级数增长。团队大到一定程度，就会被自己内部的摸鱼人压垮。</p>
<p>上完了本科，leetcode easy题都不会，读了编译原理连正则表达式都不懂得如何实现，那跟没上过本科又有什么区别？既然没上过，那就大家都不要上好了，生活还开心。本科让喜欢学术的人去读，直接直博。</p>
]]></content>
      <categories>
        <category>Random Thoughts</category>
        <category>2019</category>
      </categories>
      <tags>
        <tag>Essay</tag>
      </tags>
  </entry>
  <entry>
    <title>Random-Thoughts</title>
    <url>/2019/05/01/Random%20Thoughts/2019/2019-05/</url>
    <content><![CDATA[<p>这个世界需要英雄,</p>
<p>知道今日事未毕,自然晚睡.</p>
<p>不知明日事何去,自然晚起。</p>
<span id="more"></span>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-05-01</span><br></pre></td></tr></table></figure>

<p>test-first</p>
<ol>
<li>Unit tests prove that your code actually works</li>
<li>You get a low-level regression-test suite</li>
<li>You can improve the design without breaking it</li>
<li>It’s more fun to code with them than without</li>
<li>They demonstrate concrete progress</li>
<li>Unit tests are a form of sample code</li>
<li>It forces you to plan before you code</li>
<li>It reduces the cost of bugs</li>
<li>It’s even better than code inspections</li>
<li>It virtually eliminates coder’s block</li>
<li>Unit tests make better designs</li>
<li>It’s faster than writing code without tests</li>
</ol>
<p>编写代码的同时编写结构化测试的习惯，测试优先</p>
<p>主要是要有写单元测试的意识</p>
<p>朝正确方向迈出的每一步总部没有好，</p>
<p>确实从这方面说，我只需要按照大师们的路程走就行了</p>
<p>人不能事事亲为，吸纳前人经验教训，学习历史当是捷径，每种文化和职业必须有理想，有偶像，代码是不是已背离理想标准–，错误总是在没有考查过的地方出现- 不然你早就找到错误所在，理想标准是什么</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-05-06</span><br></pre></td></tr></table></figure>

<p>不会雇佣一个不懂写作的程序员，如果你擅长写，就很容易找到工作，技术规格文档，不一定要求网络日志 但要每天练习写作课程，正向地循环激励，使用C来交流用一个学期来接近机器，是用高级语言写出高效的代码，有机会写编译器或者操作系统。为大项目设计架构，如果不能解释为什么。</p>
<p>了解什么是供给和需求，什么是竞争优势，什么是净现值，什么是折扣和边际效用， 商业是如何运作的话，理解商业基本规律的程序员对商业街来说是宝贵的程序员，代码中坚持某些疯狂的设计，理解商业基本规律的程序员，动态逻辑，计算机科学和软件开发不一样，你付给耶鲁学费就是为了学习如何写循环语句吗？你把耶鲁当成什么地方了？Java速成班吗？哼。学的是计算机科学而不是软件开发，没得选择了 明智的招聘者知道热爱编程的人初中就为当地的牙医写数据库程序，高中就在计算机夏令营教课，为校报规划网站，在某个软件公司做实习，他们找的就是这样的人。喜欢编程，容易犯的最大错误就是“有活就接”，拥有一种特殊技能，不要浪费它，编码 开发 商业</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-05-11</span><br></pre></td></tr></table></figure>

<p>时代不一样了，不是当年刚恢复高考时大家不论年龄谁都能考的时代了，如今中国大学大量扩招和高度程式化的特点决定了即使你考取了理想的大学，你的心态，气场，思维方式都使你无法被那个远比你年轻的集体所接受。而你想从985大学学习到的知识，也不能弥补你作为异类战战兢兢地在大学里损失掉的四年时光。从你踏入校园的那一刻起，入住寝室、军训、开班会、上课、自习、吃食堂、小组作业、考试、做毕设，无数个场景都会向你暗示一个信息：you do not belong here。是的，你的年龄和经历，已经无法让你和年轻人一样度过正常的大学时光了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-05-16</span><br></pre></td></tr></table></figure>

<p>大学是教书育人的地方，知识就不该是秘密</p>
<p>一个高校的理科水平，说到底取决于它的数学水平；一个高校的工科水平，说到底取决于它的计算机水平。</p>
<p>不论你是物理还是化学，做到最后就是做数学，数学就是天花板，数学水平上不去，理科整体就上不去。</p>
<p>同理，所有工科，不论你是哪个方向，最后都要殊途同归回到计算机，计算机水平上不去，工科整体就上不去。</p>
<p>不是说其他专业一无是处，敲代码编程跟英语一样是一个必须掌握的工具，不论我是做机械的、材料的还是通信的，没有计算机我如何实现我的想法和我设计的功能呢？</p>
<p>如果你不需要使用英文写论文，那你就只能发低水平的中文期刊。如果你的科研项目不需要涉及计算机编程，那只能说明你的科研层级很低。</p>
<p>本科绩点不行，就得拿别的去弥补，你不会计算机不懂外语，就没法看文献写文章证明你的科研实力。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-05-21</span><br></pre></td></tr></table></figure>

<p>have a good feel for the elements of style and the esthetic of programming.所教授和利用的技术是所有工程设计的共同的点</p>
<p>计算机改变思维，改变了表达方式，程序认识论–从命令式的观点研究知识的结构，而不是陈述性的观点 ，强调了工程设计的原则</p>
<p>计算提供了一种表达方式，用于探索思想，学生编写和修改程序的能力提供了一种强大的媒介，使探索成为一种自然的活动。</p>
<p>一般来说英美传统中的“科学”，是具有高度逻辑严密性的实证知识体系，既有严密的逻辑性，能自圆其说，又能接受观察和实验的检验：德国的科学概念 往往泛指一切体系化的知识，凡是人们通过系统研究后形成的比较完备的知识体系，不管是否呈现自然科学般的规律性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-05-26</span><br></pre></td></tr></table></figure>

<p>学问如同美酒，因岁月而成熟，对该领域的历史发展了如指掌，但思维极为可能变得僵化，了解整个领域是怎么发展起来的，比单纯从最新发表的论文中获得一些对当前知识的简单印象要重要的多。之前的方法相比，研究领域的结构，在有搜索引擎之前，我们是怎么做的引用文献的结构，信息与知识的区别，计算机获取的内容都只是信息，只是却只能在专业读者的脑中构建出来的产物，如今，信息都是可以即刻获得，知识仍要多年专注地学习才能获取，想象一下，一场突发意外使正在参加某次会议的领域专家全部罹难，重建专业知识，恢复该领域的发展需要多长时间？可能需要好几年，科学电视纪录片的节目制作人是怎么调研一个课题，它们不是去读文献，而是访问专家，这么做很正确，因为这才是知识的唯一存在之处——学者的脑中。文献综述主观性极强，回顾历史，研究演绎推理的中心方式建立在一个框架，参考文献是为了某种目的或论证而准备的。科学不是简单地收集事实，综述也不仅仅是总结和记录证据，有目的的写，有目的地读。文献综述中的关键概念就是结构。，三个层次的方式：章——节——目。章为学术论文或书籍，综述，只需节和目两个层次。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-05-30</span><br></pre></td></tr></table></figure>

<p>要成为一名作家，就要向最好的作家学习。同样，想要拥有高雅的谈吐，就要向最好的演说家学习。想要学习正确地说话，就一定要去模仿公众演讲的大师。认真观察谈话大师，听听他们是如何进行表达的。去听最热门的讲座、演讲和课程，无须模仿演讲技巧，这些演讲技巧是练习过程中自然形成的，而非刻意营造。你该关注的不是演说家如何表达自己，而应该关注他所使用的语言和语言的使用方式。你是否听过今日大师的演讲？过去也有很多演讲大师，但他们现在已化作尘土，人们只能通过文字来欣赏他们的雄辩口才。不过，你可以做的就是去听听当今的演讲大师的演讲。对于许多人来说，还是前人的影响更为深远。当谈到演讲的精髓时，我们总是会去听前人的声音。也许你一直为比彻尔和塔尔梅奇的言谈感到着迷，两位的言谈都发人深省，他们用自己的声音征服了千万人的心。</p>
<p>从他们整理蜡笔小新中我觉得我应该转换下思路了，视频重要又不重要，更为重要的是将信息，转化为知识。</p>
]]></content>
      <categories>
        <category>Random Thoughts</category>
        <category>2019</category>
      </categories>
      <tags>
        <tag>Essay</tag>
      </tags>
  </entry>
  <entry>
    <title>Random-Thoughts</title>
    <url>/2019/09/01/Random%20Thoughts/2019/2019-09/</url>
    <content><![CDATA[<p>既要…也要…又要…还要…</p>
<span id="more"></span>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-09-01</span><br></pre></td></tr></table></figure>

<p>知识的学习一般都分为两个阶段：第一阶段是原理概念框架的学习，这阶段可能需要刷刷题巩固下基本概念；第二阶段是知识实践，需要自己亲自去把第一阶段学到的知识用起来，不断踩坑不断摸索才能内化成自己的东西。网络能给我们的往往是第一阶段的知识资源，告诉我们知识框架和知识体系，指明了<code>财富密码</code>的藏宝图。但我们离到达真正的财富还需要自己去摸索很长的路，这条路是只能自己走，没人可以扶着你前进。</p>
<p>就像一节钢琴课，老师永远只花很少的时间教你一些基本的乐理和乐曲弹奏技巧，剩下的大部分时间永远是让你自己不停地练习。换在网络资源学习的时候，如果你仅仅把老师教的乐理知识看完，不去动手弹琴，哪怕你反复把乐理知识琢磨地再透彻那你最多也就知道个弹钢琴是怎么回事，而学不会真正的钢琴演奏。这个演奏练习的过程就是你从老师那里学来的音乐知识实践的过程，这个过程再好的老师都没办法代你完成，必须你把双手放在琴键上不断地去自己体会。</p>
<p>一个合格的商科学生永远要遵循理性和实事求是，重视数据与逻辑，对市场和经济规律要有基本的认知，最重要的是要有十足的冲动和热情应用自己学到的知识去解剖和认识商业现象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-09-10</span><br></pre></td></tr></table></figure>

<h2 id="谷歌找经济数据"><a href="#谷歌找经济数据" class="headerlink" title="谷歌找经济数据"></a>谷歌找经济数据</h2><p>任何事件的分析离不开，三要素：<strong>事件、动因和证据链</strong></p>
<p>对证据链的要求是尽可能拿到有明确签章的一手资料：<strong>比如带有红章的公司公告、财务报表、部门函件、权威网站发布的公文、裁决书，其次才是选择可靠媒体发布的具有来源引用的资料（并对其作一定交叉验证）。</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-09-30</span><br></pre></td></tr></table></figure>

<p>说个笑话</p>
<p>“现在所有资源网上都有，谁还买硬盘存东西啊。”</p>
<p>如果你用<a href="www.google.com">google</a>、<a href="https://stackoverflow.com/">stackoverflow</a>、<a href="https://github.com/">github</a>、<a href="https://askubuntu.com/">askubuntu</a>、<a href="https://stackexchange.com/">stackexchange</a>、<a href="https://www.reddit.com/">reddit</a>、<a href="https://www.youtube.com/">youtube</a>、<a href="https://www.wikipedia.org/">wikipedia</a>、<a href="https://www.geeksforgeeks.org/">geeksforgeeks</a>、<a href="https://www.coursera.org/">coursera</a>、<a href="https://leetcode.com/">leetcode</a>、<a href="https://medium.com/">medium</a>，那么你可以很轻松地输入——搜索——定位——排序你所需要看的网页，然后点进去轻松看到你所要解决的所有问题。</p>
<p>你用着<a href="https://www.zhihu.com/explore">知乎</a>、<a href="baidu.com">百度</a>、<a href="https://www.csdn.net/">csdn</a>、<a href="https://www.cnblogs.com/">博客园</a>、<a href="https://www.bilibili.com/">bilibili</a>、<a href="https://weibo.com/login.php">新浪微博</a>、<a href="https://zhidao.baidu.com/">百度知道</a>这些**，企图在里面寻找“技术干货”，那么你只能从信息检索结果中寻找到[额]——你寻思寻思，你用的这些垃圾平台、看着垃圾运营管理者们随心所欲地推送他们认为赚钱的内容，设定他们认为正确的标准——你成天用这些玩意儿配得上“计算机编程氛围”吗？</p>
<p>语言相关的排版技术就是一种无法国际化的东西，需要一个语言一个语言去做。回过头来，我们说这个激光照排这个技术以及之后的方正系排版软件，由于这些东西是封闭的，即使凭借现有的资料来看，技术并不算一流，比如吹得天花乱坠的那个字体技术，随便翻开70年代的计算机图形学论文总会找出几篇论文可以看看是不是有类似的东西。就这个意义上，其实王选的技术最直接的意义只是把东西做了出来，但是做的并不是最好的。最简单来说，铅字时代那些丰富的经验在这个系统里面其实都被丢掉了，也是从他那个时代开始，一直持续到现在，我们所看的书的排版大部分都是糟糕得不行的。这个帽子必须要扣到他们那一代的头上。</p>
<p><strong>他的那个时代早就结束了。这个时代里面，他的那套东西也早过时了（****不是这个系统不重要，只是它已经老了）。</strong></p>
]]></content>
      <categories>
        <category>Random Thoughts</category>
        <category>2019</category>
      </categories>
      <tags>
        <tag>Essay</tag>
      </tags>
  </entry>
  <entry>
    <title>Random-Thoughts</title>
    <url>/2019/06/01/Random%20Thoughts/2019/2019-06/</url>
    <content><![CDATA[<p>唯有躺平，方解此愁。</p>
<span id="more"></span>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-06-01</span><br></pre></td></tr></table></figure>

<p>具有期刊、报纸及图书全文检索功能的数据库越来越多了，但是重要的问题在于，在任何研究型图书馆里，绝大多数图书与期刊根本没有数字化，主要障碍，包括成本，版权，保存，以及格式问题，读者获取大量重要图书的最佳途径（不仅在物理意义上，也在认知意义上）永远存在于研究型图书馆的大门之内。通过什么途径可以让我获得最有用的信息，检索图书馆印刷型文献，</p>
<p>一些重要的研究资源，不会呈现在网上供用户免费使用，这些资源无法在任何地方、任何时间供任何人随意使用。空间限制</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-06-01</span><br></pre></td></tr></table></figure>

<p>本质上还是放羊-娶媳妇-生娃-让娃放羊，无非是找个青草更多的山头、羊更多的村子罢了。</p>
<p>在<a href="https://social.technet.microsoft.com/Forums/zh-CN/home">technet英文版</a>、<a href="https://docs.microsoft.com/en-us/">msdn论坛英文版</a>、<a href="https://reddit.com/">reddit</a>几个码农版和<a href="https://stackoverflow.com/">stack overflow</a>上就几乎没有看到互相攻击的情况。</p>
<p>可能是语言让我们富有攻击性（大雾）</p>
<p>二十一世纪了，连资本家都知道创造需求才是正道了，</p>
<p>蛀虫们还在那里一个劲满足别人的需求赚钱，</p>
<p>一边把所有能看到的需求都抢着满足了让别人赚不到钱，还一边说自己这叫勤劳……</p>
<p>高端技术岗位严重不足，而廉价劳动力却还需要很多。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-06-06</span><br></pre></td></tr></table></figure>

<p>书呆子是书看的太多，而跟现实交流太少。但其实他们有跟写书的先贤大能交流，所以他们不但有思想，还与众不同，有跨时代的，也有复古的，古今中外，天文地理，包罗万象。书呆子往往是可爱的人，其实跟他们交流是很有意思的事情，不过需要你对于他们的世界有所了解。</p>
<p>而做题家是其实连跟书的交流也不多，他们整天交流的对象是题，他们人生的意义是做题，他们对万事万物的态度是做题式思维。一切皆可内卷，一切皆是刷题。连耍个女朋友，也像做题一样。</p>
<p>这个公司朝九晚五，基本不加班，但是他要求每个人完成自己能力范围内的工作，你的能力决定你的等级和报酬，同时你的等级也决定你每天要完成的工作量。公司完善的管理制度，会帮助你进行定位，帮你找到你最佳的平衡点，既让你不太闲，又不会让你一直处于焦虑状态，说白了，公司和员工双赢。</p>
<p>同样是绩效考核制度，但是公司的出发点是公司与员工双赢。不但挖掘了员工的潜力，让员工高效率工作，同时让其工作得没有太大压力，找到一个平衡。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-06-06</span><br></pre></td></tr></table></figure>

<p>忍一时越想越气，退一步步步紧逼[哈哈]</p>
<p>如果一个社会不愿意付出智慧应得的价值，那社会就永远得不到智慧带来的优质产品。整个社会创新乏力，和智慧产出得不到认可有很大关系。如果你愿意为之付出价值，从业人员自然会用心去做出优质的产品，否则，他们就会得过且过，敷衍了事。</p>
<p>售后差。更新能力不行。用着用着就崩溃了。<br>我们公司那套管理系统（每周每月统计实际数据和计划，分析报表之类的），开发时候说有多牛逼。<br>从来不更新，走个流程有时候几个小时在哪里转圈圈。<br>找了几家公司想做新系统，发现尼玛不兼容旧数据。<br>用户体验极差。<br>去年开始，我们一帮人都用手动Excel来做报表，很讨厌那套系统。<br>领导想开发新系统，旧数据又不兼容。<br>不开发吧，Excel都比他好用，就是很浪费人力。<br>简直是食之无味，弃之可惜。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-06-12</span><br></pre></td></tr></table></figure>

<p>宣王召大臣而谋曰：“蚤救孰与晚救？”驺忌子曰：“不如勿救。”田忌曰：“弗救，则韩且折而入於魏，不如蚤救之。”孙子曰：“夫韩、魏之兵未弊而救之，是吾代韩受魏之兵，顾反听命於韩也。且魏有破国之志，韩见亡，必东面而愬於齐矣。吾因深结韩之亲而晚承魏之弊，则可重利而得尊名也。”宣王曰：“善。”乃阴告韩之使者而遣之。</p>
<p>三晋韩赵魏之间本就有仇，齐燕之间也多次大打出手，齐楚之间、晋楚之间，哪个诸侯之间没有过血海深仇？秦逼得狠了，六国也许能暂时放下仇恨，只要秦略一放松，六国必定刀兵相向，血流成河。</p>
<p>苏秦靠一张嘴纵横天下，携合纵之策而使得“<strong>秦兵不敢窥函谷关十五年</strong>”，但犀首简单几句话，就使得六国合纵之策瓦解：</p>
<p>其後秦使犀首欺齐、魏，与共伐赵，欲败从约。齐、魏伐赵，赵王让苏秦。苏秦恐，请使燕，必报齐。苏秦去赵而从约皆解。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-06-18</span><br></pre></td></tr></table></figure>

<p>一件事情臻于完善，其实反面意思就是这种结构已经没有调整的空间，它已经去除了一切杂拌，一切枝蔓。如果事物继续沿着预定的轨道前进，那没问题；但如果突然出现岔道，那这种模式翻车就是必然的。</p>
<p>登上绝顶，风景固然很美，可往哪一个方向走，就都是下坡了。</p>
<p>大概意思如此。</p>
<p>秦王扫六合，固然武功臻于极盛，但衰落也是必然的，只是没想到那么快。</p>
<p>但每一个行业巨头倒下，原因其实都只有一个，它为了它的目标它的地位做了过度的优化，秦国如此，诺基亚等都是如此。</p>
<p>为了达成这个目标，人员、组织机构、制度通通围绕它做最大程度的优化，一切有碍于达成目标的枝枝蔓蔓全部优化掉，裁剪掉，所有杂草通通消灭。</p>
<p>秦帝国更是如此。为了达成一统天下的目标，整个国家成了一架战争机器。军队以人头为目标，财政为军事服务，农业更是一切为了战争。要知道最后秦灭楚的时候，秦始皇给王翦的军队超过60万。</p>
<p>屠睢任嚣赵佗征岭南军队50万，蒙恬对付匈奴的军队30余万。</p>
<p>足足140万军队！</p>
<p>这可是秦朝。人口也就两千万左右，而后勤保障交通条件又如此之差。即使是今天，保障这么一支庞大的军队的需要，压力也是极大的。百姓的负担可想而知。</p>
<p>所以到了这个时候，必须要改了。因为以前是打天下，现在则是坐天下了。</p>
<p>但一下子改过来，谈何容易。秦国的官吏何曾有过和平治国的经验！他们只会“军管”。</p>
<p>军管可以简单粗暴，但和平治国肯定不行，更需要和风细雨，抽丝剥茧，耐心行事。</p>
<p>这样的简单粗暴，可能老秦国还好点，新征服的六国根本接受不能。简单粗暴对上忍无可忍，火星四溅。</p>
<p>强改的话，必然崩盘。不是有这么一句俗话么，“人若改常，非病则亡”。人是如此，国家同样如此。</p>
<p>读史可以明鉴,知古可以鉴今.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-06-24</span><br></pre></td></tr></table></figure>

<p>最牛的独立APP，微信，更不会鸟百度了。</p>
<p>必须掌握linux因为这是开源且免费的。</p>
<p>The Single Most Important Fact About Encodings</p>
<p>If you completely forget everything I just explained, please remember one extremely important fact. It does not make sense to have a string without knowing what encoding it uses. You can no longer stick your head in the sand and pretend that “plain” text is ASCII.</p>
<p>CS是证明（递归），算法（递归），语言（lambda演算），操作系统（指针），编译器（lambda演算）—因此，最重要的是，一个不会教C且不会教的JavaSchool Scheme也不是真正的计算机科学教学。尽管函数递归的概念对现实世界可能毫无用处，但它显然是CS研究生学校的先决条件。我不明白为什么CS学校课程委员会的教授们将他们的程序愚弄到这样的程度：不仅他们不能产生<em>工作的程序员</em>，而且他们甚至不能产生可能获得博士学位的CS研究生。并竞争他们的工作。等一下。没关系。也许我明白。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-06-30</span><br></pre></td></tr></table></figure>

<p>与其说看什么书，不如说你要以一种什么样的心态去学习。编程最重要的是练习，学习理论知识是为了让你写出高质量的程序。如果你仅仅是为了写出程序，那根本不需要学习那些东西，自己瞎折腾就好了。</p>
<p>看书虽然重要，但那是为了编程服务的。妄图通过学习什么就可以变成一个合格的程序员那只是一种幻想。</p>
<p>影响最大的是两类书。第一类告诉我如何测试我的代码，第二类告诉我怎样的engineering是错误的。这些大学基本都没教，你们最好自己弄来看。</p>
<p>I was <a href="http://webword.com/interviews/spolsky.html">interviewed</a> by WebWord.com: “If your software is going to be popular, you are going to have to deal with a million other things: writing manuals, creating good looking icons if you have a GUI, testing, recruiting good programmers, making a product that people want, usability testing, dealing with Norman the Cranky Tester, and about 100 other things that take up most of your time”</p>
]]></content>
      <categories>
        <category>Random Thoughts</category>
        <category>2019</category>
      </categories>
      <tags>
        <tag>Essay</tag>
      </tags>
  </entry>
  <entry>
    <title>Random-Thoughts</title>
    <url>/2019/07/01/Random%20Thoughts/2019/2019-07/</url>
    <content><![CDATA[<p>诉衷肠 · 赠周恩来</p>
<p>当年忠贞为国酬，何曾怕断头？如今天下红遍，江山靠谁守？</p>
<p>业未就，身躯倦，鬓已秋。你我之辈，忍将夙愿，付与东流？</p>
<span id="more"></span>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-07-01</span><br></pre></td></tr></table></figure>

<p>根本原因在于制度不鼓励人们在初中和高中就探索自己未来的专业。程序员本来就是一个10年周期学完才能进场干活的工种，搞成这样还不能怨他们。</p>
<p>设计落后、质量缺陷、社区文化幼稚、物业管理幼稚，让多数房产放不几十年要么落后于现代生活方式，要么需要大修，要么需要大修但是组织不起来，直接导致贬值。这还有更硬核的土地使用权的续期问题，</p>
<p>哪还有什么传统文化啊</p>
<ul>
<li>刷题，进大厂的最重要旁系技能；</li>
<li>英语，摆脱996的关键旁系技能;</li>
<li>体力，在计算机行业最缺乏的能力；</li>
<li>管理能力，往上走最重要的能力；</li>
</ul>
<p>「最珍贵的知识和观点，都是免费且自由传播的」的观点。我曾经也是持有这样的观点的，而且我还跟 Andrew Ng 聊过教学内容成本会无限趋近于零的观点，但他不同意。我现在能猜到为什么他不同意了，当然我猜的不代表他的真实想法。</p>
<p>信息是免费的，但容易消化的知识可以存在附加值。</p>
<p>能读懂论文你可以自己去读啊，很多信息在 Wikipedia 上面也有啊，只是你自己读不下去而已，这不能怪别人啊。你去 Coursera 付钱听 Andrew Ng 讲课，是因为他能把复杂的信息变成易于消化的知识，而且还通过小测、作业等手段保证你成功消化他讲课的内容，这就是附加值存在的地方，也是他能赚钱的基石。</p>
<p>理论上，你要学习的理论知识在 FAA（美国联邦航空管理局）手册里面都有啊，为什么你不去读手册呢？因为你读两页就睡着了啊！所以你付钱去买人家充满冷笑话的教学视频，就是为了好消化。</p>
<p>信息是免费存在的，但有很多复杂的知识晦涩难懂，如果有人能够把这些知识变得易于消化，再把教学过程变得富有娱乐性，那自然可以拿来卖钱。这里卖的不是信息不对称，至少不完全是。如果这一条不成立，那知乎作为一个商业公司存在的基石就不存在了啊，赶紧学 Wikipedia 变身成非营利性机构吧。如果这一条不成立，那知乎上各位大 V 的身价也就不存在啦。你想想我们作为大 V 卖的是什么？卖的是信息不对称的话别人为什么不去看论文看 Wikipedia 啊？这个你自己心中不清楚吗？别自欺欺人了。</p>
<p>国内很多土生土长的服务，刚刚开始是支持邮箱注册的，大到一定程度就只允许手机注册了，这就意味着有关部门找上门来了。作为服务平台，一开始你没办法把用户真实身份挖出来还可能能够塘塞过去，你越做越大，你的责任就越来越大，最终你还是要对有关部门负责任的。</p>
<p>为什么同样是程序员，湾区大厂的福利就这么好？因为一波又一波的湾区创业公司要抢人，所以福利必须要往上提。美国劳动法其实是非常落后的，只要求雇主提供 12 周无薪产假，并且没有定义年假。只要能招到人，资本家可以非常剥削，不提供任何年假，只提供 12 周无薪产假。但这个「只要能招到人」在湾区完全不成立。</p>
<p>为什么现在湾区程序员普遍有 20 天左右的年假？因为当年 Sean Parker 制定 Facebook 公司章程时问 Mark Zuckerberg 多少天年假，Mark 想的是 15 天说的是三周，结果 Sean 理解为 21 天就写进公司章程了。在 Facebook 之后的创业公司不得不按照这个标准来做，否则不可能招到跟 Facebook 相似资质的程序员。</p>
<p>为什么同样是 Facebook，在伦敦的收入就比在美国各大城市的要低很多？因为在伦敦的雇主间竞争不激烈啊，大厂就只能在 Google 和 Facebook 这两者之间选一个，那相当于市寡头市场。这两家都没有兴趣往上竞价，于是就保持着整个市场的低收入。</p>
<p>最优秀的人必须在实习阶段抢到，然后才是校招，最后是社招。按现今标准，最优秀的学生应该有几个 GitHub repo 和几千分的 StackOverflow。这种人很有可能大一就开始实习，到他大三实习时那家公司会想方设法留住他，他如果愿意的话根本不会进入校招市场。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-07-11</span><br></pre></td></tr></table></figure>

<p>“写作是一项艰苦的工作。清晰的句子可不是意外所得。只有少数句子一次能够写好，大多数句子三遍能写好就不错了。当你绝望的时候，就这么想吧。如果你觉得写作很难，那是因为它本来就很难。”</p>
<p>——威廉 • 辛瑟，《谈写作》</p>
<p>1975年时，毛主席经过20年的坚持，“罢工自由”才首次写入当时的宪法当中。1982年，“罢工自由”被从宪法中移出</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-07-22</span><br></pre></td></tr></table></figure>

<p>因为科技是第一生产力，生产力决定生产关系.</p>
<p>从农业国升级为工业国，但核心解决方案只有一个：土地改革</p>
<p>英国圈地运动、美国南北战争、苏联集体农庄、日本明治维新</p>
<p>没有土地改革，农民生产力无法解放，农业人口无法转变为城市工业人口，工业化一纸空谈</p>
<p>《中国社会各阶层分析》和《湖南农民运动考察报告》</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2019-07-30</span><br></pre></td></tr></table></figure>

<p>1928年，北伐战争结束，中国迎来了所谓的“黄金十年”。当时所有人都相信，推翻帝制、历经混乱而再度统一以后的新中国，必将释放出强大的能量</p>
<p>然而，本以为是开始没想到已是巅峰。随着918事变、中日战争全面爆发，中国看似迅猛的发展势头被轻轻松松地毁于一旦</p>
<p>十年时间太短了、更何况还有外部势力的干涉</p>
<p>可是我党1935年被各路军阀逼到遵义城下时、只剩不到4万人，却在10多年后夺取了全国政权</p>
<p>1861年威廉一世登基、普鲁士还只是一个小邦国，10年后却打得法国人割地赔款、一统德意志</p>
]]></content>
      <categories>
        <category>Random Thoughts</category>
        <category>2019</category>
      </categories>
      <tags>
        <tag>Essay</tag>
      </tags>
  </entry>
  <entry>
    <title>职业规划</title>
    <url>/2021/03/24/Random%20Thoughts/%E8%AF%9D%E9%A2%98%E9%9B%86/%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<p>知行合一-热爱工作，享受生活。</p>
<p>对软件开发者这行有浓厚的兴趣，想成为一名出色的软件开发者，想每天充满激情地工作，想要把开发软件视为一项事业而不仅仅是一份工作。有效的方法、经验和态度，要尊重并热爱你的职业。</p>
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>做到一点，燃烧吧，燃烧你的热情，效率提高</p>
<p>现在能做什么，明天要做什么，以及我未来的职业道路应该怎样规划。</p>
<p>每个人都有卓越之处，不过需要找到自己真正喜欢的事情把它激发出来。如果不喜欢周围的环境，不喜欢使用的工具，不喜欢工作的领域，那又怎么可能激发呢？</p>
<p>虚度光阴，一天算一天，最后一事无成。世界不会因我没有完成工作而停滞不前，我讨厌这种感觉，存在毫无意义呀，我希望所做的事情在推动世界的发展。工作只是其中的一部分。</p>
<p>快乐和满足并不总源自机遇。需要思考，确定目标，然后行动，犯错误，去思考怎么去改变它。</p>
<p>终极目标就是追求快乐，一旦满足生存的基本需求，人们就会转而去追求快乐，当行动与目标相悖，往往是因为人们纠缠做某事的方法，而忘记了最终的目的。</p>
<p>想和能让我进步的人在一起，就得成为他们中的一员，而在某个公司工作或者在大学进修是无法走向卓越的，弄明白成为他们中的一员意味着什么，努力去做，我希望可以在有关软件的会议上做重要演讲。</p>
<p>成为一名专业开发人员不够资格，至少从招聘广告的要求来说，不符合传统意义上对一名普通软件工程师的要求。</p>
<p>重要的一步跨过普通软件开发人员，(不过谁会满足做一名普通的软件开发人员呢？) 渴望成功的人肯定比单纯完成工作的人更有可能成功，即使不能成为<a href="https://martinfowler.com/">martin flower</a>、<a href="https://en.wikipedia.org/wiki/Linus_Torvalds">Linus Torvalds</a>那样的大神，但至少可以让我们不再平凡。</p>
<h2 id="制定自己的计划"><a href="#制定自己的计划" class="headerlink" title="制定自己的计划"></a>制定自己的计划</h2><p>长期雇佣对公司来说是一笔很大的开销。职业当作正在制作的产品的生命周期，我的技术成就了这个产品。</p>
<ul>
<li>选择市场 供需关系</li>
<li>投资 知识和技术是这件商品的基础，需要合理投资，市场化的重要前提。</li>
<li>执行 技术出色还不过呀</li>
<li>市场 在公司和行业中得到认可。</li>
</ul>
<h2 id="选择市场"><a href="#选择市场" class="headerlink" title="选择市场"></a>选择市场</h2><p>示例程序只需稍加改动——但根本就不知道自己在做什么。可问题是，就像是用纸盘搭建房子，每增添一张纸牌，就增加一份坍塌的危险，根部不知道这个程序如何工作，没一点儿改动，都有可能导致程序完全失败。</p>
<p>产品的消费者是谁？我的”产品”就是提供的服务构成的，服务是什么？又出售给谁？接下来一年，对这商品的需求是会增加还是减少？在选择上又愿意投下多少赌注？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">不要在价格上竞争，承受不起呀。</span><br><span class="line"></span><br><span class="line">You can&#x27;t compete on price. In fact, you can&#x27;t afford to compete on price.</span><br><span class="line"></span><br><span class="line">发现市场上的不平衡。</span><br><span class="line"></span><br><span class="line">Explaint market imbalances.</span><br><span class="line"></span><br><span class="line">仔细思考在哪个商业领域投入时间。</span><br><span class="line"></span><br><span class="line">Now is the time to think about business domains you invest your time in.</span><br><span class="line"></span><br><span class="line">做求职中最差的乐手。</span><br><span class="line"></span><br><span class="line">Be the worst guy in every band you&#x27;re in.</span><br><span class="line"></span><br><span class="line">你身边的人会对你产生很大的影响，明智的选择你的圈子。</span><br><span class="line"></span><br><span class="line">The people around you affect your own performance. Choose your crowd wisely.</span><br><span class="line"></span><br><span class="line">没人给过我机会……？ 要学会抓住机遇！</span><br><span class="line"></span><br><span class="line">I haven&#x27;t been given the opportunity……？ Serize the opportunity!</span><br><span class="line"></span><br><span class="line">通才很少，所以很珍贵。</span><br><span class="line"></span><br><span class="line">Generalists are rare……and, therefore,precious.</span><br><span class="line"></span><br><span class="line">你的技术水平应该超越技术平台。</span><br><span class="line"></span><br><span class="line">Your skills should transcend technology platforms.</span><br><span class="line"></span><br><span class="line">很多人认为专攻某种技术就简单地意味着不知道其他技术。</span><br><span class="line"></span><br><span class="line">Too many of us seem believe taht specializing in something simply means not knowing about other things.</span><br><span class="line"></span><br><span class="line">以待定技术厂商为中心的观点，缺乏远见。</span><br><span class="line"></span><br><span class="line">Vendor-centric views are typically myopic.</span><br><span class="line"></span><br><span class="line">工作，因为你无法停止工作。</span><br><span class="line"></span><br><span class="line">Work because you couldn&#x27;t not work.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>研究技术市场需求，招聘广告和招聘网站，高需求or低需求。登陆外包公司的网站,比较记录，思考需要多长时间才能为相应的市场提供服务。这个时间差是市场不平衡的阶段。</p>
</li>
<li><p>只会编程是不够的，深入了解所处领域。行业经历成为重要才能。客户所处行业的专业语言与他们交流，那这就是一项非常重要的技能，换位思考，相互了解工作起来更容易。</p>
</li>
<li><p>公司行业有关的杂志，列出问题</p>
</li>
<li><p>行业网站，大事件和专题文章。介绍并思考如何影响。</p>
</li>
<li><p>在思维上投资。 编程是思维不只是语言。</p>
</li>
<li><p>单纯因为兴趣学习新东西，把职业视为动力。接触边缘技术和方法让自己更有深度、更加优秀、更具智慧，以及更具创造力。</p>
</li>
<li><p>我想看到以前从来没有见过的领域，需要一些有目的性的冒险，如果在工作中没有感到乐趣，那就不可能出色地工作。</p>
</li>
<li><p>职业道路上，最担心什么？</p>
</li>
<li><p>做一名通才 需求是灵活的，精简团队的时候，一个只会测试或者只会编码的人肯定会被裁掉的，所以需要掌握全局</p>
<ul>
<li>职业阶梯的各层</li>
<li>平台和操作系统</li>
<li>代码和数据</li>
<li>系统和应用</li>
<li>业务和IT</li>
</ul>
</li>
<li><p>成为一名专家 缺乏技术深度呀</p>
</li>
</ul>
<p>工作环境大部分在虚拟机上编译并执行编程语言，所以可以花点时间学习虚拟机内部是如何工作地，花点时间学习源文件，外部函数库，从哪来的，输入一个外部函数库到底意味着什么？ 编译程序、操作系统或者虚拟机如何将多个代码段连接起来，形成一个连贯系统？工作之余，找份教课地兼职，不为别的就是单纯的练习</p>
<ul>
<li><p>不要孤注一掷 下载一个开源的JBoss或者Geronimo服务器，留出时间来学习这些服务器内部是如何运作的，而不只是学习如何操作。视野被拓宽了，思想开放了，大脑解析的概念和模式更易于扩展及广泛应用，</p>
</li>
<li><p>热爱它，不然就离开它</p>
</li>
</ul>
<h2 id="在产品上投资"><a href="#在产品上投资" class="headerlink" title="在产品上投资"></a>在产品上投资</h2><h3 id="学习钓鱼"><a href="#学习钓鱼" class="headerlink" title="学习钓鱼"></a>学习钓鱼</h3><h3 id="学习行业是如何运转的"><a href="#学习行业是如何运转的" class="headerlink" title="学习行业是如何运转的"></a>学习行业是如何运转的</h3><h3 id="寻找良师"><a href="#寻找良师" class="headerlink" title="寻找良师"></a>寻找良师</h3><h3 id="做一名良师"><a href="#做一名良师" class="headerlink" title="做一名良师"></a>做一名良师</h3><h3 id="练习，练习，再练习"><a href="#练习，练习，再练习" class="headerlink" title="练习，练习，再练习"></a>练习，练习，再练习</h3><h3 id="做事的方法"><a href="#做事的方法" class="headerlink" title="做事的方法"></a>做事的方法</h3><h3 id="站在巨人的肩膀上"><a href="#站在巨人的肩膀上" class="headerlink" title="站在巨人的肩膀上"></a>站在巨人的肩膀上</h3><h3 id="在工作中，将自己自动化"><a href="#在工作中，将自己自动化" class="headerlink" title="在工作中，将自己自动化"></a>在工作中，将自己自动化</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">要主动问，不要等着别人来告诉你！</span><br><span class="line"></span><br><span class="line">Don&#x27;t wait to be told,Ask!</span><br><span class="line"></span><br><span class="line">只有了解了一个行业后，你才能创造性地有所建树。</span><br><span class="line"></span><br><span class="line">You can&#x27;t creatively help a business until you know how it works.</span><br><span class="line"></span><br><span class="line">可以依赖别人，但需要这个人是靠得住的。</span><br><span class="line"></span><br><span class="line">It&#x27;s OK to depend on someone. Just make sure it&#x27;s the right person.</span><br><span class="line"></span><br><span class="line">想要弄明白自己是不是真的懂得某一知识，那就把它讲给其他人听。</span><br><span class="line"></span><br><span class="line">To find out whether you really know something, try teaching it to some else.</span><br><span class="line"></span><br><span class="line">做导师不会下岗。</span><br><span class="line"></span><br><span class="line">Mentors tend not to get laid off.</span><br><span class="line"></span><br><span class="line">在极限处练习。</span><br><span class="line"></span><br><span class="line">Practice at your limits.</span><br><span class="line"></span><br><span class="line">想要拥有自己得步骤，那就执行它。</span><br><span class="line"></span><br><span class="line">If you want to feel own a process, help implement it.</span><br><span class="line"></span><br><span class="line">从现有程序中得到领悟。</span><br><span class="line"></span><br><span class="line">Mine existing code for insights.</span><br><span class="line"></span><br><span class="line">用现有程序来反思自己得程序。</span><br><span class="line"></span><br><span class="line">Use existing code to reflect on your own capabilities.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><h3 id="就是现在"><a href="#就是现在" class="headerlink" title="就是现在"></a>就是现在</h3><h3 id="读心术"><a href="#读心术" class="headerlink" title="读心术"></a>读心术</h3><h3 id="每日成绩"><a href="#每日成绩" class="headerlink" title="每日成绩"></a>每日成绩</h3><h3 id="别忘了你在为谁工作"><a href="#别忘了你在为谁工作" class="headerlink" title="别忘了你在为谁工作"></a>别忘了你在为谁工作</h3><h3 id="安分守己"><a href="#安分守己" class="headerlink" title="安分守己"></a>安分守己</h3><h3 id="今天我能把工作做到多好？"><a href="#今天我能把工作做到多好？" class="headerlink" title="今天我能把工作做到多好？"></a>今天我能把工作做到多好？</h3><h3 id="你的价值是多少"><a href="#你的价值是多少" class="headerlink" title="你的价值是多少"></a>你的价值是多少</h3><h3 id="一桶水中的鹅卵石"><a href="#一桶水中的鹅卵石" class="headerlink" title="一桶水中的鹅卵石"></a>一桶水中的鹅卵石</h3><h3 id="爱上维护"><a href="#爱上维护" class="headerlink" title="爱上维护"></a>爱上维护</h3><h3 id="8小时激情燃烧"><a href="#8小时激情燃烧" class="headerlink" title="8小时激情燃烧"></a>8小时激情燃烧</h3><h3 id="学习如何失败"><a href="#学习如何失败" class="headerlink" title="学习如何失败"></a>学习如何失败</h3><h3 id="说“不“"><a href="#说“不“" class="headerlink" title="说“不“"></a>说“不“</h3><h3 id="不要恐慌"><a href="#不要恐慌" class="headerlink" title="不要恐慌"></a>不要恐慌</h3><h3 id="说出来、行动、展示"><a href="#说出来、行动、展示" class="headerlink" title="说出来、行动、展示"></a>说出来、行动、展示</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">就现在，我们能做些什么？</span><br><span class="line"></span><br><span class="line">What can we do？ Right Now?</span><br><span class="line"></span><br><span class="line">读心术用的好，人们就会信任你。</span><br><span class="line"></span><br><span class="line">The mind-reading trick, if done well, leads to people depending on you.</span><br><span class="line"></span><br><span class="line">每天都有可汇报得成绩</span><br><span class="line"></span><br><span class="line">Have an accomplishment to report every day.</span><br><span class="line"></span><br><span class="line">经理得成功，就是你们得成功。</span><br><span class="line"></span><br><span class="line">Your managers&#x27; successes are your successes.</span><br><span class="line"></span><br><span class="line">需有雄心，但不必路人皆知。</span><br><span class="line"></span><br><span class="line">Be ambitious,but don&#x27;t wear it on your sleeve.</span><br><span class="line"></span><br><span class="line">你能为工作增添多少乐趣？</span><br><span class="line"></span><br><span class="line">How muuch more fun could you make your job?</span><br><span class="line"></span><br><span class="line">问自己 ”今天实现自己得价值了么？“</span><br><span class="line"></span><br><span class="line">Ask， ”Was I worth it today?“</span><br><span class="line"></span><br><span class="line">小心！别让成功冲昏了头脑。</span><br><span class="line"></span><br><span class="line">Beware of being blinded by your own succes.</span><br><span class="line"></span><br><span class="line">维护也可以成为自由和创造的沃土。</span><br><span class="line"></span><br><span class="line">Maintenance can be a place of freedom and creativity.</span><br><span class="line"></span><br><span class="line">做项目像是马拉松，而不是全速短跑。</span><br><span class="line"></span><br><span class="line">Projects are marathons, not sprints.</span><br><span class="line"></span><br><span class="line">每个错误的音调离正确的音调不过一步之遥。</span><br><span class="line"></span><br><span class="line">Every wrong nots is but one step away form a right one.</span><br><span class="line"></span><br><span class="line">充满压力的时候是赢得忠诚的最好时机。</span><br><span class="line"></span><br><span class="line">Stressful times offer the best opportunities to build loyalty.</span><br><span class="line"></span><br><span class="line">为了避免失望而说”是“，就是再说谎。</span><br><span class="line"></span><br><span class="line">Saying &quot;yes&quot; to avoid disappointment is just lying.</span><br><span class="line"></span><br><span class="line">英雄从不恐慌。</span><br><span class="line"></span><br><span class="line">Heroes never panic.</span><br><span class="line"></span><br><span class="line">状态报告可以帮助你推销自己。</span><br><span class="line"></span><br><span class="line">Status reports can help you market yourself.</span><br></pre></td></tr></table></figure>

<h3 id="推销……不仅仅是迎合"><a href="#推销……不仅仅是迎合" class="headerlink" title="推销……不仅仅是迎合"></a>推销……不仅仅是迎合</h3><h3 id="不要忽视感觉"><a href="#不要忽视感觉" class="headerlink" title="不要忽视感觉"></a>不要忽视感觉</h3><h3 id="探险向导"><a href="#探险向导" class="headerlink" title="探险向导"></a>探险向导</h3><h3 id="学会沟通，善于写作"><a href="#学会沟通，善于写作" class="headerlink" title="学会沟通，善于写作"></a>学会沟通，善于写作</h3><h3 id="到场"><a href="#到场" class="headerlink" title="到场"></a>到场</h3><h3 id="适当的言语"><a href="#适当的言语" class="headerlink" title="适当的言语"></a>适当的言语</h3><h3 id="改变世界"><a href="#改变世界" class="headerlink" title="改变世界"></a>改变世界</h3><h3 id="让人们听到你的声音"><a href="#让人们听到你的声音" class="headerlink" title="让人们听到你的声音"></a>让人们听到你的声音</h3><h3 id="创建自己的商标"><a href="#创建自己的商标" class="headerlink" title="创建自己的商标"></a>创建自己的商标</h3><h3 id="发布你编写的程序"><a href="#发布你编写的程序" class="headerlink" title="发布你编写的程序"></a>发布你编写的程序</h3><h3 id="变为卓越的能力"><a href="#变为卓越的能力" class="headerlink" title="变为卓越的能力"></a>变为卓越的能力</h3><h3 id="建立关系"><a href="#建立关系" class="headerlink" title="建立关系"></a>建立关系</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">绩效考核永远都不会是主观的。</span><br><span class="line"></span><br><span class="line">Performance appraisals are never objective.</span><br><span class="line"></span><br><span class="line">客户害怕你。</span><br><span class="line"></span><br><span class="line">Your customers are afraid of you.</span><br><span class="line"></span><br><span class="line">你自己就是你需要解释的内容。</span><br><span class="line"></span><br><span class="line">You are what you can explain.</span><br><span class="line"></span><br><span class="line">了解你的同事。</span><br><span class="line"></span><br><span class="line">Learn about your colleagues.</span><br><span class="line"></span><br><span class="line">请用行业术语推销你的成就。</span><br><span class="line"></span><br><span class="line">Market your accomplishments in the language of your business.</span><br><span class="line"></span><br><span class="line">带着任务去上班，并确保别人知道你的任务。</span><br><span class="line"></span><br><span class="line">Have a misson. Make sure people know it.</span><br><span class="line"></span><br><span class="line">你的名字就是你的商标。</span><br><span class="line"></span><br><span class="line">Your name is your brand.</span><br><span class="line"></span><br><span class="line">Google永远不会忘记。</span><br><span class="line"></span><br><span class="line">Google never forgets.</span><br><span class="line"></span><br><span class="line">人人都能使用Rails，但很少有人能开发出Rails。</span><br><span class="line"></span><br><span class="line">Anyone can use Rails. Few can say Rails contributer.</span><br><span class="line"></span><br><span class="line">展示或者让它死亡！</span><br><span class="line"></span><br><span class="line">Demo or die!</span><br><span class="line"></span><br><span class="line">恐惧感使我们无法接近专业人士。</span><br><span class="line"></span><br><span class="line">Fear gets between us and the pros.</span><br></pre></td></tr></table></figure>

<h2 id="保持技术领先"><a href="#保持技术领先" class="headerlink" title="保持技术领先"></a>保持技术领先</h2><h3 id="已经过时的技术"><a href="#已经过时的技术" class="headerlink" title="已经过时的技术"></a>已经过时的技术</h3><h3 id="你已经失去工作了"><a href="#你已经失去工作了" class="headerlink" title="你已经失去工作了"></a>你已经失去工作了</h3><h3 id="没有终点的道路"><a href="#没有终点的道路" class="headerlink" title="没有终点的道路"></a>没有终点的道路</h3><h3 id="给自己做一份蓝图"><a href="#给自己做一份蓝图" class="headerlink" title="给自己做一份蓝图"></a>给自己做一份蓝图</h3><h3 id="要注意观察市场变化"><a href="#要注意观察市场变化" class="headerlink" title="要注意观察市场变化"></a>要注意观察市场变化</h3><h3 id="镜子里的胖子"><a href="#镜子里的胖子" class="headerlink" title="镜子里的胖子"></a>镜子里的胖子</h3><h3 id="南印度捉猴陷阱"><a href="#南印度捉猴陷阱" class="headerlink" title="南印度捉猴陷阱"></a>南印度捉猴陷阱</h3><h3 id="避免瀑布型职业计划"><a href="#避免瀑布型职业计划" class="headerlink" title="避免瀑布型职业计划"></a>避免瀑布型职业计划</h3><h3 id="每天都有进步"><a href="#每天都有进步" class="headerlink" title="每天都有进步"></a>每天都有进步</h3><h3 id="独立"><a href="#独立" class="headerlink" title="独立"></a>独立</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">你引以为傲的新技术已经过时了。</span><br><span class="line"></span><br><span class="line">Your shing new skills are already obsolete.</span><br><span class="line"></span><br><span class="line">你不是你的工作。</span><br><span class="line"></span><br><span class="line">You are not your job.</span><br><span class="line"></span><br><span class="line">不要关注结果，要关注做事情的过程。</span><br><span class="line"></span><br><span class="line">Focus on doing, not on being done .</span><br><span class="line"></span><br><span class="line">留意那些技术达人。</span><br><span class="line"></span><br><span class="line">Watch the alpha geeks.</span><br><span class="line"></span><br><span class="line">开发员们，需自我反省。</span><br><span class="line"></span><br><span class="line">Developer, review thyself.</span><br><span class="line"></span><br><span class="line">价值僵困使你变弱。</span><br><span class="line"></span><br><span class="line">Rigid values make you fragile.</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Random Thoughts</category>
        <category>话题集</category>
      </categories>
      <tags>
        <tag>想法</tag>
        <tag>一切可能</tag>
      </tags>
  </entry>
  <entry>
    <title>Qwerty Learner推荐及想法</title>
    <url>/2021/03/24/Random%20Thoughts/%E8%AF%9D%E9%A2%98%E9%9B%86/Qwerty%20Learner%E6%8E%A8%E8%8D%90%E5%8F%8A%E6%83%B3%E6%B3%95/</url>
    <content><![CDATA[<p> <a href="https://github.com/Kaiyiwing/qwerty-learner">Qwerty Learner</a>一个非常值得使用的打字项目</p>
<span id="more"></span>

<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>一直都找一款可以练习打字的，有很多但都不太满意，在telegram频道看到了推荐的这个项目，在体验了一个小时，使用体验非常赞，我现在的想法是依这个项目为准，搞懂整个原理，增加航空词典，古诗词典。是否可以在网站上实现功能先不考虑，先在本地运行。</p>
<p>项目安排时间（一周完成）：</p>
<ul>
<li><a href="#%E9%98%85%E8%AF%BB%E9%A1%B9%E7%9B%AE%E6%9F%A5%E6%89%BE%E8%B5%84%E6%96%99">阅读项目查找资料</a>第一天</li>
<li><a href="#%E5%88%86%E6%9E%90%E9%83%A8%E7%BD%B2">分析部署</a>第二天</li>
<li><a href="#%E8%B0%83%E8%AF%95">调试</a>第三天</li>
<li><a href="#%E6%B5%8B%E8%AF%95">测试</a>第四天</li>
<li><a href="#%E6%96%87%E6%A1%A3%E6%8A%A5%E5%91%8A">文档报告</a>第五天</li>
<li><a href="#%E6%96%87%E6%A1%A3%E6%8A%A5%E5%91%8A">文档报告</a>第六天</li>
<li><a href="#%E6%96%87%E6%A1%A3%E6%8A%A5%E5%91%8A">文档报告</a>第七天</li>
</ul>
<h2 id="阅读项目查找资料"><a href="#阅读项目查找资料" class="headerlink" title="阅读项目查找资料"></a>阅读项目查找资料</h2><p>一个个人项目的启动是需要学习很多参考更多借鉴美的作品，看来很多类似的实现，越能感觉到一个好的项目需要持久的更新，更需要详细的文档，否则无法形成良性循环。</p>
<p>需要一个美的图标，访问地址</p>
<h3 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h3><p>软件设计的目标群体以英语作为主要工作语言的键盘工作者。部分人会出现输入母语时的打字速度快于英语的情况，因为多年的母语输入练成了肌肉记忆，而英语输入的肌肉记忆相对较弱，容易出现输入英语时“提笔忘字”的现象。</p>
<p>同时为了巩固英语技能，也需要持续的背诵单词，本软件将英语单词的记忆与英语键盘输入的肌肉记忆的锻炼相结合，可以在背诵单词的同时巩固肌肉记忆。</p>
<p>为了避免造成错误的肌肉记忆，设计上如果用户单词输入错误则需要重新输入单词，尽可能确保用户维护正确的肌肉记忆。</p>
<p>软件也对需要机考英语的人群有一定的帮助。</p>
<p><strong>For Coder:</strong></p>
<p>内置了程序员工作常用单词的词库，方便联系工作中常用的单词、提高输入速度。也内置了JS API 的练习，帮助以JS为主要工作语言的程序员练习常用的API，其它语言的API正在添加中…</p>
<h3 id="功能列表"><a href="#功能列表" class="headerlink" title="功能列表"></a>功能列表</h3><ul>
<li>词库</li>
</ul>
<p>内置常用CET-4、CET-6、GMAT、GRE、IEITS、SAT、TOEFL、考研英语、专业四级英语、专业八级英语。也有程序员常见英语单词以及JS APT等词库。</p>
<ul>
<li>音标显示、发音功能</li>
</ul>
<p>方便用户在记忆单词时，同时记忆读音与音标。</p>
<ul>
<li>默写模式</li>
</ul>
<p>完成一个章节练习后，是否默写本章，方便用户巩固本章学习的单词。</p>
<ul>
<li>速度、正确率显示</li>
</ul>
<p>量化用户输入的速度和输入的正确率，让用户感知了解自己技能的提升</p>
<h3 id="词库列表"><a href="#词库列表" class="headerlink" title="词库列表"></a>词库列表</h3><ul>
<li>CET-4</li>
<li>CET-6</li>
<li>GMAT</li>
<li>GRE</li>
<li>IELTS</li>
<li>SAT</li>
<li>TOEFL</li>
<li>考研英语</li>
<li>专业四级英语</li>
<li>专业八级英语</li>
<li>Coder Dict 程序员常用词</li>
<li>高考</li>
<li>中考</li>
<li>商务英语</li>
<li>BEC</li>
<li>人教版英语 3-9 年级</li>
</ul>
<h3 id="API词库"><a href="#API词库" class="headerlink" title="API词库"></a>API词库</h3><ul>
<li>JavaScript API. <a href="https://github.com/sdu-gyf">@sdu-gyf</a></li>
<li>Node.js API. <a href="https://github.com/chrysalis1215">@chrysalis1215</a></li>
<li>Java API. <a href="https://github.com/SFAfreshman">@darkSheep</a></li>
</ul>
<h3 id="功能与建议"><a href="#功能与建议" class="headerlink" title="功能与建议"></a>功能与建议</h3><p>目前在开发初期</p>
<h3 id="共享指南"><a href="#共享指南" class="headerlink" title="共享指南"></a>共享指南</h3><h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><h3 id="灵感来源"><a href="#灵感来源" class="headerlink" title="灵感来源"></a>灵感来源</h3><ul>
<li><a href="https://www.keybr.com/">Keybr</a></li>
</ul>
<p>算法著称，功能完善的打字网站，根据用户输入正确率与速度生成“伪代码”帮助用户集中锻炼，还能生成分析报告。</p>
<p>这个项目的核心灵感来源，Keybr更多针对英语为母语的用户，虽然可以练习字母，但不能提升对单词的掌握，本项目出现了。</p>
<ul>
<li><a href="https://www.typing.academy/">Typing Academy</a></li>
</ul>
<p>一个非常优秀的打字练习网站。<br>优秀的UI风格，对速度、正确率的展示极大的影响本项目的UI设计</p>
<ul>
<li><a href="https://github.com/webzhd/react-code-game">react-code-game</a></li>
</ul>
<p>一个非常酷的开源项目，使用ts实现，可以在练习打字的同时练习js内置api,项目中添加代码api的想法来源此项目。</p>
<h2 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h2><ul>
<li><a href="https://github.com/facebook/react">React</a>&amp;<a href="https://github.com/facebook/create-react-app">CRA</a></li>
</ul>
<p>有完整和详细的文档对初学者非常友好，React系得文档目前自学过程中的最棒的文档，几乎解决使用中的发部分问题。在此感谢React对开源世界的贡献，为我们搭建了很好的基础，让初学者也能构建非常棒的软件。</p>
<ul>
<li><a href="https://tailwindcss.com/docs">Tailwindcss</a></li>
</ul>
<p>tailwind的设计思路解决了css入门选手对写复杂css的恐惧，让新手以一个非常舒适的方式去设计UI。</p>
<h2 id="数据来源"><a href="#数据来源" class="headerlink" title="数据来源"></a>数据来源</h2><p>字典数据来自于<a href="https://github.com/kajweb/dict">kajweb</a>,项目爬取了常见的字典，也是这个项目使得这个想法得以实现。</p>
<p>语音数据来源于<a href="https://www.youdao.com/">有道词典</a>开放API，感谢有道的贡献让小项目可以使用非常专业的发音资源，感谢有道团队以及考神团队为中国教育与中外交流做出的重要贡献。</p>
<p>JS API来自于<a href="https://github.com/webzhd/react-code-game">react-code-game</a>,感谢项目对JS API的爬取与预处理。</p>
<h2 id="项目Icon"><a href="#项目Icon" class="headerlink" title="项目Icon"></a>项目Icon</h2><p>感谢<a href="https://github.com/libregd">libregd</a>提供图标设计，贡献多个图标设计方案，同时对项目提供设计、建议、未来规划等。</p>
<h2 id="感谢支持"><a href="#感谢支持" class="headerlink" title="感谢支持"></a>感谢支持</h2><p>都是大佬啊，有人支持才有动力写下去。</p>
]]></content>
      <categories>
        <category>Random Thoughts</category>
        <category>话题集</category>
      </categories>
      <tags>
        <tag>想法，实践</tag>
      </tags>
  </entry>
  <entry>
    <title>话题</title>
    <url>/2021/03/24/Random%20Thoughts/%E8%AF%9D%E9%A2%98%E9%9B%86/%E8%AF%9D%E9%A2%98/</url>
    <content><![CDATA[<p>列出一切可能，不需要过多思考，就是写一遍关于这个观点的文章。每日更新。</p>
<span id="more"></span>

<h2 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h2><p>刑法</p>
<p>物权法</p>
<p>劳动法</p>
<p>辩论</p>
<p>航空电子</p>
<p>无限大可能</p>
<ul>
<li><p>Qwerty Learner</p>
</li>
<li><p>职业规划之道</p>
</li>
</ul>
<p>linux</p>
<p>github学习</p>
<p>README</p>
<p>每天抽出时间看看数学相关的wiki</p>
<p>微软日本</p>
<p>GRE</p>
<p>英语博客</p>
]]></content>
      <categories>
        <category>Random Thoughts</category>
        <category>话题集</category>
      </categories>
      <tags>
        <tag>想法</tag>
        <tag>一切可能</tag>
      </tags>
  </entry>
  <entry>
    <title>design-document</title>
    <url>/2019/03/15/professional/design-document/design-document/</url>
    <content><![CDATA[<p>或许在某一刻才真正发觉到，一个合格的技术员，代码只占其中一部分，技术文档的编写和代码真的是相同重要的。</p>
<span id="more"></span>
]]></content>
      <categories>
        <category>professional</category>
        <category>design-document</category>
      </categories>
      <tags>
        <tag>writing</tag>
        <tag>skill</tag>
      </tags>
  </entry>
  <entry>
    <title>TDD</title>
    <url>/2021/03/21/professional/design-document/TDD/</url>
    <content><![CDATA[<ul>
<li>学习<a href="http://www.agiledata.org/essays/tdd.html">Introduction to Test Driven Development (TDD)</a>文档结构。</li>
<li>学习文档结构<a href="https://www.vogella.com/tutorials/JUnit/article.html">Unit Testing with JUnit 5 - Tutorial</a></li>
<li><a href="http://www.agilemodeling.com/essays/agileDocumentation.htm">Agile/Lean Documentation: Strategies for Agile Software Development</a></li>
</ul>
<span id="more"></span>

<h4 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h4><ul>
<li><a href="#What-is-TDD%EF%BC%9F">What is TDD?</a></li>
<li><a href="#TDD-and-traditional-testing">TDD and traditional testing</a></li>
<li><a href="#TDD-and-documentation">TDD and documentation</a></li>
<li><a href="#Test-driven-database-development">Test-driven database development</a></li>
<li><a href="#Scalling-TDD-via-Agile-Model-Driven-Development-(AMDD)">Scaling TDD via Agile Model-Driven Development (AMDD)</a></li>
<li><a href="#Why-TDD?">Why TDD?</a></li>
<li><a href="#Myths-and-misconeptions">Myths and misconceptions</a></li>
<li><a href="#Who-is-actually-doing-this?">Who is actually doing this?</a></li>
<li><a href="#Summary">Summary</a></li>
<li><a href="#Tools">Tools</a></li>
</ul>
<h2 id="What-is-TDD"><a href="#What-is-TDD" class="headerlink" title="What is TDD?"></a>What is TDD?</h2>]]></content>
      <categories>
        <category>professional</category>
        <category>design-document</category>
      </categories>
      <tags>
        <tag>writing</tag>
      </tags>
  </entry>
  <entry>
    <title>Git tutorial</title>
    <url>/2021/03/25/professional/effience/git%20tutorial/</url>
    <content><![CDATA[<p> 提高效率</p>
<span id="more"></span>

<h2 id="Working-with-Remotes"><a href="#Working-with-Remotes" class="headerlink" title="Working with Remotes"></a>Working with Remotes</h2><p>Showing Your Remotes</p>
<pre><code class="git">git remote

git remote -v

origin:https://github.com/schacon/ticgit (fetch)
origin:https://github.com/schacon/ticgit (push)

git push origin master

# 查看项目的tag

git tag

git checkout v0.10.48
</code></pre>
]]></content>
      <categories>
        <category>professional</category>
        <category>effience</category>
      </categories>
      <tags>
        <tag>efficiency</tag>
      </tags>
  </entry>
  <entry>
    <title>读史明智</title>
    <url>/2021/03/31/professional/effience/%E8%AF%BB%E5%8F%B2%E6%98%8E%E6%99%BA/</url>
    <content><![CDATA[<p>剑桥中国史</p>
<p>哈佛中国史</p>
<p>中国近代史</p>
<span id="more"></span>

<h2 id="剑桥中国秦汉史"><a href="#剑桥中国秦汉史" class="headerlink" title="剑桥中国秦汉史"></a>剑桥中国秦汉史</h2><p>P46</p>
]]></content>
      <categories>
        <category>professional</category>
        <category>effience</category>
      </categories>
      <tags>
        <tag>thinking</tag>
      </tags>
  </entry>
  <entry>
    <title>Mathmatics</title>
    <url>/2021/03/26/professional/math/Mathmatics/</url>
    <content><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Mathematics">Mathmatic</a></p>
<span id="more"></span>]]></content>
      <categories>
        <category>professional</category>
        <category>math</category>
      </categories>
      <tags>
        <tag>logic</tag>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>调控一体智能防误操作系统</title>
    <url>/2021/03/27/professional/%E5%B7%A5%E4%BD%9C/%E8%B0%83%E6%8E%A7%E4%B8%80%E4%BD%93%E6%99%BA%E8%83%BD%E9%98%B2%E8%AF%AF%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>调控一体智能防误操作系统demo<br><a href="https://tantai.lanzous.com/isXPvne9nfe">调控一体智能防误操作系统的设计与实现_史思红</a></p>
<p><a href="https://tantai.lanzous.com/i1cvqne9mib">D5000系统在安阳电网调控一体化的应用研究_邵辰飞</a></p>
<span id="more"></span>

<h2 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h2><p>电气设备操作正确性是电网安全运行的一个重要指标，传统的人工编制操作票和人工审核，过度地依赖人员的工作经验、技能能力、责任态度和人为意识等不稳定因素，存<br>在不易可控的隐患。本demo通过学习<a href="https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CMFD&dbname=CMFD201902&filename=1019853780.nh&v=FdBz%25mmd2B61JyAYQ6dapV3RKSXI9rQo%25mmd2BFsmWvntJ3yrsmt95pTig9eurpzqs%25mmd2BfaRzU5M">调控一体智能防误操作系统的设计与实现_史思红</a>基本完成原操作功能</p>
<ul>
<li><p>调度拟票</p>
</li>
<li><p>命令解析</p>
</li>
<li><p>到监控执行</p>
</li>
<li><p>全过程防误校核，</p>
</li>
<li><p><a href="#%E7%B3%BB%E7%BB%9F%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90">系统需求分析</a></p>
</li>
<li><p><a href="#%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1">系统设计</a></p>
</li>
<li><p><a href="#%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0">系统实现</a></p>
</li>
<li><p><a href="#%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95">系统测试</a></p>
</li>
<li><p><a href="#%E7%BB%93%E5%B1%95%E6%9C%9B">总结展望</a></p>
</li>
</ul>
<h2 id="系统需求分析"><a href="#系统需求分析" class="headerlink" title="系统需求分析"></a>系统需求分析</h2><p>随着“大运行、大检修”体系的建设，变电站无人值班大量推广，设备监控权限的上移和设备远方操作的普及，调度、监控运行操作安全管理的正确性越来越重要，调度、监控运行人员的日常工作量和安全压力日益剧增，现场值班人员越来越少，人员变动频繁，传统的以运行人员的技能水平为主的防误操作方式已不能满足现在的安全需求，以技术手段来减低运行人员的工作量、提高调度操作及防误管理的模式愈发凸显重要性，调度操作票智能推理和防误技术实用化亦愈发需要推广。</p>
<h3 id="原系统功能"><a href="#原系统功能" class="headerlink" title="原系统功能"></a>原系统功能</h3><ul>
<li>配网图形管理</li>
<li>配网资源管理</li>
<li>配网运行管理</li>
<li>综合查询</li>
<li>其他管理</li>
</ul>
<h3 id="新系统需求分析"><a href="#新系统需求分析" class="headerlink" title="新系统需求分析"></a>新系统需求分析</h3><ul>
<li>系统配置管理</li>
<li>调度操作票管理</li>
<li>监控操作票管理</li>
<li>一体化防误管理</li>
<li>操作票全过程管理</li>
</ul>
<h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><ul>
<li>系统设计原则</li>
<li>软件架构设计</li>
<li>网络架构原理</li>
<li>智能客户端</li>
<li>系统网络性能</li>
<li>系统配置管理调度操作票管理</li>
<li>操作票全过程管理</li>
<li>数据库设计</li>
</ul>
<h2 id="系统实现"><a href="#系统实现" class="headerlink" title="系统实现"></a>系统实现</h2><ul>
<li>系统管理模块</li>
<li>调度操作票管理</li>
<li>监控操作票管理</li>
<li>设备信息校验</li>
<li>操作票全过程管理</li>
</ul>
<h2 id="系统测试"><a href="#系统测试" class="headerlink" title="系统测试"></a>系统测试</h2><p>测试目的和方法<br>测试环境<br>测试用例设计<br>测试内容和结论</p>
]]></content>
      <categories>
        <category>professional</category>
        <category>工作</category>
      </categories>
      <tags>
        <tag>skill</tag>
        <tag>demo</tag>
      </tags>
  </entry>
  <entry>
    <title>机型电气系统</title>
    <url>/2020/09/15/professional/%E6%9C%AC%E4%B8%93%E4%B8%9A%E5%90%A7/%E6%9C%BA%E5%9E%8B%E7%94%B5%E6%B0%94%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<span id="more"></span>
]]></content>
      <categories>
        <category>professional</category>
        <category>本专业吧</category>
      </categories>
      <tags>
        <tag>skill</tag>
      </tags>
  </entry>
  <entry>
    <title>线性代数</title>
    <url>/2021/03/26/professional/math/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/</url>
    <content><![CDATA[<p> <a href="https://en.wikipedia.org/wiki/Linear_algebra">Linear algebra</a></p>
<span id="more"></span>

<h2 id="用途与应用"><a href="#用途与应用" class="headerlink" title="用途与应用"></a>用途与应用</h2><p>几乎在所有数学领域中得到使用，因此几乎在所有使用数学的科学领域中都具有线性代数的意义。这些应用程序可以分为几大类。</p>
<h3 id="周围空间的几何形状"><a href="#周围空间的几何形状" class="headerlink" title="周围空间的几何形状"></a>周围空间的几何形状</h3><h3 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h3><h3 id="复杂系统研究"><a href="#复杂系统研究" class="headerlink" title="复杂系统研究"></a>复杂系统研究</h3><h3 id="科学计算"><a href="#科学计算" class="headerlink" title="科学计算"></a>科学计算</h3>]]></content>
      <categories>
        <category>professional</category>
        <category>math</category>
      </categories>
      <tags>
        <tag>思维，逻辑</tag>
      </tags>
  </entry>
  <entry>
    <title>飞机环境控制系统</title>
    <url>/2020/10/15/professional/%E6%9C%AC%E4%B8%93%E4%B8%9A%E5%90%A7/%E9%A3%9E%E6%9C%BA%E7%8E%AF%E5%A2%83%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Environmental_control_system">Environmental control system</a></p>
<span id="more"></span>

<p>专业课内容也不要拉下，计划制作相关模型。</p>
]]></content>
      <categories>
        <category>professional</category>
        <category>本专业吧</category>
      </categories>
      <tags>
        <tag>skill</tag>
      </tags>
  </entry>
  <entry>
    <title>电传操纵系统</title>
    <url>/2020/09/15/professional/%E6%9C%AC%E4%B8%93%E4%B8%9A%E5%90%A7/%E9%A3%9E%E6%9C%BA%E7%94%B5%E4%BC%A0%E6%93%8D%E7%BA%B5%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>飞机电操纵系统<a href="https://en.wikipedia.org/wiki/Fly-by-wire">Fly-by-wire (FBW)</a></p>
<span id="more"></span>
]]></content>
      <categories>
        <category>professional</category>
        <category>本专业吧</category>
      </categories>
      <tags>
        <tag>skill</tag>
      </tags>
  </entry>
  <entry>
    <title>微调</title>
    <url>/2018/11/07/People%20that%20affect%20me/%E5%BE%AE%E8%B0%83/</url>
    <content><![CDATA[<p>做咸鱼没什么不好的，不过做条有梦想的咸鱼也不赖。</p>
<span id="more"></span>

<h2 id="工业界-学术界"><a href="#工业界-学术界" class="headerlink" title="工业界 学术界"></a>工业界 学术界</h2><p><strong>对于绝大部分人而言，努力成为交叉领域的熟手，远比成为计算机科学家要现实且有意义</strong><br>大部分人最终不会从事算法研究，而会奋斗在一线应用领域。</p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>工业界未来需要什么样的机器学习人才？老生常谈，能将模型应用于专业领域的人，也就是跨领域让机器学习落地的人。我们需要并将长期需要这样的人才，这样的需求不会是昙花一现，这就跟web开发是一个道理，从火热到降温也经过了十年的周期。一个领域的发展有特定的周期，机器学习的门槛比web开发高而且正属于朝阳期，所以大家致力于成为“专精特定领域”的机器学习专家并不过时。</p>
<p><strong>能写代码、构建模型的人千千万，但理解自己在做什么，并从中结合自己的领域知识提供商业价值的人少之又少。</strong></p>
<p>调侃一句，哪个方向的机器学习人才最紧缺？答：每个领域都需要专精的机器学习人才，你对特定领域的理解就是你的武器。</p>
<h2 id="基本功"><a href="#基本功" class="headerlink" title="基本功"></a>基本功</h2><p>需要了解基本的数学统计知识即可，再一次重申，我对于算法的看法是大部分人不要造轮子，不要造轮子，不要造轮子！只要理解自己在做什么，知道选择什么模型，直接调用API和现成的工具包就好了。</p>
<ul>
<li>回归模型(Regression)</li>
<li>分类模型(Classification)</li>
<li>神经网络(Neural Networks)</li>
<li>数据压缩/可视化(Data Compression &amp; Visualization)</li>
<li>无监督学习和半监督学习(Unsupervised &amp; Semi-supervised Learning)</li>
</ul>
<p>基本功的意义是当你面对具体问题的时候，你很清楚可以用什么武器来处理</p>
<h2 id="秘密武器"><a href="#秘密武器" class="headerlink" title="秘密武器"></a>秘密武器</h2><p>学生朋友们可以更多的关注自己感兴趣的领域，思考如何可以把机器学习运用于这个领域。而已经有了工作/研究经验的朋友，要试着将自己的工作经历利用起来。举例，不要做机器学习里面最擅长投资的人，而要做金融领域中最擅长机器学习的专家，这才是你的价值主张(value proposition)。最重要的是，机器学习的基本功没有大家想的那么高不可攀，没有必要放弃自己的本专业全职转行，沉没成本太高。通过跨领域完全可以做到曲线救国，化劣势为优势，你们可能比只懂机器学习的人有更大的行业价值。</p>
<p>对特定领域的深刻理解往往就是捅破窗户的那最后一层纸，只理解模型但不了解数据和数据背后的意义，导致很多机器学习模型只停留在好看而不实用的阶段</p>
<p>没有什么不会改变，这个时代的科技迭代速度很快。从深度学习开始发力到现在也不过短短十年，所以没有人知道下一个会火的是什么？以深度学习为例，这两年非常火的对抗生成网络(GAN)，多目标学习(multi-lable learning)，迁移学习(transfer learning)都还在飞速的发展。有关于深度学习为什么有良好泛化能力的理论猜想文章在最新的NIPS听说也录了好几篇。这<strong>都说明了没有什么行业可以靠吃老本一直潇洒下去，我们还需要追新的热点。</strong></p>
<p>技术总会过时，热点总会过去，但不会过去的是我们不断追求新科技的热情和对自己的挑战。</p>
<ul>
<li>物理就是物理，不分中华物理和美国物理。</li>
<li>数学就是数学，不分希腊数学和中华数学。</li>
</ul>
<p>绝大部分基础学科的知识都是不分国界的，如果不是因为德语普及程度不高，某些学科用德文教材也可以。</p>
<p>学知识，切忌就是追求无意义的形式，而抛弃了学习的本质。计算机领域一大禁忌就是重复造低质量的轮子，教科书同理。只要用外文书对于学习内容效率的提升大于语言障碍的影响，就该大力推崇。通过使用原版书和观看公开课，也是对于英语的一种锻炼。<strong>至少在理工科领域，大部分教材的阅读门槛没有想象中的高，且有助于提早训练学生进行学术写作，熟悉相关专业术语</strong>。</p>
<p>“评价一个艺术家的成就，你得先看看他/她的东西有没有形成风格，<strong>没风格、没有独立思考的作品一文不值</strong>。”</p>
<p>人生有两个重要时刻：<strong>一是意识到自己只是普通人，二是意识到自己的孩子只是普通人</strong>。评论区也读到两句有意思的话，大意是人生有两个重要时刻：<strong>一是发现自己不是普通人，二是发现自己是普通人</strong>。</p>
<p>坚持不是问题的核心，当然需要慢慢雕琢。思考频率，广度和深度。</p>
<p>我们学习到的新知识其实是一件件工具，不断用学到的新工具去重新思考以前的旧问题，往往新工具就能解决旧问题。我的一个建议不如把自己遇到的各种科研问题，不论多么不成熟都记下来在本子上，每过一阵子去翻看一遍学到的新知是否能够解决新问题。比如没学数据结构前，你总在想为啥我实现的机器学习模型这么慢，学了以后才知道搜索近邻可以用kd-tree，要是可并行的任务可以分解成小任务在多个core上运行。很<strong>多问题的答案其实非常朴实无华，但当你知道答案时，往往连问题都忘了，所以你总是没有好点子</strong>。因此要不断的记录，不断的回溯。随着你不断重复这个过程，思考的广度和深度都会上升。</p>
<p>人最终的问题就是想太多而做太少。绝大部分学术新星一开始的点子也是老板给的，或者一开始的工作也并非特别惊艳。但做的多了，质量总是会上升的。务实的说，有了尚可的点子就先做实验，有了尚可的实验结果就写论文，今天发不了CVPR就先发ICIP，迭代式上升才是符合普通人的路线。如果想要奔着搞大新闻的目标做科研，往往会卡很久很久很久…很久很久很久。但也不能总恰烂文章，必须逐步提高对自己的要求。</p>
<p>只有对自己的内容认可，才能做出让大家接受的内容。你最好能找到自己觉得有意思且重要的课题，而非是能发XXX会议的课题。只有这样你的内心才有动力，而非迷茫与功利。**而这一切的前提，也还是要有一定的思考和观察，毕竟好的点子不会从天上掉下来。而当你的工作质量上去了，得到关注与发表到好的期刊/会议只是水到渠成而已。</p>
<p>去做一些至少自己感兴趣且可以感到满意的工作</p>
<p>需要不断提高自己的思考能力和执行力。再务实一点说，<strong>从就业角度看做机器学习不一定比学软件开发性价比更高</strong>，毕竟后者岗位多需求大不易过气。所以在投身机器学习科研前，或者任何科研领域前，不如先想想自己的目的是啥，是为了找工作？发大财？当科学家？还是？没了解清楚前，不要给自己定一个虚无缥缈的的目标，也不要读了大牛的成功故事就感到自惭形秽。<strong>日子是我们自己的，你被感动、被激励只是说明人家文章写得好，和我们关系不大。你学学写作技巧后，最好赶快回到现实世界里来比较重要。不要给自己加戏，自怨自艾、感动、受鼓舞，都大可不必，务实就好。</strong></p>
<p>我的工作内容到底是啥？<strong>我告她就是修自行车</strong>。一个新点子就像是个骨架，初期修修补补先上路再说，叮叮哐哐咱慢慢修它，先能骑就行。你沿路捡个轮胎，随手淘个发动机（找到了新的工具），再一改装，或许就成摩托车了。搞科研的，别看见人家有摩托车就焦虑，就眼红，就着急，其实大家都是一路捡破烂过来的。</p>
<p>大家出门都是一双脚，你要啥自行车啊？</p>
<h2 id="社交"><a href="#社交" class="headerlink" title="社交"></a>社交</h2><p>social networking</p>
<p><strong>社交其实是一种投资</strong>，<strong>本质上寻求一种交换</strong></p>
<p>职场社交的重点是<strong>真诚与简洁</strong>，不要绕太多弯，说人话说明白话。你跟比你资深/地位高的人接触时，对方很清楚你想的是什么，所以有内心铺垫来帮助你（即使并非义务）。所以你只要真诚的说明白自己的需求即可，不要绕太大的圈子，毕竟每个人都很忙。</p>
<h3 id="丰富阅历"><a href="#丰富阅历" class="headerlink" title="丰富阅历"></a>丰富阅历</h3><ol>
<li>知识积累</li>
<li>经验积累</li>
<li>素养积累</li>
</ol>
<ul>
<li>掌握好必备的数学基础，掌握好一些基础的计算机核心课程，<strong>至于编程方面的技巧，我倒觉得不是需要做到特别厉害。如果能力有限的话，可以放低对操作系统，计算机结构这种比较偏底层的课程</strong>，<strong>人生要学会抓大放小，不要苛求自己样样精通</strong>，胶水语言Python的知识还是可以有很大的帮助。学好英语，至少打下阅读和听力的基础。</li>
<li>尝试尽早接触科研，进实验室。进实验室有两个明显的好处，一是深入了解，二是是否适合。</li>
<li>要有自己的“坚持”和“品味”，多读不同领域的书，比如社科类、经济类、人文类。<strong>因为数据科学的起点是以数据为基础，终点提取见解提供反馈</strong>。放低身段，多和别人交流。其实这一点有一点牵强</li>
</ul>
<p>独立思考的能力，和去伪存真的勇气。生活中并不存在绝对的浪费，只是因为当下社会弥漫的焦虑感让我们希望任何投资都能马上变现。很多知识点互相交织，当你慢慢可以连点成线时，就可以对曾经困扰自己的问题有更深一层次的领悟，也就是渐进式学习。</p>
<p><strong>如果现阶段某个知识点卡住了你</strong>，<strong>无论如何都跨不过去。你不如先放下，或许过一阵子法门就会在别的地方出现，你甚至会有更上一层的理解。但在那之前，你要学会“跳过”，也要记得“回来”</strong></p>
<p>所以眼界大一点，你暂时连不起来的点可能只是时候未到，而非是浪费，每个人都是一座矿，你采的越猛，枯竭的也就越快。</p>
<p>学习本身就是对自身训练的过程，我们接受那么多知识，留下的应该是学习方法，而非一个个枯燥的公式。你该学习如何高效采矿，而非大力开采。</p>
<p>教育最大的意义不是让你记住细节，而是教会我们面对新知如何快速分解、消化，并从中创新。这些都不是靠苦工（拼死）能解决的，<strong>你终究要建立自己的框架，而非储存内容</strong>。</p>
<p>一个合理的学习态度在我看来是这样的：<strong>致力于训练自己可以快速内化新知识，遇到跨不过去槛先放下，但要记得回来</strong>。既不必啥都想学，贪多嚼不烂，也不必实用主义当先，要求任何付出都要马上变现。学习这事需要、也必须放松一点。<strong>你即使是座金矿，也怕矿难不是</strong>？拿我自己来说，我花了好几年做各种和学习、工作毫无关联的事情，甚至刚毕业时选了一份和知识背景完全垂直的工作并干了三年。我一个工科生，每天被要求西装革履写ppt，此处拜访客户卖咨询产品，这算是一种浪费吗？</p>
<p>某个时间突然失去了购买的欲望。仔细一算，上次认真去购物应该已经是16年的事情了。可能还是因为这样的快乐太廉价，连快乐都算不上了。毕竟生活中还有那么多求而不得的事情，做不完的工作，写不完的代码，发不出的论文，得不到升职。对于我们不曾拥有过的东西，幻想总是最美好的。当你有能力获得，甚至不需要任何代价就可以得到某种资源时，就会失去了获得它的乐趣。</p>
<p>喜欢好看的人或者事物，但往往美丽下隐藏着的除了平庸，还有风险。因此从成事的角度来看，长相普通，智力较高，有很强性格与执行力的人可能有更大的优势</p>
<h2 id="机器学习包含哪些学习思想？"><a href="#机器学习包含哪些学习思想？" class="headerlink" title="机器学习包含哪些学习思想？"></a>机器学习包含哪些学习思想？</h2><p>不仅仅是机器学习，大部分理工科的思想都可以从文史学科的角度去理解。正所谓大道至简，很多道理是共通的</p>
<ul>
<li>教条主义的危害，优化模型的评估问题。</li>
<li>少即是多，“ 如无必要，勿增实体”。</li>
<li>三个臭皮匠的智慧：若一件事情不能证实，也不能证伪，就要存疑。个体学习的准确性和多样性本身就存在冲突，一般的，准确性很高后，要增加多样性就需牺牲准确性。事实上，如何产生并结合好而不同个体学习器，恰是集合学习的研究核心</li>
<li>不可知论，频率学派相信参数是客观存在的，虽然未知，但不会改变。而贝叶斯学派相信参数不是固定的，我们需要发生过的事情来推测参数。</li>
<li>妥协、矛盾与独立思考，算法思想的精髓是无处不在的妥协永远保持怀疑,当机器学习模型很轻松就达到很好的效果时，比如百分之百的正确率，你要警惕。</li>
<li>最小预测单元，避免追求通过一个模型预测多个目标。</li>
<li>数据比模型更重要，但数据不是越多越好。</li>
</ul>
<p><strong>保持独立思考的能力，不要别人说什么/书上说什么/论文里写什么，你就相信什么</strong>。毕竟在机器学习的世界里，我们每个人都是“民科”。</p>
<p>很多程序员只写代码，不写文档，不写案例，不做宣传。那么很自然的，你写的东西也就没人用。因此写好文档与示例非常重要的。<strong>我建议至少花和写代码一样长的时间写文档</strong>，其中主要有三个构件：</p>
<ul>
<li><strong>代码中的docstring</strong>。建议使用numpydoc的风格：<a href="https://link.zhihu.com/?target=https://numpydoc.readthedocs.io/en/latest/format.html">numpydoc docstring guide - numpydoc v0.9.dev0 Manual</a></li>
<li><strong>GitHub上的ReadMe文档</strong>。例子可以看<a href="https://link.zhihu.com/?target=https://gist.github.com/dupuy/1855764">https://gist.github.com/dupuy/1855764</a></li>
<li><strong>Read the Docs的API文档</strong>。使用指南看这里：<a href="https://link.zhihu.com/?target=https://readthedocs.org/">Home | Read the Docs</a></li>
</ul>
<p>ReadMe文档最好是用rST语言来写，因为Read the Docs的语言也是rST，统一语言可以减少大量的开发成本。rST的编写指南可以参考：<a href="https://link.zhihu.com/?target=https://thomas-cokelaer.info/tutorials/sphinx/rest_syntax.html">https://thomas-cokelaer.info/tutorials/sphinx/rest_syntax.html</a></p>
<ul>
<li>人类是视觉动物，一个好的图文实例远远好于干巴巴的长篇大论.</li>
<li>人类是懒惰的。因此建议早早采用PyPI和conda来分发你的工具库，这样使用者就可以轻松使用pip和conda来安装啦。</li>
</ul>
<h2 id="Sustainable-Development（可持续开发）"><a href="#Sustainable-Development（可持续开发）" class="headerlink" title="Sustainable Development（可持续开发）"></a>Sustainable Development（可持续开发）</h2><p>写好几个模型容易，但保证工具库是可持续和可扩展是很难的。假设维护5个模型很简单，那么维护200个呢？所以在开发工具时就要考虑到这一点，有几个点非常重要：</p>
<ul>
<li>首先是必须有单元测试（unit test），每个对应的模型如无例外都应有对应的测试，保证代码的覆盖度。</li>
<li>其次是善用集成测试工具（continuous integration），它们可以在多个平台与Python版本下自动运行你的单元测试。</li>
<li>相似的，维护代码的可读性和测试覆盖度（code coverage）也很重要，对应的工具有：</li>
<li>最后要写好开发指南（contribution guide）与如何反馈问题，如何参与开发，为其他感兴趣的人提供一个模板，如何反馈问题，一个标准issue report该有哪些部分，后续开发计划是什么？新模型的添加标准（inclusion criteria）是什么。</li>
<li>在这个阶段的重点是如何把一个项目做成真正的开源项目，一个持久的项目。到达这个阶段以后，项目本身已经比个人更加重要，我们必须为了可持续性而牺牲掉一些便携性。</li>
<li>When Possible, Optimize! （优化）。所以当你的工具库有了一定的规模后，建议多考虑重构和效率提升。</li>
</ul>
<h2 id="One-more-thing-，know-why-to-do-it（保持初心）"><a href="#One-more-thing-，know-why-to-do-it（保持初心）" class="headerlink" title="One more thing ，know why to do it（保持初心）"></a>One more thing ，know why to do it（保持初心）</h2><p>写工具库的最终目的是为了锻炼自己，回馈社区。如果一开始的目的就是要出名，做个大新闻，有大概率只会铩羽而归。我开发过特定领域的通用库，同时也和很多优秀的开源贡献者有过探讨交流，包括scikit-learn的核心作者Alexandre Gramfort。Gramfort带给我的最大震撼不是工程与学术能力超强，而是超乎常人的认真—在一篇工具库论文中他给我们写了满满4页的评语，甚至运行了我们大部分案例与测试，这种精神让人肃然起敬。</p>
<p>写库不必太在意成功是否，自己努力过坚持过就好，只有真正的热情才能让我们一直持续维护与更新。只有几个用户却一直不放弃的开发者。这可能才是开源的真正意义吧。</p>
<h2 id="大学学习计算机专业真的很差吗？"><a href="#大学学习计算机专业真的很差吗？" class="headerlink" title="大学学习计算机专业真的很差吗？"></a>大学学习计算机专业真的很差吗？</h2><ul>
<li>希望能成为一个独特的人，而不是别人希望成为的那种人。</li>
<li>做艺术要先有自己的思考，才会有自己的风格</li>
</ul>
<p>毕业以后想做什么。我说不知道，大概去读博吧。他难得地严肃起来，说：“建议你先读一个硕士，完整的接受一个研究训练，或者去工作几年，明白自己喜欢的方向是什么。如果你依然很喜欢现在的研究方向，实验室欢迎你回来。</p>
<p>随着年纪逐渐增长，愈发感到人生是你自己的，不要被舆论裹挟着前进。无论今天别人告诉你计算机完美、生物“优秀”，还是金融有钱赚，你都不能照单全收。你要在可能的情况下收集尽量多的信息，要有自己的判断。拿最简单的经济学原理举例**，一个行业门槛很低但利润很高，就会涌入了大量竞争者，从而使得利润回归到应有的水平上去。所以，如果想要在一个领域做出成绩，就一定要尽早学会收集信息、独立思考，并综合做出合理判断。即使是一个高中生，在综合互联网信息、周围学长学姐以及亲戚长辈的建议后，你应该可以做出一个对自己负责的决定。即使选择不算完美，只要掌握了这样思维方式，你可以不断的修正自己的目标，从而实现自己的想法。</p>
<p>开始接触到更真实的世界了。真实的世界有很多个维度，不再是单纯的做题考试升学。这里你可以有各种各样的选择，甚至选择多到把你淹没**。你会听到各种各样的建议，来自老师、学长学姐、家里的长辈，每个人似乎都说的对，每种未来都那么熠熠生辉。在无数种“光明”的未来中，你会怎么选择自己的路呢？</p>
<p>明白每个阶段自己的能力边界在哪里，勇敢放弃边界外的机会，并在边界中最大化自己的价值。迈入大学最大的冲击就是周围的选项与诱惑突然以爆炸的形式出现在你眼前，很多人要不会迷失于诱惑，或者迷失于如何选择。全都要[哈哈哈]</p>
<p>世间风景万千，唯有错过才会取得。</p>
<p>做一个算法工程师，代码能力，整合能力，学术基础，沟通能力每个都很重要，但都不是绝对的条件。谋而后动，多思考，少抱怨，方法总比困难多。</p>
<p>开放一个别人可以与我互动的渠道，人总要有一定的出现频率，才能形成圈子。</p>
<p>教育的本质，应该是让每个受教育者能过得更好一些。</p>
<p>参考文档（API Reference）对于使用API的重要性，而大部分参考文档其实是自动生成的。而我的第一份实习主要就是做一件事，修复自动文档生成中的error和warning。举个简单的例子，下面是一个简单的求两数之和的函数，并加上了字符串介绍函数的功能以及相关变量和返回值。API参考文档的意义是什么？</p>
<p>代码覆盖的重要性就是提高我们对于新代码的信息，让我们知道这些新的代码是有保证和重复测试的。</p>
<p>对着代码看了整整一上午都没看出问题，直到后来原来负责这个模块的工程师看过才发现了我们的代码少处理了一个特例（corner case），而单元测试也没有写逆向测试，所以无法通过软件的编译。<strong>那个时候我才知道，测试不仅要看是否按照预期运行，还要检测失败后应该是什么情况，并让它失败</strong>。</p>
<p>后来我就彻底告别了软件开发行业，也基本不用C++了，学了两天Python就开始一招走遍天下。我以为曾经给过我教训的这些软件工程知识估计用不上了，而编程经验对于我最大的帮助就是可以短时间上手Python。</p>
<p>去年在机缘巧合下开始参与了一些开源软件开发，也开发了一些自己的算法工具库。当时完全摸不着头脑，但从网上一搜如何做开源工具库，发现都是我很熟悉的概念：</p>
<ul>
<li>写好测试，并使用自动测试模块，关注代码覆盖率</li>
<li>写好参考文档，使用字符串和文档生成工具</li>
<li>注意版本控制，做好regression testing</li>
</ul>
<p>作为一个完全没做过开源的工具库的人，我只花了一周就完成了我的第一个算法工具包，文档、测试、代码覆盖一应俱全，也获得了一些小同行的关注。<strong>如果我不曾学习软件工程，那我肯定无法快速开发出可用的工具库，可能空有好点子却无法实现</strong>。</p>
<p>编程它就是个工具，它可以帮助你很快实现各种你看到的新点子<strong>。从这个角度来看，</strong>不管你是机器学习、优化以及其他方向，多学点编程肯定不吃亏。即使你最后没能做机器学习，这编程能力是你的谁也拿不走，还有广阔的就业市场。**</p>
<p>编程能力对于机器学习<strong>即使不是雪中送炭，也一定可以锦上添花</strong>。有大概率我们最终当不了科学家，而学好编程做个工程师是很好的替代选择。</p>
<p>现实一点看，少跟数学死磕，多花时间动手实现，拥有良好的编程能力，可以是就业的一道保障。找不到机器学习岗位，还可以去写JAVA去做手游嘛。</p>
<p>你可以选择跳槽，但工作也会筛选你。动机很重要，如果你的目标是赚个“快钱”，可能很快工作就会把你逼离这个岗位<strong>。</strong>因为初级的工作不仅没有高薪，还有很大的挫败感<strong>。你可能会觉得什么都不懂，什么都不做好，然后后悔自己要转行。</strong>而转行中最难得的，就是能感觉到“有意思”**。这不仅仅是鸡汤，你对一个领域的热情可以反映在写论文、玩博客、出书，也可以体现在主动揽活，业余时间自学。热情是骗不了人的。</p>
<p>我的天哪，做着自己喜欢的事情，还有钱拿。还有比这更爽的事情吗？</p>
<p>每个人都有转行的权利。但建议转的步子小一点，别一口吃成个胖子。这不仅仅是给自己一个余地，也是对公司负责。胡言乱语说了一堆，诸君就当个段子就好。</p>
<p>调整心理期待，明白网络是找乐子的地方。</p>
<p>笔记应该是“索引”，而不是摘要。索引是你自己的，摘要是作者的。作为一个普通人，想要记住所有的paper内容和精髓是不现实的。</p>
<h2 id="深度学习、机器学习的论坛"><a href="#深度学习、机器学习的论坛" class="headerlink" title="深度学习、机器学习的论坛"></a>深度学习、机器学习的论坛</h2><ul>
<li>Reddit的ml板块（<a href="https://link.zhihu.com/?target=https://www.reddit.com/r/MachineLearning/">Machine Learning • r/MachineLearning</a>），资讯为主</li>
<li>Reddit的ai板块（<a href="https://link.zhihu.com/?target=https://www.reddit.com/r/artificial/">Artificial Intelligence • r/artificial</a>）</li>
<li>Quora机器学习（<a href="https://link.zhihu.com/?target=https://www.quora.com/topic/Machine-Learning">Machine Learning</a>）</li>
<li>stack exchange统计版（<a href="https://link.zhihu.com/?target=https://stats.stackexchange.com/">Cross Validated</a> ），更多是统计相关</li>
<li>stack exchange数据科学版（<a href="https://link.zhihu.com/?target=https://datascience.stackexchange.com/">Data Science Stack Exchange</a>），帖子不多</li>
<li>stack overflow（偏向编程）。如果需要特别关注深度学习，就得加上标签搜索。</li>
<li>Reddit和Quora更偏向资讯交互，解决具体技术问题的讨论较少，偏方法论。后三个偏向解决具体问题，很多非常具体。Quora和stackexchange上不乏有大佬出没。</li>
</ul>
<p>躺平就完事了</p>
<p>我们大部分人这辈子就是混口饭吃，能够一步步计划并实施的人真的太少了，大部分时候就是头脑一热。这种冲动，尤其是是年轻时候的冲动是非常值得尊重的。科技迭代是一轮一轮的。如果你今天以较低的成本赶上了这一轮热潮，也一定要赶快补足深度，不然下轮死在沙滩上的就是你。</p>
<h2 id="数学作用"><a href="#数学作用" class="headerlink" title="数学作用"></a>数学作用</h2><p>规范表达，具体问题抽象为数学问题后，往往信息得到了压缩，仅仅是最重要的部分得以保留，这是非常适合信息交换与流通的。</p>
<ul>
<li>数据储存与安全</li>
<li>明白的数据的价值</li>
<li>Break the loop（打破循环）</li>
</ul>
<p>没有学历，没有技能，没有人脉，也没有财产，最终沦为底层。需要打破循环，但往往需要借助外力,当你感到困扰，需要突破时，不妨多多向外求助，比自我纠结效果会好很多。</p>
<h2 id="成功的开源项目"><a href="#成功的开源项目" class="headerlink" title="成功的开源项目"></a>成功的开源项目</h2><ul>
<li>核心代码群，且必须有合适的docstring和注释，用于生成文档。</li>
<li>配套的单元测试，以及自动测试（比如travis ci）和代码覆盖率（code coverage）</li>
<li>配套的文档以及例子，比如托管在readthedocs上，以及在binder上做一个jupyter notebooks。</li>
<li>封装并上传到pypi和conda上，方便大家下载更新。</li>
<li>写一个吸引人的README，使读者有兴趣使用你的工具。最好在Stack Overflow等网站上宣传。</li>
</ul>
<p>上面每一点都有无数的坑需要趟，绝不是想的那么容易。大部分所谓的开源工具连个介绍文档都没有，怎么可能吸引别人来用呢？更别提被人star了。<strong>很多人仅仅是做了第一点，只做了核心模型，但其他部分全部都是缺失的，那么这种“所谓的硬核”工具库其实真不如资源收集贴更有实际意义</strong>。</p>
<p>至少应该等同于开发时间精力在写文档和宣传上，这样才算是个合格开源工具。从这个角度看，资源repo获得更多star也不奇怪，因为它的阅读门槛低，内容是可自解释的（self-explanatory &amp; self-contained），所以读者没有阅读障碍。</p>
<p>其实退一步来看，开源项目的初衷是分享，被别人star/fork/watch是一种肯定，这没错。但也不必凡事都论成就大小，那就有点舍本逐末的意思了。</p>
<h2 id="找实习"><a href="#找实习" class="headerlink" title="找实习"></a>找实习</h2><ul>
<li>根据往届情况进行精准定位</li>
<li>调整心理预期，放宽搜索域</li>
<li>找到你的“闪光点</li>
<li>先进实验室，再去实习</li>
<li>大部分简历都活不过人事那一关，你有再强的技术也走不到面试官面前</li>
<li>埋首故纸堆不是错，但你要相信条条大路通罗马。</li>
<li>了解算法，但不死抠算法</li>
</ul>
<p>越往前走，我就越发现“磨练技术”和“培养软实力”并不矛盾，一个好的工程师或者科学家也需要“讲故事”和“混圈子”。说了这么多，只是想在一贯的技术分享以外，提供一些容易被我们这些书呆子忽略的事情。</p>
]]></content>
      <categories>
        <category>People that affect me</category>
      </categories>
      <tags>
        <tag>affect</tag>
        <tag>people</tag>
      </tags>
  </entry>
  <entry>
    <title>Random-Thoughts</title>
    <url>/2021/03/01/Random%20Thoughts/2021/2021-3/</url>
    <content><![CDATA[<p>计划长期记录，在这个拥有可以充分个人想法技术的时期，不做点什么，真是太说不过去了。</p>
<span id="more"></span>

<h2 id="头有点大呀……"><a href="#头有点大呀……" class="headerlink" title="头有点大呀……"></a>头有点大呀……</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2021-03-01</span><br></pre></td></tr></table></figure>

<p>可以在家再多呆一周，即有点高兴，也意味着最后一个学期，将步入hard模式。各个方面的压力随之而来。需要做的事情也非常之多，共勉之。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2021-03-10</span><br></pre></td></tr></table></figure>

<p>《快公司》科技/硅谷合集：科技带动创新-快公司编辑部</p>
<p>消费领域的数字革命已经成熟到可以入侵其他领域。并且程度比任何人想象的还要深。现在技术有了，问题是如何应用于工业领域。工业互联网对技术的要求比消费领域要严格得多。安全严格，持久性创建寿命极长的软件</p>
<p><strong>圣拉蒙实验室</strong>生活变得美好了些。”帮助资深员工了解社交媒体”，了解他们的思维方式、、消费模式，还有他们的潮流非常重要。</p>
<p>YogaGlo “说出内心真实的话。” “如果没有让你热爱的事情，你很难保持清醒。”</p>
<p>光有技术能力是不够的，事实胜于雄辩。”传统意义上认为专家就是在越来越少的领域里研究得越来越精得人，直到他们看似无所不知，却实际上什么都不知道，”“什么都知道一点得通才。”</p>
<p>谷歌处于一个历史性得新阶段，前无古人，后无来者。这家公司得财富不可估量，还拥有满坑满谷得人才，谷歌得影响力即将达到顶峰。它联合了网络、计算机和人工智能得力量，许多技术人员认为它开创了”第二次机器时代”</p>
<p>解放双手使用谷歌，无线网络带来十亿新用户，从头思考汽车到底是什么。</p>
<p>*<em>任何需要依靠材料科学来实现突破的谷歌X计划都无以为继。</em>电子领域就不会遇到这样的问题，因为摩尔定律，计算机技术一直呈现几何级增长，依靠短期内即可实现的计算机技术来解决电子问题。这也是为什么会相信谷歌眼镜会越来越完善。*但没有人可以预测新材料的诞生或新生产过程的问世。突破可能发生在明年，也有可能发生在100年后。手机永远都开着Wikipedia</p>
<p>“腾讯从来不做第一个吃螃蟹的人，却总能在成熟市场中找到空间，横插一杠子”</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2021-03-12</span><br></pre></td></tr></table></figure>

<p>信息之美</p>
<p>Info Graphics 地图，插图，数据分析</p>
<p>流行 网络 思想</p>
<p>自然 科学 健康</p>
<p>食物 权力 生命</p>
<p>影视 媒体 音乐</p>
<p>主要问题是程序设计的风格：具有说明性的名字、清晰的表达式、直截了当的控制流、刻度的代码和注释。以及在追求这些内容时一致地使用某些规则和惯用法地重要性。没有人会争辩说这些是不好的。</p>
<p>为了风格煞费苦心，书写良好的代码更容易阅读和理解，错误更少，这是为了后期查看可以少受点罪。不然代价是昂贵的，就如平时所写地东西一样，越是草率，不仅难看、难读、而且经常使人崩溃。</p>
<p><strong>好风格应该成为一种习惯。在开始写代码时就关系风格问题，如果你花时间去审视和改造它，你将会逐渐养成一种好的编程习惯，一旦这种习惯变成自动的东西，你的潜意识就会帮你照料许多细节问题，甚至你在工作压力下写出的代码也会更好。</strong></p>
<p>写出好的代码与书写好的英文有许多共同之处。(The Elements of Style, Allyn &amp; Bacon)仍然是关于如何写好英文的最好的简短的书。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2021-03-14</span><br></pre></td></tr></table></figure>

<p><strong>总而言之，只有熟悉了这个领域的工具和技术才能对特殊的问题提供正确解答，只有丰富的经验才能提供坚实的专业性结果</strong>——《特殊效果立体电影得到技术》</p>
<p>算法和数据结构是研究计算机科学的重要基石，一个好的算法或数据结构可能会将一个成年累月的问题在分秒之中得到解决。</p>
<p>特殊领域 图形学、数据库、语法分析、数值分析和模拟等等，解决问题的能力几乎完全依赖于最新的算法和数据结构。新领域开发程序，首先需要弄清这里已经有了些什么，以免无所谓的把时间浪费在别人早已做好的东西上。对于大部分程序员而言，所需要知道有哪些合适的、可用的算法和数据结构，知道如何在各种可以互相替代的东西之中做出选择。</p>
<p>实际上基本算法只有屈指可数的几个，他们几乎出现在每个程序中，可能已经被包含在程序库里，基本检索和排序。与此类似，几乎所有的数据结构都是从几个基本东西中产生出来的。对于每一个程序员来说，什么是基本功啊，</p>
<p>今天我买的SSD到了装机装了一下午，也算是终于升级电脑了，这下可总算可以再战三年了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2021-03-16</span><br></pre></td></tr></table></figure>

<p><strong>给我看你的流程图而藏起你的表，我将仍然是莫名其妙。如果给我你的表，那么我将不在要你的流程图，因为他们太明显了。</strong> ——《神秘的人月》</p>
<p>一旦数据结构安排好了，算法就像是瓜熟蒂落，编码也比较容易。组合，程序设计语言的选择在整个设计过程中，相对而言，并不是那么重要。抽象设计整个程序，用C，C++，Awk和Perl 把它写出来。由不同实现之间比较，并不重要的各种情况，程序的设计当然可以通过语言来装饰，但是通常不会为语言所左右。</p>
<p>基本形式非常典型：一些数据进去，另一些数据出来，处理过程并不依赖于多少独创性。所做的就是产生一些随机的可以读的英语文本。如果随便扔出来一些随机数字或是随机的词，结构当然是毫无意义的。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2021-03-18</span><br></pre></td></tr></table></figure>

<p>设计的真谛，就是在一些互相冲突的需求和约束条件之间寻找平衡点。如果要写的是一个自给自足的小程序，那么常常可以找到许多折衷方式，所作的特定选择将产生一些后果，遗留在系统里，其影响只限于写程序的个人，如果写出的代码是为了别人使用，这些选择决定就会产生更广泛的影响。</p>
<p>考虑问题：</p>
<ul>
<li>界面</li>
<li>信息隐藏n</li>
<li>资源管理</li>
<li>错误处理</li>
</ul>
<p>设计原则，无意识产生的结果可能非常随意</p>
<ol>
<li>逗号分隔的值CSV</li>
<li>一个原型库</li>
<li>为别人用的库</li>
<li>界面原则</li>
<li>资源管理</li>
<li>终止、重试或失败</li>
<li>用户界面</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2021-03-19</span><br></pre></td></tr></table></figure>

<p>bug 表示解决一个困难,</p>
<p>软件相互作用的可能途径真是数不胜数。排错时间和写程序一样多，努力从错误中学习，任何错误都能教导你如何防止类似错误再次发生，以及发生这种问题时及早识别它</p>
<ol>
<li><p>排错系统</p>
</li>
<li><p>好线索，简单错误</p>
</li>
</ol>
<p>大部分程序错误是非常简单的，很容易通过简单技术找出来。检查错误输出中的线索，设法推断它可能如何被产生。看看程序垮台前已经有了什么样的输出，如果可能的话，排错系统得到堆栈轨迹，排错是一种逆向推理，就像侦破一个杀人迷案。</p>
<ol>
<li><p>无线索，难办的错误</p>
</li>
<li><p>最后的手段</p>
</li>
<li><p>不可重现的错误</p>
</li>
<li><p>排错工具</p>
</li>
<li><p>其他人的程序错误</p>
</li>
<li><p>小结</p>
</li>
</ol>
<p>努力思考是最好的开始</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2021-03-20</span><br></pre></td></tr></table></figure>

<p>检查计算的每个步骤，如果发现错误</p>
<p>测试和排错常常被说成是一个阶段，实际上根本不是同一件事。简单地说，排错是在你已经知道程序有问题时要做的事情，而测试则是在你认为程序能工作的情况下，为设法打败他而进行的一整套确定的系统化试验。测试只是一个理想，目前只是为了发现程序错误，效率更高</p>
<ol>
<li>在编码过程中测试</li>
<li>系统化测试</li>
<li>测试自动化</li>
<li>测试台</li>
<li>应力测试</li>
<li>测试秘诀</li>
<li>谁来测试</li>
<li>测试马尔科夫程序</li>
</ol>
<p>优化的第一要义是不做。为大学课程作业而写的程序不会再去使用，对于大部分个人程序、偶尔用用的工具、测试框架、各种试验和原型程序而言，通常也没有速度问题。另一方面，商业产品或者其中的核心部件，例如图形库，性能非常关键，加速程序。</p>
<p>如果算法选择是明智的，程序也写得很仔细，那么你就可能发现完全没有进一步加速的必要性。写得很好的代码，很小的改变就能解决性能问题，设计拙劣的代码，需要大范围的重写。</p>
<ol>
<li><p>瓶颈</p>
</li>
<li><p>计时和轮廓</p>
</li>
<li><p>加速策略</p>
</li>
<li><p>代码调整</p>
</li>
<li><p>空间效率</p>
</li>
<li><p>估计</p>
</li>
<li><p>小结</p>
</li>
</ol>
<p>建立基准测试和问题</p>
<p>可移植性：应该设法写这样的软件，他能工作在他必须活动于其中的各种标准、界面和环境的交集里。</p>
<ol>
<li><p>语言 紧盯标准</p>
</li>
<li><p>头文件和库</p>
</li>
<li><p>程序组织</p>
</li>
<li><p>隔离</p>
</li>
<li><p>数据交换</p>
</li>
<li><p>字节序</p>
</li>
<li><p>可移植性和升级</p>
</li>
<li><p>国际化</p>
<blockquote>
<p>　　生活在美国的人很容易忘记英语并不是唯一的语言，ASCII不是唯一的字符集，￥也不是仅有的钱币符号，写日期可以把日子写在前面，时间可以采用24小时的钟点，如此等等。跨越语言和文化边界时的可移植性问题</p>
</blockquote>
</li>
<li><p>小结</p>
<blockquote>
<p>可移植代码是一个非常值得去追求的理想，</p>
</blockquote>
</li>
</ol>
<p>在人的所有造物中，语言或许是最奇妙的东西了。——《词和诗》</p>
<ol>
<li>数据格式</li>
<li>正则表达式</li>
<li>可编程工具</li>
<li>解释器、编译器和虚拟机</li>
<li>写程序的程序</li>
<li>用宏生成代码</li>
<li>运行中编译</li>
</ol>
<p>VMware Workstation 15 Pro 永久激活密钥：<br>YG5H2-ANZ0H-M8ERY-TXZZZ-YKRV8</p>
<p>UG5J2-0ME12-M89WY-NPWXX-WQH88</p>
<p>UA5DR-2ZD4H-089FY-6YQ5T-YPRX6</p>
<p>GA590-86Y05-4806Y-X4PEE-ZV8E0</p>
<p>ZF582-0NW5N-H8D2P-0XZEE-Z22VA</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2021-03-21</span><br></pre></td></tr></table></figure>

<p>Google cloud platform学习文档</p>
<p>尝试编写技术文档</p>
<p>Java学习，基本上就是测试，Google GitHub 等等。<a href="http://underpop.online.fr/j/java/help/test-driving-a-java-application-introduction-to-computers-the-internet-and-the-world-wide-web.html.gz">Test-Driving a Java Application</a>大概了解了一些，然后就是<a href="https://en.wikipedia.org/wiki/Test-driven_development">Test-driven development</a>中看到</p>
<p><a href="http://www.agiledata.org/essays/tdd.html">Introduction to Test Driven Development (TDD)</a></p>
<p>啊自由的畅游在软件代码的世界，真的很美好。这是最好时代，这是最坏的时代，愿每一个人都能找到自己所热爱的事情。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2021-03-22</span><br></pre></td></tr></table></figure>

<p><a href="https://www.jianshu.com/p/57f7dad37a21">Github仓库master分支到main分支迁移指南</a></p>
<p><a href="https://www.jianshu.com/p/8814ce1da7a4">使用git分支保存hexo博客源码到github</a></p>
<h2 id="心情复杂"><a href="#心情复杂" class="headerlink" title="心情复杂"></a>心情复杂</h2><p>今天我的个人网站(博客)上线了，那一刻真的是非常激动，快乐呀！明天要面试了，预祝成功，English在网络中的用处越来越重要了，接下啦就是继续来编写文档了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2021-03-23</span><br></pre></td></tr></table></figure>

<p><a href="https://www.lance.moe/post-344.html">WSL2 和 VMWare 不兼容的解决方案</a>虚拟机的使用</p>
<p><a href="https://itojisan.xyz/trouble/20480/">重大なエラー「Kernel-Power 41」の原因と対処法 – Windows10</a></p>
<h2 id="规划之道"><a href="#规划之道" class="headerlink" title="规划之道"></a>规划之道</h2><p>确实大开眼界，技术绝对不是全部内容，更重要的是我们需要动力，燃烧不停的动力，我们从不挑战自己，记录下我想要学习的技巧。大佬就是做自己喜欢的事情并长期做下去了。分析恐慌最终消失。</p>
<p>做出成功的原创，失败和抄写可能是最佳途径。</p>
<p>不管是什么目的，隐藏你的能力都是非常愚蠢的事情，如果一个人完成了一件非常漂亮的工作，却没有人知道，那在这个经理的眼中，这事情就等同于从未发生过。这听起来有些残酷，但从公司的角度来看，这是有道理的。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2021-03-24</span><br></pre></td></tr></table></figure>

<p>人们会通过你的写作能力对你做出初步评价，也可以依次深刻理解你的思维活动。如果你无法用自己的母语清楚地表达出自己的想法，让别人明白，又怎么可能用编程语言来清楚的表达出来呢？组织观点，带领读者思考并最终做出合乎逻辑的推断这种能力与创作出清晰的设计和系统实施，并让功能维护者理解的能力是一样的。</p>
<p>写作能力不仅仅是判断的依据。如果你的团队成员和你处在不同的时区内，那么写作可能就是你汇报工作进度的唯一方法，比如你是如何设计某种东西或者你的团队成员需要做的工作是什么。</p>
<p>需要沟通，特别是以文字方式进行沟通，是你所有绝妙的想法必须要通过的瓶颈。你自己就是你要解释的内容。</p>
<p>开发日记，记录做了什么工作，解释设计决定，检查棘手的技术和专业决策。我是自己写作的唯一读者，写作质量要好一点。可以清楚地表达想法。回头阅读之前的日记，评论。通过之前的喜好，来调整你的新纪录。这样做，不仅可以提高你的写作能力，还可以加强你对说做决定的理解，当需要知道如何或者为什么之前要做某事的时候，就可以在日记里找到答案了。</p>
<p>还有一点挺重要，学习打字，在习惯了输入技巧之后，在写作的时候就会更舒服和自然了。如果打字速度快，在写作的时候也会节省很多时间。</p>
<p>知行合一，热爱工作，享受生活</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2021-03-25</span><br></pre></td></tr></table></figure>

<ul>
<li>练习使用git</li>
<li>C++练习</li>
<li>Qwerty-Learner 一小时</li>
<li>整理记录</li>
<li>Unity3D练手</li>
<li>练习文档格式</li>
</ul>
<p>python 虚拟环境</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 -m venv tutorial-env</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2021-03-26</span><br></pre></td></tr></table></figure>

<ul>
<li>面试</li>
<li>Qwerty Learner 打字练习</li>
<li>午休</li>
<li>开始研究项目功能</li>
<li>C++练习</li>
<li>Unity3D 开发</li>
</ul>
<p>README是最重要的内容，他快速地介绍了这个项目，并决定了它能不能吸引用户：</p>
<ul>
<li>这个项目做什么？</li>
<li>它解决了什么问题</li>
<li>他有什么特性</li>
<li>hello，world 示例</li>
</ul>
<h2 id="这个项目做什么——一句话文案"><a href="#这个项目做什么——一句话文案" class="headerlink" title="这个项目做什么——一句话文案"></a>这个项目做什么——一句话文案</h2><p>一句话，必须简单明了地介绍，它是干什么的。</p>
<p>Angular：One framework,Mobile &amp; desktop.</p>
<p>React: A declarative,efficient,and fiexible JavaScript library for building user interfaces.</p>
<p>Vue: A progressive,incrementally-adoptable JavaScript framework for building UI on the web.</p>
<h2 id="他解决了什么问题"><a href="#他解决了什么问题" class="headerlink" title="他解决了什么问题"></a>他解决了什么问题</h2><p>一句话描述，不能很好地说明，它能解决什么问题。</p>
<h2 id="它有什么特性"><a href="#它有什么特性" class="headerlink" title="它有什么特性"></a>它有什么特性</h2><p>多个不同框架时，需要对比他们的特性</p>
<h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><p>需要简化步骤，如果过于复杂的安装步骤可能会劝退</p>
<h2 id="技术文档"><a href="#技术文档" class="headerlink" title="技术文档"></a>技术文档</h2><p>对于一个复杂的开源项目来说，文档上需要写明安装、编译、配置等等过程。</p>
<p>写不少代码用的都是框架，最后不知道收获什么了，当自己做了一些项目后，发现最后什么也没有收获到。于是，就想着做一个框架。</p>
<h2 id="需求呀"><a href="#需求呀" class="headerlink" title="需求呀"></a>需求呀</h2><p>一个库，可能只需要使用20%的代码</p>
<h2 id="阅读开源软件代码"><a href="#阅读开源软件代码" class="headerlink" title="阅读开源软件代码"></a>阅读开源软件代码</h2><p>查看项目的release列表，找一个看得懂的版本，去读懂，最好可以自己造轮子实现一遍。</p>
<h2 id="编程的基础能力"><a href="#编程的基础能力" class="headerlink" title="编程的基础能力"></a>编程的基础能力</h2><p>算法很重要，但编码才是基础能力，想出能work的代码一件简单的事，学会对其重构，使之变得更易读就是一件有意义的事。</p>
<p>可读性高的代码，写好测试挺难的，</p>
<h2 id="编码的过程"><a href="#编码的过程" class="headerlink" title="编码的过程"></a>编码的过程</h2><ol>
<li>有一个可衡量、可实现、过程可测的目标</li>
<li>Tasking（即对要实现的目标过程进行分解）</li>
<li>一步步实现（如TDD）</li>
<li>实现目标</li>
</ol>
<p>享受创造的过程，使用不同框架，并且让他们能工作，不断地Re-Practise。</p>
<p>技术的提高可以在后期解决收入的问题，而不需要靠加班来解决这个问题，人总是要活着的，钱是必需的，但是程序员收入都不低。</p>
<p>情绪是有周期起伏的，可以在一些时间造一些轮子、创建文档。</p>
<h2 id="有意图的练习"><a href="#有意图的练习" class="headerlink" title="有意图的练习"></a>有意图的练习</h2><p>编程的提高需要很长的学习时间，也需要很长的练习时间，每个程序员或多或少在突破上一个门槛需要花费不等的时间呀，当然重要的原因是没有找对一个合适的方向，在这期间也没有好好练习，需要有意识的练习。</p>
<p>花两年时间去提高这方面的能力呢？</p>
<p>想做的事情，已经有人走过了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2021-03-27</span><br></pre></td></tr></table></figure>

<ul>
<li>c++练习</li>
<li>Microsoft 文档学习</li>
<li>Linux 学习</li>
<li>Google cloud 学习</li>
<li>unity3D</li>
</ul>
<p>临时更改，目标调控一体智能防误操作系统</p>
<p>啊学习压力好大呀，今天阅读了一个完成的项目文档，我的天哪，瞬间就低谷了，人生太难了，没什么可说的，肝干就完事了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2021-03-28</span><br></pre></td></tr></table></figure>

<p>求职意向不是特别大，大概就是三种层次。</p>
<p>第一种找了一份不喜欢的工作，边做边提高自己到自己所想到达的境界。</p>
<p>第二种找了一份没感觉的工作，边做边去提高自己。</p>
<p>第三种找到一份充满热情的工作，去努力的提升自己。</p>
<p>想去写东西，喜欢敲代码的感觉，享受写文档的提升，沉浸于书中的世界。</p>
<p>What are you want to be?</p>
<p>To learn Head First Programming,</p>
<ul>
<li><p>Load important coding concepts straight into your brain.</p>
</li>
<li><p>A learner’s guide to programming,using teh Python language.</p>
</li>
<li><p>Add methods, functions and objects to your toolbox</p>
</li>
<li><p>Process your data like a pro</p>
</li>
<li><p>Build a functional and attractive graphical application</p>
</li>
<li><p>Learn how to automate repetitive tasks</p>
</li>
<li><p>Avoid embarrassing mishaps with input/output.</p>
</li>
</ul>
<p>“Head First Programming does a great job teaching programming using an interative process, Add a little, explain a little ,make the program a little better. This is how programming works in the real world and head First Programming amkes use of taht in a teaching forum. I recommend this book to anyone who want to satrt dabbling in programming but doesn’t know where to start, I’d also recommend this book to anyone not nececssarily</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2021-03-29</span><br></pre></td></tr></table></figure>

<p>摸鱼插件 qwerty-learner</p>
<p><a href="https://www.britannica.com/biography/Hippocrates">希波克拉底誓言</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2021-03-30</span><br></pre></td></tr></table></figure>

<p>整理往期的内容。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">date: 2021-03-31</span><br></pre></td></tr></table></figure>

<p>改变可能只需要一个念头就够了。</p>
<p>不可思议我竟然做到了。</p>
<ul>
<li><a href="BAMagazine.com">《B&amp;A 设计杂志》</a></li>
<li><a href="Canva.com">Canva</a></li>
<li><a href="InDesignMag.com">InDesign</a></li>
</ul>
<p>mcwade.com/TheGrid</p>
<p>CreativeMarket.com</p>
<p>MyFonts.com</p>
<p>Font Squirrel.com</p>
<p>CreateSpace.com</p>
<p>CafePress.com</p>
<p>PrintPlace.com</p>
]]></content>
      <categories>
        <category>Random Thoughts</category>
        <category>2021</category>
      </categories>
      <tags>
        <tag>Essay</tag>
      </tags>
  </entry>
  <entry>
    <title>g9</title>
    <url>/2019/01/21/People%20that%20affect%20me/g9/</url>
    <content><![CDATA[<p>内容相当丰富，这或许是最想要成为的模样。</p>
<span id="more"></span>

<h2 id="图书"><a href="#图书" class="headerlink" title="图书"></a>图书</h2><p>上学最宝贵的收获之一是结交学识过人的朋友。自己闷头学得山穷水尽时，高手轻轻一句点拨，眼前便峰回路转，柳暗花明。每次上完课，有幸和朋友小聚，请教弱智问题，听朋友妙语解惑，实在是难得的人生乐事。读The Little Schemer，也有同样的感受。读The Little Schemer的过程，就是被良师引导的过程。</p>
<p>作者的话说，The Little Schemer是一本教人理解计算本质的书。编程语言Scheme不过是传道的载体。书的体例独特。每页分成两列。每列寥寥几行代码，数段散句。左边一列问个问题。右边一列给出答案。作者就用这种轻松对话的形式讲解递归和函数编程。</p>
<p>序言的话说，The Little Schemer展示了列表是Lisp编程的心脏，而The Seasoned Schemer展示了函数是Lisp编程的灵魂。</p>
<p>Knuth在《Mathematical Writing》里强调的“为普通人而写，你的作品专家能看懂；为专家而写，你的书没人看懂”的箴言还不够深入人心。</p>
<h2 id="做题的境界"><a href="#做题的境界" class="headerlink" title="做题的境界"></a>做题的境界</h2><p>把习题当成项目来做。十年寒窗。半世煎熬。习题做完，世界随之改变。例子：<a href="http://www.cis.upenn.edu/~wilf/AeqB.html">A = B</a>这本200来页的书（免费下载。作者是好心银啊），解决了《<a href="http://www-cs-faculty.stanford.edu/~knuth/taocp.html">编程的艺术</a>》上一道难度系数为50的习题：自动化多维几何级数的求和。如果有封闭解，则自动找到该解。不然自动证明无解。这好比20年前Wolfman的Mathematica搞定自动积分，号称机器不能积的，人肉也不用想。又好比优化编译器生成人肉编译器们望尘莫及的全局优化代码。众多老大多年积累引为自豪的技巧转眼成为自娱自乐的玩具，价值可比1949年太祖登位前的法币。技巧贬值事小，附着于技巧上的汗水，骄傲，地位，以及掌控未来的安全感也烟消云散恐怕更有杀伤力。所以愤怒和抵制情绪就象巴普洛夫狗的唾液一样自然分泌。一将功成万骨枯。世界就这么残酷。工业革命萌芽时疯狂打砸自动纺织机器的英国纺织工人们想必早有体会。历史上喜剧也总在重演。我们至少已经看过机器语言高手们对汇编的鄙视，汇编语言高手们对C的不屑，C语言高手们对使用垃圾收集器的愤怒。靠，又扯远了。还是说回这本书。</p>
<p>关于科学和艺术的铿锵引言就是从这里来的：Science is what we understand well enough to explain to a computer. Art is everything else we do…. Science advances whenever an Art becomes a Science. And the state of the Art advances too, because people always leap into new territory once they have understood more about the old.</p>
<p><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/g9yuayon/66356358d9054b4fb5f5416e51ac7525.png" alt="img"></p>
<p><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/g9yuayon/0878a9a309df4071b58ad97828ec9b79.png" alt="img"></p>
<h2 id="一本书和阅读代码"><a href="#一本书和阅读代码" class="headerlink" title="一本书和阅读代码"></a>一本书和阅读代码</h2><p>很难想象钢琴家不用聆听大师的作品；诗人不用揣摩传世的经典；画家不用体会前辈的佳作；拳手不用参详高人的示范。那我们怎么能想象程序员不用仔细学习性感的代码？</p>
<p>IBM的<a href="http://en.wikipedia.org/wiki/Grady_Booch">Grady Booch</a>也强力推荐程序员大量阅读代码，认为这是从新手到高手的必要手段。如果喜欢软件开发老大还没有订阅<a href="http://www.booch.com/architecture/blog.jsp">Grady Booch的博客</a>的话，现在是时候了。G老大的私人项目<a href="http://www.booch.com/architecture/handbook.jsp">Architecture Handbook</a>想必更是每位对软件架构有兴趣的老大的必读材料吧？他在这本公开的手册将归类整理历史上各式架构。虽然这些工作开始还不到四年，但上面已经有不少高质量的资料。比如以前提到过的<a href="http://www.booch.com/architecture/blog/artifacts/Software">Eclipse架构考古</a> Archeology.ppt)。也许用G老大自己的话最能雄辩地道出软件考古的意义：经典科学通过在定量观察和理论构建间曼舞取得进展。前者细致而刻意，后者富于创新且能经受检验。计算机科学充满了经验的观察和理论的构造，但软件世界里，我们往往把所有时间用于搭建实物，却疏于科学研究。我们有自己关于流程和工具的理论，但它们大部分都基于坊间传闻和个人经验，而不是基于反映了可靠经验研究的确凿且中立的数据（classical science advances via the dance between quantitative observation and theoretical construction.” The former is deliberate and intentional; the latter is creative and testable. Computer science is full of empirical observation and the construction of theories, but in the world of software we often spend all of time building artifacts and not enough time doing science. We have our share of theories, about process and tools, but much of that work is based on anecdote and personal experience, not the hard, dispassionate data that reflects good empirical work）</p>
<p>计算机系不仅要交给学生知识，也要让学生领会“激情，美丽，快乐，和敬畏”，真是深得我心啊。在演讲里，G老大频繁用“正确和高尚”来描述计算机业界众人的努力，说从事软硬件研发的工作既是特权也是义务。它是特权，因为我们从根本上多方面深刻地改变这个世界。基于同样的原因，这也是我们的义务。我们应当牢记这点，并让我们的学生同样明白。不知道G老大和蜘蛛人有什么瓜葛。</p>
<h2 id="计算机科学经典论文"><a href="#计算机科学经典论文" class="headerlink" title="计算机科学经典论文"></a>计算机科学经典论文</h2><p>Jao的<a href="http://jaortega.wordpress.com/">Programming Musing</a> 看到的：Babar Kazar 整理了<a href="http://www.zafar.se/bkz/Articles/ClassicCompScienceTexts">一堆经典论文</a>。Jao强烈建议每个严肃的程序员读每篇论文，说它们都或多或少有意思。粗粗扫了一下，很多论文都没读过。挑了些俺多少知道一点的介绍。</p>
<ul>
<li>[An axiomatic basis for computer programming](<a href="http://www.spatial.maine.edu/~worboys/processes/hoare">http://www.spatial.maine.edu/~worboys/processes/hoare</a> axiomatic.pdf) C. A. R. Hoare<br>Tony Hoare名下的公理化语义（Axiomatic Semantics）。</li>
<li><a href="http://www.usingcsp.com/">Communicating Sequential Processes (CSP)</a> C. A. R. Hoare<br>Hoare, 又见Hoare。</li>
<li><a href="http://homepages.inf.ed.ac.uk/gdp/publications/cbn_cbv_lambda.pdf">Call-by-name, call-by-value, and the lambda calculus</a> Gordon Plotkin</li>
<li><a href="ftp://ftp.cs.cmu.edu/user/jcr/theotypestr.pdf">Towards a theory of type structure</a> John C. Reynolds号称经典中的经典。</li>
<li><a href="http://pplab.snu.ac.kr/courses/adv_pl05/papers/p261-knuth.pdf">Structured Programming with go to Statements</a> Donald E. Knuth</li>
<li><a href="ftp://ftp.cs.cmu.edu/user/jcr/defint.ps.gz">Definitional interpreters for higher-order programming languages</a> John C. Reynolds</li>
<li><a href="http://www.slac.stanford.edu/pubs/slacreports/slac-r-114.html">An APL Machine 1970</a> Philip S. Abrams</li>
<li><a href="http://www-db.stanford.edu/pub/papers/google.pdf">The Anatomy of a Large-Scale Hypertextual Web Search Engine</a> Sergey Brin and Lawrence Page</li>
<li><a href="http://www-inst.eecs.berkeley.edu/~maratb/readings/NoSilverBullet.html">No Silver Bullet: Essence and Accidents of Software Engineering</a> Frederic P. Brooks, Jr.</li>
<li><a href="http://www.unil.ch/webdav/site/ling/shared/ElementStatText/Shannon1948.pdf">A Mathematical Theory of Communication</a> Claude Shannon</li>
<li><a href="http://www.cs.ubc.ca/~murphyk/Bayes/Charniak_91.pdf">Bayesian Networks without Tears</a><br><a href="http://www.stanford.edu/class/ee398a/resources/ziv:77-SDC.pdf">A Universal Algorithm for Sequential Data Compression</a></li>
<li><a href="http://www.cs.duke.edu/~junyang/cps216/papers/codd-1970.pdf">A Relational Model of Data for Large Shared Data Banks 1970</a> Edgar F. Codd</li>
<li><a href="http://compilers.iecc.com/crenshaw/">Let’s Build a Compiler 1988-1995</a></li>
<li><a href="http://gnowledge.sourceforge.net/damashek-ngrams.pdf">Gauging Similarity via N-Grams: Language-Independent Sorting…</a> Marc Damashek</li>
<li><a href="http://www.dreamsongs.com/WorseIsBetter.html">Worse Is Better</a> Richard P. Gabriel</li>
<li><a href="http://www.cs.berkeley.edu/~necula/cs263/handouts/hoarehints.pdf">Hints on Programming Language Design</a> C.A.R. Hoare</li>
<li><a href="http://www.math.chalmers.se/~rjmh/Papers/whyfp.pdf">Why Functional Programming Matters</a> John Hughes</li>
<li><a href="http://www.ccs.neu.edu/scheme/pubs/scp91-felleisen.ps.gz">On the Expressive Power of Programming Languages</a> Matthias Felleisen</li>
<li><a href="http://www.metaobject.com/papers/Smallhistory.pdf">The Early History Of Smalltalk</a> Alan Kay</li>
</ul>
<p>Alan Kay评述Smalltalk的话：In computer terms, Smalltalk is a recursion on the notion of computer itself. Instead of dividing “computer stuff” into things each less strong than the whole–like data structures, procedures, and functions which are the usual paraphernalia of programming languages–each Smalltalk object is a recursion on the entire possibilities of the computer. Thus its semantics are a bit like having thousands and thousands of computer all hooked together by a very fast network. Questions of concrete representation can thus be postponed almost indefinitely because we are mainly concerned that the computers behave appropriately, and are interested in particular strategies only if the results are off or come back too slowly.</p>
<ul>
<li><a href="http://fresh.homeunix.net/~luke/misc/knuth-turingaward.pdf">Computer Programming as an Art</a> Donald E. Knuth</li>
<li><a href="http://www.cs.utah.edu/~wilson/compilers/old/papers/p157-landin.pdf">The next 700 programming languages</a> Peter J. Landin</li>
<li><a href="http://www-formal.stanford.edu/jmc/recursive.html">Recursive Functions of Symbolic Expressions and their Computation by Machine (Part I) 1960</a> John McCarthy</li>
<li><a href="http://www.cs.wisc.edu/~bolo/shipyard/4th_1970/4th_1970.html">FORTH - A Language for Interactive Computing</a> Charles H.Moore</li>
<li><a href="http://www.norvig.com/21-days.html">Teach Yourself Programming in Ten Years 2001</a> Peter Norvig</li>
<li><a href="ftp://publications.ai.mit.edu/ai-publications/500-999/AITR-595.ps">The Definition and Implementation of a Computer Language based on constraints</a> Guy Lewis Steele Jr.</li>
<li><a href="http://www.cs.umbc.edu/331/resources/papers/gls-grow-lang.pdf">Growing a Language</a> Guy Lewis Steele Jr.</li>
<li><a href="http://www-pu.informatik.uni-tuebingen.de/users/klaeren/epigrams.html">Epigrams on Programming</a> Alan J. Perlis</li>
<li><a href="http://www.cs.helsinki.fi/u/gionis/cc05/cook.pdf">The Complexity of Theorem Proving Procedures</a> Stephen A. Cook</li>
<li><a href="http://web.media.mit.edu/~minsky/papers/steps.html">Steps Toward Artificial Intelligence</a> Marvin Minsky</li>
<li><a href="http://library.readscheme.org/page1.html">The Original ‘Lambda Papers’</a> Guy Steele and Gerald Sussman</li>
<li><a href="http://cm.bell-labs.com/cm/cs/who/dmr/cacm.html">The UNIX Time-Sharing System</a> Dennis Ritchie and Ken Thompson</li>
</ul>
<h2 id="Dreaming-In-Code-by-Scott-Rosenberg"><a href="#Dreaming-In-Code-by-Scott-Rosenberg" class="headerlink" title="Dreaming In Code by Scott Rosenberg"></a>Dreaming In Code by Scott Rosenberg</h2><p>作者把Chandler的开发历程，软件开发的历史，和软件开发的基础概念精巧地编织起来，只为探索一个问题：为什么软件开发那么困难？</p>
<ul>
<li>文字方面，作为多年文青，资深记者，<a href="http://www.salon.com/">Salon</a>的主编，Scott Rosenberg的笔头没得说。三年漫长写作和Chandler项目的艰辛曲折并没有消磨Scott的激情。相反，书中文字蕴涵着他对软件开发的热爱，很有感染力。书里涉及大量技术概念，从OOP到Literate Programming到停机问题，作者都科普得浅显明白。看局外人怎么理解软件开发，也是颇有意思的事情。</li>
<li>其次是资料翔实。光靠Wikipedia和Google随意搜寻是绝对写不出这样一本书的。大量的采访，连续三年实地跟踪Chandler项目组开会讨论，几百篇参考资料，包括大量经典论文和访谈录，和作者细心的整理，方才构成这本书丰厚的肌理。</li>
<li>三当然就是八卦满天飞了，尤其是著名项目和大牛们的故事及观点。呵呵。非常符合俺这种八卦爱好者的口味。虽然绝大部分八卦俺都知道，但放在软件开发这个大题目下系统读一次感觉还是不同。Alan Kay, Don Knuth, Alan Turning, Charles Simoni, Bill Joy, Frederick P. Brooks, David Parnas, Peter Drucker, Gerald Winberg, Douglas Engelbart等等等等。颇有新的领悟外，也是享受。书里也有一些俺从未听说的八卦。比如这条：一位叫Robert Britcher的程序员写了本回忆录，The Limits of Software，记录了美国航空管理局(FAA)1981年上马的AAS（Advanced Automation System）项目的悲惨过程。用Scott的话说，就是“没有人—哪怕作者—可以全身而退（No one—including, plainly, the author—escape scar free）。项目高峰期，1500名IBM程序员为FAA工作，每天花掉政府100万美元。项目最终失败了，因为项目的要求超出了当时技术和人力的极限。巨大的压力给参与项目的程序员带来心理上的严重创伤。有人砸烂自己的汽车。有人疯掉（我靠！），有人自杀。有个项目经理开始吃纸上瘾。项目拖后得越多，他在开会时嘴里的塞的纸就越多（靠靠靠！）。当初我读<a href="http://www.hevanet.com/chezxx/chezxx/ellen.html">Ellen Ullman</a>的小说The Bug的时候还对文中主角在地下室自杀有点不解。看来那也不是女文青Ellen自己的想当然。</li>
<li>书里记述了OASF(开发Chandler的组织)犯下的大量错误。这些案例值得我们学习。我觉得比较出奇的是Chandler项目成员开始决定用P2P架构这种来共享日历。虽然用P2P共享个人信息时非常困难的问题，但他们居然不全力设计相关算法或协议，而是花大量时间去讨论Chandler的界面。这一拖就是几个月。最后P2P架构被彻底放弃。<a href="http://blog.csdn.net/g9yuayon/archive/2005/01/13/251123.aspx">Damien</a>以一人之力搞出了基于文档的分布式数据库。不知道如果OASF找到Damien，情况会不会有所改观。Joel Spolsky已经写了篇关于OASF错误的<a href="http://www.joelonsoftware.com/items/2007/01/21.html">详尽评论</a>。强烈推荐。我就不饶舌了。</li>
<li>书的背面有若干书评。第一条是<a href="http://www.theatlantic.com/index/fiction">The Atlantic</a>的James Fallows写的，说Dreaming In Code可以和Tracy Kidder的《新机器的灵魂》（The Soul of a New Machine）媲美。Tracy Kidder的书是一代经典，写尽工程师的光荣与梦想。《新机器的灵魂》里电脑工程师为了做出新一代电脑同DEC的VAX竞争，破釜沉舟，灵魂冲突激荡。历经曲折后，项目终于成功。一时间彷佛东方有日出，喷薄欲破晓，好不酣畅淋漓。可惜，这种痛快的阅读感受在Dreaming In Code里体会不到。我想原因有二。一是Chandler是个失败（至少前途还不明朗）的项目。5年过去，几百万花掉，Chandler才到0.7版。当年的设计被一次又一次的更改。当年Mitche Kapor心目中的杀手特性被一个又一个地去掉。看到书的后半部分，俺甚至觉得有些郁闷。正因为这样，Dreaming In Code缺乏戏剧性。我们看不到有独特魅力的灵魂人物，比如《新》书里的Tom West，比如Show Stopper里的Dave Cutler。二是作者把Chandler的项目当作讨论软件开发为什么那么难的案例来写。这样做人物形象就显得比较单薄。书里很少描写Chandler项目组里的成员的心理和行为。我甚至不记得里面有谁曾经意气风发过。问题是，谁没有在设计自己心爱的软件时浑然忘我，神情激越过？这点更远远比不上《新》和Show Stopper。这两本书里的工程师有非常突出的个性。Dreaming In Code里看不到像Show Stopper里微软的愤青们鄙视IBM，决定中止同IBM OS/2团队合作的戏剧性场面的，看不到Jim Alchin早上五点钟跑到高尔夫球场与同事开会的疯狂场景，也看不到两个微软工程师决定到加勒比海边设计Windows NT的API，把他们的经理气得发疯，结果两人一周就搞定了1000多个API的初稿这样的传奇故事。甚至Mitch Kapor在Dreaming In Code里也像个好好先生。</li>
</ul>
<h2 id="阅读计划"><a href="#阅读计划" class="headerlink" title="阅读计划"></a>阅读计划</h2><p>看是永远都看不完的，等什么时候看完也就熄了。</p>
<h3 id="编程和编程语言"><a href="#编程和编程语言" class="headerlink" title="编程和编程语言"></a>编程和编程语言</h3><p><a href="http://www.amazon.com/gp/product/0596527756/ref=wl_it_dp/103-2894649-9471814?ie=UTF8&coliid=I353IT2HV9IEAF&colid=2ABJRW1CNHP5W"><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/g9yuayon/730203c200c34dbca38b9eafe745fce4.png" alt="img"></a>: <a href="http://www.amazon.com/gp/product/0596527756/ref=wl_it_dp/103-2894649-9471814?ie=UTF8&coliid=I353IT2HV9IEAF&colid=2ABJRW1CNHP5W">Java Generics and Collections</a>。俺的偶像之一，<a href="http://www.haskell.org/">Haskell</a>背后的主要黑手，<a href="http://homepages.inf.ed.ac.uk/wadler/">Philip Wadler</a>的新作。俺这种庸俗追星族自然屁颠屁颠地来捧场了。</p>
<p><a href="http://www.amazon.com/gp/product/0596527756/ref=wl_it_dp/103-2894649-9471814?ie=UTF8&coliid=I353IT2HV9IEAF&colid=2ABJRW1CNHP5W"><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/g9yuayon/6b5174a9722249b08b2ee2674f9b67f3.jpg" alt="img">: Java Concurrency in Practice</a>. 正在读这本书。Java 5 里java.util.concurrent主要作者的力作，不仅介绍java.util.concurrent的用法，更细述设计并发程序的理念和经验。Herb Sutterl老大2004年就吐血呐喊<a href="http://www.gotw.ca/publications/concurrency-ddj.htm">Free Lunch Is Over, All We Got Is Multi-core Dinner</a>，俺现在读这本书只算是亡羊补牢。</p>
<p><a href="http://www.amazon.com/JavaScript-Definitive-Guide-David-Flanagan/dp/0596101996/"><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/g9yuayon/527b6760bb854d77ab913d8763b8cb4d.jpg" alt="img"></a>: <a href="http://www.amazon.com/JavaScript-Definitive-Guide-David-Flanagan/dp/0596101996/">Javascript the definitive guide</a>. 今年颇写了些RIA应用。感受是：我恨HTML+CSS，但我爱Javascript。而且现在看来RIA越来越火（没办法，Google, Gucci, Nike, 和众多的Web2.0公司把门槛提高了）。俺向来认为做技术如杀敌，斩草须除根。所以今年要好好梳理一下JavaScript。今年初草草读过这本书第三版。现在第5版要出来了。据说有<a href="http://www.davidflanagan.com/blog/2006_08.html#000110">很多新内容</a>。Steve Yegge说他在Google<a href="http://steve-yegge.blogspot.com/2006/09/bloggers-block-3-dreaming-in-browser.html">的时候一个月把关于DHTML和CSS的书翻得快散架</a>，当是俺效仿的榜样。</p>
<p><a href="http://www.sics.se/~joe/thesis/armstrong_thesis_2003.pdf"><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/g9yuayon/ebc6ffd1b12246af8f16cda2ce0ed5d9.png" alt="img"></a>:<a href="http://www.sics.se/~joe/thesis/armstrong_thesis_2003.pdf">Making Reliable Distributed Systems in the Presence of Software Errors</a>. Erlang的作者<a href="http://www.sics.se/~joe/index.html">Joel Armstrong</a>的博士论文。既然要学并发编程，不能说只懂synchronization不是？Erlang的消息传递好歹也是江湖一大显赫门派。所以俺准备今年学Erlang。<a href="http://blog.csdn.net/g9yuayon/archive/2005/01.aspx">牛人Damien Katz</a>强烈<a href="http://damienkatz.net/2006/12/erlang.html">推荐从这篇论文</a>开始，因为它解释了很多看似古怪的Erlan功能，而且阐述了Erlang的来龙去脉。考察一门技术的历史沿革总能让我们深刻理解这门技术。</p>
<p>![img]<a href="http://www.amazon.com/Concepts-Techniques-Models-Computer-Programming/dp/0262220695/">(https://p-blog.csdn.net/images/p_blog_csdn_net/g9yuayon/8ac9551c192548c2827f20e2ac743ef2.jpg)</a>: <a href="http://www.amazon.com/Concepts-Techniques-Models-Computer-Programming/dp/0262220695/">Concepts, Techniques, and Models of Computer Programming</a>. 还没看，不过俺朋友和<a href="http://www.lambda-the-ultimate.org/">LtU</a>都强烈推荐。号称需要一读再读的经典。今年就补上这一课算了。</p>
<p><a href="http://www.amazon.com/Code-Complete-Second-Steve-McConnell/dp/0735619670/"><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/g9yuayon/5e61034c49b74741b3e54ead63a60099.jpg" alt="img"></a><a href="http://www.amazon.com/Code-Complete-Second-Steve-McConnell/dp/0735619670/">Code Complete, 2nd ed</a>. 大三时细读了第一版，至今受益。去年借来第二版，可耻地只翻了几页。今年纯还债。</p>
<h3 id="设计和架构"><a href="#设计和架构" class="headerlink" title="设计和架构"></a>设计和架构</h3><p><a href="http://www.amazon.com/gp/product/1563272822/"><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/g9yuayon/998742e10d9a4d09b643b9ff6716afc4.jpg" alt="img"></a>：<a href="http://www.amazon.com/gp/product/1563272822/">The Toyota Product Development System</a>. 丰田的Lean Development模式开始慢慢影响到软件开发。据说丰田的开发方法里颇有些看似违反常理的东西，让人非常好奇。</p>
<p><a href="http://www.amazon.com/Framework-Design-Guidelines-Conventions-Development/dp/0321246756/"><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/g9yuayon/ce87955cf7f64611a2252f6c01512cb2.jpg" alt="img"></a>：<a href="http://www.amazon.com/Framework-Design-Guidelines-Conventions-Development/dp/0321246756/">Framework Design Guidelines</a>. 据说书的前身是微软的内部开发文档。好奇微软是怎么设计框架的。</p>
<h3 id="项目管理"><a href="#项目管理" class="headerlink" title="项目管理"></a>项目管理</h3><p><a href="http://www.amazon.com/gp/product/0735605351/ref=wl_it_dp/103-2894649-9471814?ie=UTF8&coliid=IUDWD4CHBKEG7&colid=2ABJRW1CNHP5W"><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/g9yuayon/d6d86c11b35b4ac9a49ed378f072b539.png" alt="img"></a>：<a href="http://www.amazon.com/gp/product/0735605351/ref=wl_it_dp/103-2894649-9471814?ie=UTF8&coliid=IUDWD4CHBKEG7&colid=2ABJRW1CNHP5W">Software Estimation: Demystifying the Black Art (Best Practices (Microsoft))</a>. Steve McConnell的新作。我的弱点之一就是不能准确地估计项目的开销。很想知道喜好CMM/COCOMO这类重口味的Steve怎么解决这个问题。</p>
<p><a href="http://www.amazon.com/gp/product/0596007868/ref=wl_it_dp/103-2894649-9471814?ie=UTF8&coliid=IZG9SF0WJQ0TK&colid=2ABJRW1CNHP5W"><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/g9yuayon/136768a0c83e48fc86f980f0e2973c58.png" alt="img"></a>： <a href="http://www.amazon.com/gp/product/0596007868/ref=wl_it_dp/103-2894649-9471814?ie=UTF8&coliid=IZG9SF0WJQ0TK&colid=2ABJRW1CNHP5W">The Art of Project Management</a>。 <a href="http://www.scottberkun.com/blog/">Scott Berkun的博客</a>已经精彩纷呈。这本书放在我的<a href="http://www.amazon.com/gp/registry/registry.html/002-3075099-4991226?ie=UTF8&type=wishlist&id=2ABJRW1CNHP5W">wish list</a>好久了。今年也该读了。</p>
<p><a href="http://www.amazon.com/gp/product/0976694026/ref=wl_it_dp/103-2894649-9471814?ie=UTF8&coliid=I2H5WMRDY8RU5V&colid=2ABJRW1CNHP5W"><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/g9yuayon/14d5f795cca243508579bb70564d17be.png" alt="img"></a>: <a href="http://www.amazon.com/gp/product/0976694026/ref=wl_it_dp/103-2894649-9471814?ie=UTF8&coliid=I2H5WMRDY8RU5V&colid=2ABJRW1CNHP5W">Behind Closed Doors: Secrets of Great Management</a>。好评如潮的书。也是放在我的wish list里N久了。纯清除债务。</p>
<p><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/g9yuayon/df3f7c8bf4324fc58bfda08c3c107e5b.png" alt="img">: <a href="http://www.amazon.com/gp/product/0684852861/ref=wl_it_dp/103-2894649-9471814?ie=UTF8&coliid=I1A5Z7RQ7QPMS7&colid=2ABJRW1CNHP5W">First, Break All the Rules</a>. 健身房/洗衣房专用书。蹬自行车时看的。已经读了3/4了。学到不少东西。</p>
<h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><p><a href="http://www.amazon.ca/gp/product/0060891548/ref=wl_it_dp/702-9176350-4107258?ie=UTF8&coliid=I3I6RQ76H9RL7V&colid=2J3936VCCJU2"><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/g9yuayon/f45a5ca5773d45c6ada39536df2026ca.png" alt="img">: On Writing Well.</a> 谈写作的经典小册子。其实我更想向冯唐那么牛，写出动人的文字。可惜跑到当当上搜了半天，都没发现一本看上去不错的写作书。什么SAT写作，GMAT写作这类垃圾书倒一大堆。</p>
<h3 id="计算机科学"><a href="#计算机科学" class="headerlink" title="计算机科学"></a>计算机科学</h3><p><a href="http://www.amazon.com/MMIXware-RISC-Computer-Third-Millennium/dp/3540669388/sr=8-1/qid=1167808380/ref=pd_bbs_sr_1/002-3075099-4991226?ie=UTF8&s=books"><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/g9yuayon/28e1264027f84a6faccc2ff1efd2848c.png" alt="img">：MMIXWare</a>。Knuth的书。买了好几年了。一直说写一个MMIXWare的虚拟机一直没动手。鄙视自己很久了。想到一个传说。Steve Jobs邀请Knuth给苹果公司的工程师讲课。听说Knuth到了，Jobs赶快迎出办公室。同Knuth握手后说：Knuth教授，真荣幸见到你。我读过你的所有作品。Knuth答道：Steve, you’re full of shit。</p>
<p><a href="http://www.amazon.ca/gp/product/3540002960/ref=wl_it_dp/702-9176350-4107258?ie=UTF8&coliid=IS9XC85RJIE8K&colid=2J3936VCCJU2"><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/g9yuayon/179426731999446c942fa5bb049e1848.png" alt="img">:Verification of Reactive Systems。</a>写论文用。买了快两年了，才读了两章。做人还是比较失败。</p>
<p><a href="http://www.amazon.com/gp/product/3540224947/ref=wl_it_dp/103-2894649-9471814?ie=UTF8&coliid=I3P6O2GKRHHRHS&colid=2ABJRW1CNHP5W"><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/g9yuayon/5c189f3b4b744db686f3eb90a79dfd03.png" alt="img">：How to Solve It： Modern Heuristics</a>。看了三章了。</p>
<h2 id="Never-Stop-Learning"><a href="#Never-Stop-Learning" class="headerlink" title="Never Stop Learning"></a>Never Stop Learning</h2><p>Steve Yegge的<a href="http://steve-yegge.blogspot.com/2006/12/i-take-it-all-back-send-me-your-money.html">新文章</a>。 现在笔头好又肯耐心写文章的技术博客作者其实不多。Paul Graham和Steve Yegge是其中的佼佼者。新文章里这句话可作俺们程序员的座右铭：Every program you write should be the hardest you’ve ever written （你写的每个程序都应是你曾写过的最难的程序）。</p>
<h2 id="注意力"><a href="#注意力" class="headerlink" title="注意力"></a>注意力</h2><p>从<a href="http://headrush.typepad.com/creating_passionate_users">Keria Serria</a>的博客看到的<a href="http://headrush.typepad.com/creating_passionate_users/2006/12/httpwww37signal.html">好文章</a>。<a href="http://scientificamerican.com/print_version.cfm?articleID=00010347-101C-14C1-8F9E83414B7F4945">非凡的注意力</a> <a href="http://headrush.typepad.com/creating_passionate_users/2006/03/how_to_be_an_ex.html">造就专家</a>，智力起的作用其实不大。偏偏现在干扰越来越多。而且真正的干扰源自我们的内心。频繁地查信，随时随地地QQ/MSN，阅读无穷无尽的blog。。。到底怎么办呢？仔细读Kerria的帖子吧。</p>
<p><a href="programming.reddit.com">programming</a>reddit论坛大量文章都值得收藏。更重要的是，上面好多文章并非热门应景帖子，靠自己根本不能发现。其实这也是reddit这类所谓web2.0网站吸引用户的原因：现在的网络实在太庞大了。搜索引擎已经不能解决我们的问题，因为我们往往并不知道自己需要搜索什么。有时候，我们更需要一个“发现”引擎，根据我们的喜好帮我们发现合适的资料，推荐给我们。当然，reddit.com不算现在流行的推荐系统（比如findory.com那样的），但他利用大众的智慧，的确推荐了无数高质量文章。而且推荐的文章不局限于任何一门语言，技术，框架，平台。有<a href="http://notvincenz.blogspot.com/2006/11/delimited-continuations.html">讨论编程技巧</a>的，有<a href="http://mark.aufflick.com/blog/2006/11/25/douglas-engelbart-father-of-more-than-just-the-mouse">介绍牛人的，</a> 有<a href="http://www.oreillynet.com/onjava/blog/2006/11/open_java_changes_everything.html?CMP=OTC-FP2116136014&ATT=Open+Java+changes+Everything">讨论技术趋势</a>的，有<a href="http://sigfpe.blogspot.com/2006/11/yoneda-lemma.html">谈理论的</a>，有<a href="http://weblog.raganwald.com/2006/11/what-is-managing-software-development.html">谈项目管理</a>的，有<a href="http://blogs.msdn.com/patrick_dussud/archive/2006/11/21/how-it-all-started-aka-the-birth-of-the-clr.aspx">谈历史八卦</a>（谁知道.NET的CLR是怎么诞生的？谁知道CLR的GC原型是Common Lisp写的？<img src="https://blog.csdn.net/fckeditor/editor/images/smiley/msn/shades_smile.gif" alt="img">）的，有<a href="http://mitpress.mit.edu/SICM/">介绍书籍</a>的，有<a href="http://www.blog.sethroberts.net/2006/11/26/brian-wansink-on-research-design/">介绍工具</a>的，有<a href="http://scienceblogs.com/goodmath/2006/11/why_haskell.php">介绍语言</a>的。。。不一而足。而且有浅显得博客帖子，也有深入的<a href="http://www.usingcsp.com/cspbook.pdf">经典</a>。</p>
<p>形式化方法在CS研究中的重要性。一旦抵触情绪消失，注意力就集中了，那些符号也没那么难懂了。</p>
<p>Danny Hillis有篇<a href="http://www.longnow.org/views/essays/articles/ArtFeynman.php">极为动人的文章</a>，讲述费因曼在Connection Machine Inc时的传奇故事。文章里提到费因曼把每个问题当成一个游戏，总是从“给我一个最简单的例子”这样的问题入手，一直到把一个大问题简化成一系列他能解决的小问题为止。我套用了一下，效果还不错。另外就是把注意力集中在公式的直观意义，尤其是同数据流图的对应关系上。很多复杂公式一下就清晰了。这个手段其实从学数学就开始用。也许本科前的数学本来就直观，</p>
<p>挑战不是别人给的，而是在勃勃雄心驱使下，你自己找的。也许以后做每个项目时，我们应该给自己找点有挑战性的问题，激发自己的潜力。不然做的项目再多，也不过浪费人生。</p>
<h2 id="商业软件编程"><a href="#商业软件编程" class="headerlink" title="商业软件编程"></a>商业软件编程</h2><p>三篇博客帖子详解</p>
<ul>
<li>一篇是<a href="http://www.thoughtworks.com/">Thoughtworks</a>前员工Ravi Mohan写的，《<a href="http://ravimohan.blogspot.com/2006/07/but-martin-enterprise-software-is.html">但是</a><a href="http://ravimohan.blogspot.com/2006/07/but-martin-enterprise-software-is.html">马老大，商业编程就是无聊</a>》。</li>
<li>　第二篇帖子是<a href="http://weblog.raganwald.com/">Reg Braithwaite</a>的一篇帖子，《<a href="http://weblog.raganwald.com/2006/09/business-programming-simply-isnt-that.html">商业编程没有那么难？》</a>。<br>＊　第三篇帖子是XML发明人<a href="http://www.tbray.org/ongoing/">Tim Bray</a>的一篇<a href="http://www.tbray.org/ongoing/When/200x/2006/09/11/Other-Languages">短文</a>。在Tim的<a href="http://www.tbray.org/ongoing/When/200x/2006/09/07/JRuby-guys">努力</a>下，JRuby的两个主程加入了Sun。</li>
</ul>
<h2 id="注意力比较集中"><a href="#注意力比较集中" class="headerlink" title="注意力比较集中"></a>注意力比较集中</h2><p>随着年岁增长，要学的东西只多不少。书桌上的论文摞得越来越高，买而未读的书越来越多，没做的项目列表越来越长。怎么办呢？也许该去看心理医生了。</p>
<p>提高效率的最简单的方法就是，增加兴趣。</p>
<h2 id="学生应该做好一件事"><a href="#学生应该做好一件事" class="headerlink" title="学生应该做好一件事"></a>学生应该做好一件事</h2><p><a href="http://www.thoughtworks.com/"><strong>ThoughtWorks</strong></a>的<a href="http://www.chadfowler.com/"><strong>Chad Fowler</strong></a>面试Java程序员时，让应试人给自己的的Java功底按1到10打分。如果面试人打分在9以上，Chad Fowler就会问“你能不能谈谈怎么让JVM当掉”。原因很简单，打分在9以上，面试人显然是个Java专家，那自然得展示点Java专家的道行。好比马戏团招杂耍演员。一个候选人说，我会同时抛5个球，一边抛一边还可以空翻360度攀爬红绿灯追公车（朋友语）。面试官难道当场录用这个候选人？当然不。是骡子是马，得拉出来溜溜。你状态不好，抛不了5个球，总可以表演一下抛三个吧？不能空翻360度，转个圈儿总行吧？面试前没有翻书复习，记不清<a href="http://en.wikipedia.org/wiki/Binary_decision_diagram"><strong>OBDD</strong></a>怎么实现，说说怎么用Hash总可以吧？</p>
<p>自称“了解数据库”，却答不上基本的数据库问题，面试官当然怀疑你的能力，甚至你的诚正。自称酷爱编程，却连二分查找都写不出来，那不是搞笑么？自称聪明伶俐，你的专业课却门门挂红，不是很讽刺么？什么，老师教得太差？课程太枯燥？也就是说，你告诉我因为该做的事情不合心意，你就乱来？问问自己，这样的人公司敢要么？我就不用评论有的人把高数，线代，计算理论什么的都通通归于没有意义的课程了吧？当然，我们不排除有编程高手不能兼顾学业。没关系，那展示一下你的编程成果啊。如果Linux kenerl里有你的patch，我可以相信你的操作系统课不及格事出有因。如果你有自己的3D游戏（一个ray tracer也中），我可以对你线性代数挂红视而不见。但如果你成绩一塌糊涂，也没有拿得出手的软件作品，面试官怎么能相信你是一个聪明可靠，勤勉好学的人才，怎么能得出你四年来没有虚度的结论？不排除有人大器晚成，但对不起，大器晚成的风险属于不可控型，我们只能祝你好运。</p>
<p>其实就是菜，动力很小，借口很多。</p>
<ul>
<li>开发工具</li>
<li>Build工具</li>
<li>测试工具</li>
<li>网页自动测试</li>
<li>性能测试</li>
<li>覆盖测试</li>
<li>测试环境</li>
<li>静态代码分析</li>
<li>排版工具</li>
<li>JSP开发</li>
<li>数据库</li>
<li>版本控制</li>
<li>CASE</li>
</ul>
<p>程序员嘛，就应该琢磨怎么提高自己的效率。</p>
<p>被玩儿一次，别人可耻；被玩儿两次，自己该死（fool me once, shame on you; fool me twice, shame on me)。</p>
<h2 id="学生建议"><a href="#学生建议" class="headerlink" title="学生建议"></a>学生建议</h2><p><a href="http://www.joelonsoftware.com/">www.joelonsoftware.com</a>上的精妙杂文。还好，网上总有热情洋溢的自愿者。这不，Joel的一篇精妙文章被翻译成中文了。强烈推荐一把：<a href="http://chinese.joelonsoftware.com/Articles/AdviceforComputerScienceC.html">http://chinese.joelonsoftware.com/Articles/AdviceforComputerScienceC.html</a></p>
<ol>
<li>毕业前学会写作</li>
<li>毕业前学会C语言</li>
<li>毕业前学习微观经学（microeconomics）</li>
<li>要因为某些非计算机课程枯燥无趣就敬而远之</li>
<li>学习有大量编程实践的课程  </li>
<li>不要担心工作都跑到印度去了</li>
<li>好好做夏季毕业实习</li>
</ol>
<p>Linus精通写作，他知道如何准确地在email和邮件讨论组中使用书面英语表达自己的思想，所以他能够从全世界召集大量志愿者为Linux工作。你听说过最近风靡全世界的极限编程（Extreme Programming）吗？ 即使你不懂什么是极限编程，你至少听说过这个词。为什么？因为宣传极限编程的人都是天才的作者和演说家。就看看你身边的那些小型的软件开发组织吧，最有权力和影响力的人是那些可以用自信，准确，舒适的英语交流的人。好吧，我承认这些人也许言过其实，但是你无可奈何。</p>
<p>一个合格的程序员和一个伟大的程序员的区别不在于知道多少种编程语言，不在于他们是<a href="http://www.paulgraham.com/gh.html">喜欢Python或者Java</a>，而是在于他们是否擅长表达。他们能够说服，所以他们获得权力。他们能够写清楚明白的评论和接口文档，所以他们使得别人不用<a href="http://www.joelonsoftware.com/articles/fog0000000069.html">重写</a>，而可以重用他们的代码，否则他们的代码就是毫无用处的。他们也能够写出清晰的用户手册，于是最终用户可以理解他们的代码是做什么用的，明白了他们的工作的价值。sourceforge埋葬着许多精美的代码，这些已死的代码无人使用，因为代码的作者很少写（或者根本不写）用户手册。</p>
<p>我不会雇佣一个不懂写作的程序员。如果你擅长写，你就很容易找到工作，紧接着你就会被要求写技术规格文档，这意味着你已经被管理层注意到了。大学里有一些课程，要求你做很多的写作练习，不要犹豫，赶快参加这些课程。不要错过任何要求你每周或者每天练习写作的课程。给自己建立一个网络日志（weblog）。在上面写的越多，你会写地越容易。写地越容易，你就写地越多，这是一个正向地循环激励。</p>
<p>握各种编程语言的程序员事实上用C来交流（lingua franca）；更重要的是，C比某些“现代”语言更接近机器语言。我不管现在大学里在教什么流行的垃圾语言（trendy junk），你至少得花一个学期接近机器。否则，<a href="http://www.joelonsoftware.com/articles/fog0000000319.html">你不可能使用高级语言写出高效的代码</a>。这意味这你不会有机会写编译器或者操作系统，也许这是更好的编程工作；别人不会相信你能够为大项目设计架构。无论你知道多少高级的控制结构，知道如何进行错误处理，如果你不能解释为什么**while （*s++ = *t++）;**的意思是进行字符串拷贝（而且对你而言这是世界上最自然，最易懂的代码），那么你就是在对编程一窍不通的状态下编程（programming based on superstition）。</p>
<p>无论如何请学习微观经济学，因为你需要知道什么是“供给和需求”，什么是竞争优势，什么是净现值（NPVs，Net Present Value，指项目经济寿命期内现金流入总和与现金流出总和之差额），什么是折扣和边际效用（discounting and marginal utility），如果你真想了解商业是如何运作的话。为什么计算机系的学生要学习经济学？因为理解商业基本规律的程序员对商业界来说是宝贵的程序员。我记得无数个程序员使我非常沮丧，因为他们在代码中坚持某些疯狂的设计，这些设计从技术上来说，完美；从资本主义的角度来看，发疯。如果你是一个理解商业的程序员，商业会给你回报。这就是你要学习经济学的原因。</p>
<h2 id="程序员职业规划：让自己重要"><a href="#程序员职业规划：让自己重要" class="headerlink" title="程序员职业规划：让自己重要"></a>程序员职业规划：让自己重要</h2><ol>
<li>调研</li>
<li>投资</li>
<li>营销</li>
<li>执行</li>
</ol>
<p>单纯的编程已经不够了。了解业务逻辑，了解管理流程，能把自己的技术和商务结合起来，解决实际的问题，才大有作为。作者建议我们有空读行业杂志，和做业务的同事多交流。</p>
<p>Pragmatic Programmer的另一个作者Dave的**<a href="http://www.pragmaticprogrammer.com/talks/HowToKeepYourJob/HTKYJ.html">How To Keep Your Job</a>**是必读材料，非常有启发性。</p>
<p>转行的原因不过是发现自己坐在电脑前的时间远远超过了坐在课本前的时间。而且我没有耐性。看到本科花大力气学的东西，不过是为研究生阶段的学习做准备，就沮丧得不行。相比之下，搞计算机就舒服多了。每学一点东西，都可以马上试验，把玩，投入实用。现在想来，我也算幸运。</p>
<h2 id="学习理论的实用意义"><a href="#学习理论的实用意义" class="headerlink" title="学习理论的实用意义"></a>学习理论的实用意义</h2><ul>
<li>学习理论能拓展我们总结一般规律的能力。</li>
<li>学习理论能训练我们洞察不同事物间联系的能力。</li>
<li>学习理论让我们能迅速掌握计算机的前沿动态。</li>
</ul>
<p>没有一定的理论知识，还真看不懂，更不用说和论文的作者讨论了。别告诉我看论文不重要。要开发出别人开发不出的软件，光看<a href="http://www.ddj.com/"><strong>Dr. Dobb’s Journal</strong></a> 是远远不够的。</p>
<p>学习理论能训练我们对直观想法的表述能力。形式化方法要求我们把直观的描述转换成严格的数学描述，或者把一种形式的语言转换为另一种形式的语言。有时一个想法的直观意义明显，但它的形式化描述却不容易。比如说，把非正则的语言{aibi |i &gt; 0} 用Monadic Second Order Logic 表示为∃X ( X(min) ∧∀y∀z (S(y,z) =&gt; (X(y) &lt;=&gt; !X(z))) ∧ !X(max))。与此类似，编程语言也是一种形式化的语言（最主要的特征：没有二义性，和严格受限的语素）。我们编程时也面临把心中想法转换成一行行程序的问题。至少对我来说，学习理论扩展了我对形式化语言的驾驭能力，让我相对轻松地把复杂的想法转化成精简的数学或算法语言描述。</p>
<h2 id="程序员的效率"><a href="#程序员的效率" class="headerlink" title="程序员的效率"></a>程序员的效率</h2><p><a href="http://forums.construx.com/blogs/stevemcc/archive/2008/03/27/productivity-variations-among-software-developers-and-teams-the-origin-of-quot-10x-quot.aspx">Steve McConnell的博客帖子</a>。详述了程序员产率相差10倍的来历。插草标 卖身推荐。引用一段：80年代中期，波音上了一坨重要项目。80枚程序员参与其中。项目不顺利，眼看要错过一坨不容错过的最后期限。为了保证该项目成功，波音调走了这80枚老大，请来<strong>一个人。</strong>于是这枚老大以一人之力，按时按量交割项目。</p>
<p>Eric在他的<a href="http://software.ericsink.com/Abstraction_Pile.html">blog</a>里也提到他曾犯的类似错误，磨刀不误砍柴功。项目刚开始的时候，无数的书都说了有复杂关系的数据存取用EntityBean不错，但我居然没仔细想过别人为什么那样坚持，也没有深入调查，全忘了古训：事豫则立，不豫则废。</p>
<h2 id="编程高手"><a href="#编程高手" class="headerlink" title="编程高手"></a>编程高手</h2><p>目前来看都是不可超越的大山</p>
<h3 id="编程高手-1-–-Bill-Joy"><a href="#编程高手-1-–-Bill-Joy" class="headerlink" title="编程高手 (1) – Bill Joy"></a>编程高手 (1) – Bill Joy</h3><p>Bill Joy, 前任Sun的首席科学家，当年在Berkeley时主持开发了最早版本的BSD。他还是vi和csh的作者。当然，<a href="http://www.faqs.org/faqs/unix-faq/shell/csh-whynot/">Csh Programming Considered Harmful</a> 是另一个话题乐。据说他想看看自己能不能写个操作系统，就在三天里写了个自己的Unix, 也就是BSD的前身。当然是传说了，但足见他的功力。另一个传说是，1980年初的时候，DARPA让BBN在Berkley Unix里加上BBN开发的TCP/IP代码。但当时还是研究生的B伯伯怒了，拒绝把BBN TCP/IP加入BSD，因为他觉得BBN的TCP/IP写得不好。于是B伯伯出手了，端的是一箭封喉，很快就写出了高性能的伯克利版TCP/IP。当时BBN和DARPA签了巨额合同开发TCP/IP Stack，谁知他们的代码还不如一个研究生的好。于是他们开会。只见当时B伯伯穿个T-shirt出现在会议室(当时穿T-shirt不象现在，还是相当散漫的哈)。只见BBN问：你怎么写出来的？而B伯伯答：简单，你读协议，然后编程就行了。最令偶晕倒的是，B伯伯硕士毕业 后决定到工业界发展，于是就到了当时只有一间办公室的Sun, 然后他就把Sparc设计出 来乐。。。象这种软硬通吃的牛人，想不佩服都不行的说。据Bill Joy的同事说，一般开会的时候B伯伯总是拿一堆杂志漫不经心地读。但往往在关键之处，B伯伯发言，直切要害，提出 漂亮的构想，让同事们彻底崩溃。对了，他还是Java Spec和JINI的主要作者之一。</p>
<h3 id="编程高手-2-–-John-Carmack"><a href="#编程高手-2-–-John-Carmack" class="headerlink" title="编程高手 (2) – John Carmack"></a>编程高手 (2) – John Carmack</h3><p>John Carmack，id Software的founder和Lead Programmer。上个月和一个搞图形的师兄聊天，他竟然不知道John Carmack, 也让偶大大地晕了一把。不过也许搞研究的和搞实战的多少有些隔吧。想必喜欢第一人称射击游戏的都知道J哥哥。90年代初只要能在PC上搞个小动画都能让人惊叹一番的时候，J哥哥就推出了石破天惊的Castle Wolfstein, 然后再接再励，doom, doomII, Quake…每次都把3-D技术推到极致。J哥哥的简历上说自己的专长是”Exhaust 3-D technology”，真是牛人之言不我欺的说。做J哥哥这样的人是很幸福的，因为各大图形卡厂家一有了新产品就要向他“进贡” ，不然如果他的游戏不支持哪种卡，哪种卡基本就会夭折乐。当初MS的Direct3D也得听取 他的意见，修改了不少API。当然，J哥哥在结婚前十数年如一日地每天编程14小时以上， 也是偶们凡人望尘莫及的。对了，J哥哥高中肆业(？)，可以说是自学成才。不过呢，谁要用这个例子来为自己学习不好辩护，就大错特错了。那Leonardo Da Vinci还是自学成才呢(人是私生子，不能上学)。普通人和天才还是有区别的。对了，其实偶们叫“达分奇”是相当不对的，因为Vinci是地名，而Da Vinci就是从Vinci来的人的意思。换句话说，Leonardo Da Vinci就是“从Vinci来的Leonardo”的意思。叫别人“Da Vinci”就不知所谓乐。嗯，扯远了，打住。</p>
<h3 id="编程高手-3-–-David-Cutler"><a href="#编程高手-3-–-David-Cutler" class="headerlink" title="编程高手 (3) – David Cutler"></a>编程高手 (3) – David Cutler</h3><p>David Cutler，VMS和Windows NT的首席设计师，去微软前号称硅谷最牛的kernel开发员。当初他和他的手下在微软一周内把一个具备基本功能的bootable kernel写出来，然后说：“who can’t write an OS in a week?”，也是牛气冲天的说。顺便说一句，D爷爷到NT3.5时，管理1500名开发员，自己还兼做设计和编程，不改coder本色啊。</p>
<p>D爷爷天生脾气火爆，和人争论时喜欢双手猛击桌子以壮声势。:-) 日常交谈F-word不离口。他面试秘书时必问：”what do you think of the word ‘fuck’?” ，让无数美女刹羽而归。终于有一天，一个同样火爆的女面对这个问题脱口而出：”That’s my favorite word”。于是她被录取乐，为D爷爷工作到NT3.5发布。</p>
<h3 id="编程高手-4-–-Donald-E-Knuth"><a href="#编程高手-4-–-Donald-E-Knuth" class="headerlink" title="编程高手 (4) – Donald E. Knuth"></a>编程高手 (4) – Donald E. Knuth</h3><p><a href="http://www-cs-faculty.stanford.edu/~knuth/">Don <strong>Knuth</strong></a>。高爷爷其实用不着偶多说。学编程的不知道他就好像学物理的不知道牛顿，学数学的不知道欧拉，学音乐的不知道莫扎特，学Delphi的不知到<a href="http://en.wikipedia.org/wiki/Anders_Hejlsberg"><strong>Anders</strong> <strong>Hejlsberg</strong></a>，或者学Linux不知道<a href="http://www.cs.helsinki.fi/u/torvalds/"><strong>Linus</strong> <strong>Torvalds</strong></a>一样，不可原谅啊。:-)为了让文章完整，就再罗唆几句吧。高爷爷本科时就开始给行行色色的公司写各种稀奇古怪的编译器挣外快了。他卖给别人时收一两千美元，那些公司拿了code，加工一下卖出去就是上万上十万。不过也没见高爷爷不爽过，学者本色的说。想想那可是60年代初啊，高爷爷写编译器写多了，顺带就搞出了个Attribute Grammar和LR(k)，大大地造福后人啊。至于高爷爷在CalTech的编程比赛(有Alan Kay得众多高高手参加)总是第一，写的Tex到86年就code freeze，还附带2^n美分奖励等等都是耳熟能详的，偶就不饶舌乐。</p>
<p>顺便说一下，高老大爷是无可争议的写作高手。他给<a href="http://www.amazon.com/exec/obidos/tg/detail/-/0201558025/002-8183620-1376038?v=glance">Concrete Mathematics</a>写的前言可谓字字铿锵，堪为前言的典范。他的技术文章也是一绝，文风细致，解释精当，而且没有学究气，不失轻快跳脱。记得几年前读Concrete Mathematics，时不时开怀大笑，让老妈极其郁闷，觉得我nerdy到家，不可救药。其实呢，子非鱼，安知鱼之乐，更不知那完全是高爷爷的功劳。说到写作高手，不能不提<a href="http://www.cs.toronto.edu/~sacook/"><strong>Stephen</strong> A. <strong>Cook</strong></a>。他的文章当年就被我们的写作老师极力推荐，号称典雅文风的样本。库爷爷一头银发，身材颀长，总是面带谦和的微笑，颇有仙风道骨，正好和他的仙文相配的说。</p>
<p>高爷爷其实还是开源运动的先驱。虽然他没有象Richard Stallman那样八方奔走，但他捐献了好多作品，都可以在网上看到，比如著名的Mathematical Writing，MMIXWare，The Tex Book等，更不用说足以让他流芳百世的Tex乐。</p>
<h3 id="编程高手-5-–-Ken-Thompson"><a href="#编程高手-5-–-Ken-Thompson" class="headerlink" title="编程高手 (5) – Ken Thompson"></a>编程高手 (5) – Ken Thompson</h3><p>Ken Thompson，C语言前身B语言的作者，Unix的发明人之一(另一个是Dennis M. Riche老大，被尊为DMR)，Belle(一个厉害的国际象棋程序)的作者之一, 操作系统Plan 9的主要作者(另一个是大牛人Rob Pike, 前不久被google挖走了)。Ken爷爷也算是计算机历史上开天辟地的人物了。1969年还是计算机史前时代，普通人都认为只有大型机才能运行通用的操作系统，小型机只有高山仰止的份儿。至于用高级语言来写操作系统，更是笑谈。Ken爷爷自然不是池中物，于是他和DMR怒了，在1969年到1970间用汇编在PDP-7上写出了UNIX的第一个版本。他们并不知道，一场轰轰烈烈的UNIX传奇由此拉开了序幕。Ken爷爷在1971年又把Unix用C重写，于是C在随后20年成就了不知多少豪杰的梦想和光荣。</p>
<p>Ken爷爷还有段佳话： 装了UNIX的PDP-11最早被安装在Bell Lab里供大家日常使用。很快大家就发现Ken爷爷总能进入他们的帐户，获得最高权限。Bell Lab里的科学家都心比天高，当然被搞得郁闷无比。于是有高手怒了，跳出来分析了UNIX代码，找到后门，修改代码，然后重新编译了整个UNIX。就在大家都以为“这个世界清净了”的时候，他们发现Ken爷爷还是轻而易举地拿到他们的帐户权限，百思不解后，只好继续郁闷。谁知道这一郁闷，就郁闷了14年，直到Ken爷爷道出个中缘由。原来，代码里的确有后门，但后门不在Unix代码里，而在编译Unix代码的C编译器里。每次C编译器编译UNIX的代码，就自动生成后门代码。而整个Bell Lab的人，都是用Ken爷爷的C编译器。</p>
<h3 id="编程高手-6-–-Rob-Pike"><a href="#编程高手-6-–-Rob-Pike" class="headerlink" title="编程高手 (6) – Rob Pike"></a>编程高手 (6) – Rob Pike</h3><p>Rob Pike, AT&amp;T Bell Lab前Member of Technical Staff ，现在google研究操作系统。罗伯伯是Unix的先驱，是贝尔实验室最早和Ken Thompson以及Dennis M. Ritche开发Unix的猛人，UTF-8的设计人。他还在美国名嘴David Letterman的<a href="http://www.cbs.com/latenight/lateshow/"><strong>晚间节目</strong></a>上露了<a href="http://www.cs.bell-labs.com/who/rob/movies/letterman.mpg"><strong>一小脸</strong></a>，一脸憨厚地帮一胖子吹牛搞怪。让偶佩服不已的是，罗伯伯还是1980年奥运会射箭的银牌得主。他也是个颇为厉害的业余天文学家，设计的珈玛射线望远镜差点被NASA用在航天飞机上。他还是两本经典，<a href="http://cm.bell-labs.com/cm/cs/upe"><em><strong>The Unix Programming Environment</strong></em></a> 和 <a href="http://cm.bell-labs.com/cm/cs/tpop"><em><strong>The Practice of Programming</strong></em></a> 的作者之一。如果初学者想在编程方面精益求精，实在该好好读读这两本书。它们都有中文版的说。罗伯伯还写出了Unix下第一个基于位图的窗口系统，并且是著名的blit 终端的作者。当然了，罗伯伯还是号称锐意革新的操作系统，Plan9，的主要作者。可惜的是，Plan9并没有引起多少人的注意。罗伯伯一怒之下，写出了振聋发聩的雄文 <a href="http://www.cs.bell-labs.com/who/rob/utah2000.pdf"><em><strong>Systems Software Research is Irrelevant</strong></em></a>，痛斥当下系统开发不思进取，固步自封的弊病。虽然这篇文章是罗伯伯含忿出手，颇有偏激之词，但确实道出了系统开发的无奈：开发周期越来越长，代价越来越大，用户被统一到少数几个系统上，结果越来越多的活动是测量和修补，而真正的革新越来越少。</p>
<p>就在罗伯伯郁闷之极的时候，google登门求贤来乐。如果说现在还有一家大众公司在不遗余力地把系统开发推向极致的话，也就是google乐。随便看看google的<a href="http://labs.google.com/"><strong>成果</strong></a>就知道了。具有超强容错和负载平衡能力的分布式文件系统<a href="http://www.cs.rochester.edu/sosp2003/papers/p125-ghemawat.pdf">GFS</a> (现在能够用100,000台廉价PC搭起一个巨型分布系统，并且高效便宜地进行管理的系统也不多哈)，大规模机器学习系统(拼写检查，广告匹配，拼音搜寻。。。哪个都很牛的说)，更不用说处理海量并行计算的各式google服务了。Rob在System Software Research is Irrelevant里萧瑟地说现在没有人再关心系统研究的前沿成果了。想不到他错了，因为google关心。google网络了<a href="http://labs.google.com/why-google.html"><strong>大批功成名就的牛人</strong></a>，还有大量初生牛犊般博士做开发，显然不是没事耍酷，而是因为它们的开发总是试图吸取系统研究的最新成果。想必Rob Pike在google很幸福。愿他做出更棒的系统。</p>
<h3 id="编程高手-7-–-Dennis-M-Ritchie"><a href="#编程高手-7-–-Dennis-M-Ritchie" class="headerlink" title="编程高手 (7) – Dennis M. Ritchie"></a>编程高手 (7) – Dennis M. Ritchie</h3><p>既然<a href="http://blog.csdn.net/g9yuayon/archive/2004/07/06/34882.aspx"><strong>Ken Thompson</strong></a>是我的偶像，新闻组上人称DMR的<a href="http://www.cs.bell-labs.com/who/dmr/"><strong>Dennis M. Ritchie</strong></a>自然也是，毕竟两人共同缔造了UNIX，而Dennis几乎独力把C搞大(当然，C的前身是B，而B是Ken Thompson一手做出来的)。J 两人1983年分享<a href="http://www.acm.org/awards/taward.html"><strong>图灵奖</strong></a>，是有史以来少数几个因工程项目得奖的工程师(本来是唯一的一对儿，但<a href="http://www.smalltalk.org/alankay.html"><strong>Alan Kay</strong></a>才因为<a href="http://www.smalltalk.org/">SmallTalk</a>得奖，所以就成了唯二的乐) 。一个人一生能做出一个卓越的系统已经不易，DMR的C和UNIX长盛不衰近30年，至今生机勃勃，DMR此生可以无憾的说。</p>
<h3 id="编程高手-8-–-Edsger-Wybe-Dijkstra"><a href="#编程高手-8-–-Edsger-Wybe-Dijkstra" class="headerlink" title="编程高手 (8) – Edsger Wybe Dijkstra"></a>编程高手 (8) – Edsger Wybe Dijkstra</h3><p>戴爷爷大概因为最短路径算法一战成名，于是有人请他参加另一台计算机X1的设计工作，并且把设计实时中断系统的任务派给了他。现在看来实时中断也许不算什么，但要知到，X1前根本就没有实时中断的概念。实现它简直就是一场豪赌。戴爷爷起初还不情愿，但经不住项目负责人Bram和Carel的轮番“吹捧”：我们知道实时中断让您工作变得非常困难，但象您这样的牛人肯定能做出来的说。结果戴爷爷被糖衣炮弹彻底击穿，接下了这个烫手山芋。两三年后，他不仅搞出了实时中断，还围绕这个写出了自己的博士论文，顺利戴上博士帽。</p>
<h3 id="心目中的编程高手-9-–-Anders-Hejlsberg"><a href="#心目中的编程高手-9-–-Anders-Hejlsberg" class="headerlink" title="心目中的编程高手 (9) – Anders Hejlsberg"></a>心目中的编程高手 (9) – Anders Hejlsberg</h3><p>Anders Hejlsberg，微软.NET的首席架构师，编程语言设计和实现的顶尖高手。他一手做出了Turbo Pascal, 也是Delphi, J++(尤其是WFC)，C#, 和.NET的主要作者。这些作品的名字足以为他立传。作为一个程序员，我在这样的大师面前实在无语。生子当如Anders的说。李维的&lt;Borland传奇&gt;里已详细讲述了Anders的传奇故事，我就不用费舌了：<a href="http://java.mblogger.cn/iexploiter/posts/1505.aspx">&lt;Borland传奇&gt;</a> 。 <a href="http://www.artima.com/">Artima</a>上有Anders谈C#的<a href="http://www.artima.com/intv/choices.html">系列访谈</a> 。MSDN上有一段Anders<a href="http://channel9.msdn.com/ShowPost.aspx?PostID=10116">导游的录像</a> 。有兴趣可以去看看牛人的丰采。</p>
]]></content>
      <categories>
        <category>People that affect me</category>
      </categories>
      <tags>
        <tag>affect</tag>
        <tag>people</tag>
      </tags>
  </entry>
</search>
